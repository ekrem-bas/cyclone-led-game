
WS2812_FUNCTIONS_TEST_ARDUINO_GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08003860  08003860  00004860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038bc  080038bc  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080038bc  080038bc  0000501c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080038bc  080038bc  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038bc  080038bc  000048bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080038c0  080038c0  000048c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080038c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  2000001c  080038e0  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000093c  080038e0  0000593c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008625  00000000  00000000  00005044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189c  00000000  00000000  0000d669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0000ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007ba  00000000  00000000  0000f8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001003c  00000000  00000000  000100b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000adf8  00000000  00000000  000200ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062636  00000000  00000000  0002aee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008d51c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023b4  00000000  00000000  0008d560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0008f914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000001c 	.word	0x2000001c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003848 	.word	0x08003848

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000020 	.word	0x20000020
 8000104:	08003848 	.word	0x08003848

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_TIM_PWM_PulseFinishedCallback>:
uint16_t pwmData[24 * noOfLEDs + 50]; // Bu dizi main.c'de tanımlı olmalı

// -----------------------------------------------------------
// WS2812 TEST FONSKIYONLARI
// -----------------------------------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80003fe:	2100      	movs	r1, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f002 fb25 	bl	8002a50 <HAL_TIM_PWM_Stop_DMA>
	htim3.Instance->CCR1 = 0;
 8000406:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	20000038 	.word	0x20000038

0800041c <setLED>:
	for (int i = 0; i < 24 * noOfLEDs; i++)
		pwmData[i] = 2;
}

// led'in rengini ayarlamak icin fonksiyon
void setLED(int LEDposition, int Red, int Green, int Blue) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	603b      	str	r3, [r7, #0]
	for (int i = 7; i >= 0; i--) // Set the first 8 out of 24 to green
 800042a:	2307      	movs	r3, #7
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	e017      	b.n	8000460 <setLED+0x44>
			{
		pwmData[24 * LEDposition + 7 - i] = ((Green >> i) & 1) + 1;
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	411a      	asrs	r2, r3
 8000436:	0013      	movs	r3, r2
 8000438:	b29b      	uxth	r3, r3
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	b299      	uxth	r1, r3
 8000440:	68fa      	ldr	r2, [r7, #12]
 8000442:	0013      	movs	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	189b      	adds	r3, r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	1dda      	adds	r2, r3, #7
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	1c4b      	adds	r3, r1, #1
 8000452:	b299      	uxth	r1, r3
 8000454:	4b25      	ldr	r3, [pc, #148]	@ (80004ec <setLED+0xd0>)
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	52d1      	strh	r1, [r2, r3]
	for (int i = 7; i >= 0; i--) // Set the first 8 out of 24 to green
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b01      	subs	r3, #1
 800045e:	61fb      	str	r3, [r7, #28]
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	2b00      	cmp	r3, #0
 8000464:	dae4      	bge.n	8000430 <setLED+0x14>
	}
	for (int i = 7; i >= 0; i--) // Set the second 8 out of 24 to red
 8000466:	2307      	movs	r3, #7
 8000468:	61bb      	str	r3, [r7, #24]
 800046a:	e018      	b.n	800049e <setLED+0x82>
			{
		pwmData[24 * LEDposition + 15 - i] = ((Red >> i) & 1) + 1;
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	411a      	asrs	r2, r3
 8000472:	0013      	movs	r3, r2
 8000474:	b29b      	uxth	r3, r3
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	b299      	uxth	r1, r3
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	0013      	movs	r3, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	189b      	adds	r3, r3, r2
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	330f      	adds	r3, #15
 8000488:	001a      	movs	r2, r3
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	1ad2      	subs	r2, r2, r3
 800048e:	1c4b      	adds	r3, r1, #1
 8000490:	b299      	uxth	r1, r3
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <setLED+0xd0>)
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	52d1      	strh	r1, [r2, r3]
	for (int i = 7; i >= 0; i--) // Set the second 8 out of 24 to red
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	3b01      	subs	r3, #1
 800049c:	61bb      	str	r3, [r7, #24]
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	dae3      	bge.n	800046c <setLED+0x50>
	}
	for (int i = 7; i >= 0; i--) // Set the third 8 out of 24 to blue
 80004a4:	2307      	movs	r3, #7
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	e018      	b.n	80004dc <setLED+0xc0>
			{
		pwmData[24 * LEDposition + 23 - i] = ((Blue >> i) & 1) + 1;
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	411a      	asrs	r2, r3
 80004b0:	0013      	movs	r3, r2
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	2201      	movs	r2, #1
 80004b6:	4013      	ands	r3, r2
 80004b8:	b299      	uxth	r1, r3
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	0013      	movs	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	189b      	adds	r3, r3, r2
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	3317      	adds	r3, #23
 80004c6:	001a      	movs	r2, r3
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	1c4b      	adds	r3, r1, #1
 80004ce:	b299      	uxth	r1, r3
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <setLED+0xd0>)
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	52d1      	strh	r1, [r2, r3]
	for (int i = 7; i >= 0; i--) // Set the third 8 out of 24 to blue
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3b01      	subs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dae3      	bge.n	80004aa <setLED+0x8e>
	}
}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b008      	add	sp, #32
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000c4 	.word	0x200000c4

080004f0 <ws2812Send>:

// DMA baslatan fonksiyon
void ws2812Send(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData,
 80004f4:	4b04      	ldr	r3, [pc, #16]	@ (8000508 <ws2812Send+0x18>)
 80004f6:	4a05      	ldr	r2, [pc, #20]	@ (800050c <ws2812Send+0x1c>)
 80004f8:	4805      	ldr	r0, [pc, #20]	@ (8000510 <ws2812Send+0x20>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	f002 f8fe 	bl	80026fc <HAL_TIM_PWM_Start_DMA>
			24 * noOfLEDs + 50);
}
 8000500:	46c0      	nop			@ (mov r8, r8)
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	000003f2 	.word	0x000003f2
 800050c:	200000c4 	.word	0x200000c4
 8000510:	20000038 	.word	0x20000038

08000514 <set_led_color_in_strip>:
		break; // case 5
	}
}

// Gölge LED dizisindeki bir LED'in rengini ayarlar
void set_led_color_in_strip(int index, uint8_t r, uint8_t g, uint8_t b) {
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	000c      	movs	r4, r1
 800051e:	0010      	movs	r0, r2
 8000520:	0019      	movs	r1, r3
 8000522:	1cfb      	adds	r3, r7, #3
 8000524:	1c22      	adds	r2, r4, #0
 8000526:	701a      	strb	r2, [r3, #0]
 8000528:	1cbb      	adds	r3, r7, #2
 800052a:	1c02      	adds	r2, r0, #0
 800052c:	701a      	strb	r2, [r3, #0]
 800052e:	1c7b      	adds	r3, r7, #1
 8000530:	1c0a      	adds	r2, r1, #0
 8000532:	701a      	strb	r2, [r3, #0]
	if (index >= 0 && index < NUM_LEDS) {
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b00      	cmp	r3, #0
 8000538:	db1e      	blt.n	8000578 <set_led_color_in_strip+0x64>
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b27      	cmp	r3, #39	@ 0x27
 800053e:	dc1b      	bgt.n	8000578 <set_led_color_in_strip+0x64>
		led_strip[index].r = r;
 8000540:	490f      	ldr	r1, [pc, #60]	@ (8000580 <set_led_color_in_strip+0x6c>)
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	0013      	movs	r3, r2
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	189b      	adds	r3, r3, r2
 800054a:	1cfa      	adds	r2, r7, #3
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	545a      	strb	r2, [r3, r1]
		led_strip[index].g = g;
 8000550:	490b      	ldr	r1, [pc, #44]	@ (8000580 <set_led_color_in_strip+0x6c>)
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	0013      	movs	r3, r2
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	189b      	adds	r3, r3, r2
 800055a:	18cb      	adds	r3, r1, r3
 800055c:	3301      	adds	r3, #1
 800055e:	1cba      	adds	r2, r7, #2
 8000560:	7812      	ldrb	r2, [r2, #0]
 8000562:	701a      	strb	r2, [r3, #0]
		led_strip[index].b = b;
 8000564:	4906      	ldr	r1, [pc, #24]	@ (8000580 <set_led_color_in_strip+0x6c>)
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	0013      	movs	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	189b      	adds	r3, r3, r2
 800056e:	18cb      	adds	r3, r1, r3
 8000570:	3302      	adds	r3, #2
 8000572:	1c7a      	adds	r2, r7, #1
 8000574:	7812      	ldrb	r2, [r2, #0]
 8000576:	701a      	strb	r2, [r3, #0]
	}
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b003      	add	sp, #12
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	200008bc 	.word	0x200008bc

08000584 <fill_strip_solid>:

// Tüm gölge LED dizisini belirli bir renkle doldurur
void fill_strip_solid(uint8_t r, uint8_t g, uint8_t b) {
 8000584:	b590      	push	{r4, r7, lr}
 8000586:	b085      	sub	sp, #20
 8000588:	af00      	add	r7, sp, #0
 800058a:	0004      	movs	r4, r0
 800058c:	0008      	movs	r0, r1
 800058e:	0011      	movs	r1, r2
 8000590:	1dfb      	adds	r3, r7, #7
 8000592:	1c22      	adds	r2, r4, #0
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	1dbb      	adds	r3, r7, #6
 8000598:	1c02      	adds	r2, r0, #0
 800059a:	701a      	strb	r2, [r3, #0]
 800059c:	1d7b      	adds	r3, r7, #5
 800059e:	1c0a      	adds	r2, r1, #0
 80005a0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < NUM_LEDS; i++) {
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e00c      	b.n	80005c2 <fill_strip_solid+0x3e>
		set_led_color_in_strip(i, r, g, b);
 80005a8:	1d7b      	adds	r3, r7, #5
 80005aa:	781c      	ldrb	r4, [r3, #0]
 80005ac:	1dbb      	adds	r3, r7, #6
 80005ae:	781a      	ldrb	r2, [r3, #0]
 80005b0:	1dfb      	adds	r3, r7, #7
 80005b2:	7819      	ldrb	r1, [r3, #0]
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	0023      	movs	r3, r4
 80005b8:	f7ff ffac 	bl	8000514 <set_led_color_in_strip>
	for (int i = 0; i < NUM_LEDS; i++) {
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3301      	adds	r3, #1
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	2b27      	cmp	r3, #39	@ 0x27
 80005c6:	ddef      	ble.n	80005a8 <fill_strip_solid+0x24>
	}
}
 80005c8:	46c0      	nop			@ (mov r8, r8)
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b005      	add	sp, #20
 80005d0:	bd90      	pop	{r4, r7, pc}
	...

080005d4 <update_led_strip_to_physical_leds>:

// Gölge LED dizisindeki renkleri parlaklık ayarıyla fiziksel LED'lere gönderir
void update_led_strip_to_physical_leds(void) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS; i++) {
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e045      	b.n	800066c <update_led_strip_to_physical_leds+0x98>
		uint8_t r_adj = ((uint16_t) led_strip[i].r * global_brightness) / 255;
 80005e0:	4927      	ldr	r1, [pc, #156]	@ (8000680 <update_led_strip_to_physical_leds+0xac>)
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	0013      	movs	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	189b      	adds	r3, r3, r2
 80005ea:	5c5b      	ldrb	r3, [r3, r1]
 80005ec:	001a      	movs	r2, r3
 80005ee:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <update_led_strip_to_physical_leds+0xb0>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4353      	muls	r3, r2
 80005f4:	21ff      	movs	r1, #255	@ 0xff
 80005f6:	0018      	movs	r0, r3
 80005f8:	f7ff fe10 	bl	800021c <__divsi3>
 80005fc:	0003      	movs	r3, r0
 80005fe:	001a      	movs	r2, r3
 8000600:	1cfb      	adds	r3, r7, #3
 8000602:	701a      	strb	r2, [r3, #0]
		uint8_t g_adj = ((uint16_t) led_strip[i].g * global_brightness) / 255;
 8000604:	491e      	ldr	r1, [pc, #120]	@ (8000680 <update_led_strip_to_physical_leds+0xac>)
 8000606:	687a      	ldr	r2, [r7, #4]
 8000608:	0013      	movs	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	189b      	adds	r3, r3, r2
 800060e:	18cb      	adds	r3, r1, r3
 8000610:	3301      	adds	r3, #1
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	001a      	movs	r2, r3
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <update_led_strip_to_physical_leds+0xb0>)
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	4353      	muls	r3, r2
 800061c:	21ff      	movs	r1, #255	@ 0xff
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fdfc 	bl	800021c <__divsi3>
 8000624:	0003      	movs	r3, r0
 8000626:	001a      	movs	r2, r3
 8000628:	1cbb      	adds	r3, r7, #2
 800062a:	701a      	strb	r2, [r3, #0]
		uint8_t b_adj = ((uint16_t) led_strip[i].b * global_brightness) / 255;
 800062c:	4914      	ldr	r1, [pc, #80]	@ (8000680 <update_led_strip_to_physical_leds+0xac>)
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	0013      	movs	r3, r2
 8000632:	005b      	lsls	r3, r3, #1
 8000634:	189b      	adds	r3, r3, r2
 8000636:	18cb      	adds	r3, r1, r3
 8000638:	3302      	adds	r3, #2
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	001a      	movs	r2, r3
 800063e:	4b11      	ldr	r3, [pc, #68]	@ (8000684 <update_led_strip_to_physical_leds+0xb0>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	4353      	muls	r3, r2
 8000644:	21ff      	movs	r1, #255	@ 0xff
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff fde8 	bl	800021c <__divsi3>
 800064c:	0003      	movs	r3, r0
 800064e:	001a      	movs	r2, r3
 8000650:	1c7b      	adds	r3, r7, #1
 8000652:	701a      	strb	r2, [r3, #0]
		// Eğer FastLED RGB sırasında gönderiyorsa ve WS2811'iniz RGB ise, setLED'e R,G,B vermek doğrudur.
		// Eğer WS2811'iniz GRB ise ve FastLED RGB gönderiyorsa, FastLED kendi içinde çeviriyordu.
		// Sizin setLED fonksiyonunuzun argümanları (Red, Green, Blue) ise ve WS2811'iniz GRB ise,
		// setLED(pos, Kirmizi, Yesil, Mavi) -> pwmData'ya Yesil, Kirmizi, Mavi bitlerini yazar.
		// Bu durumda bizim RGBColor {r,g,b} yapımızdaki değerleri doğrudan kullanabiliriz.
		setLED(i, r_adj, g_adj, b_adj);
 8000654:	1cfb      	adds	r3, r7, #3
 8000656:	7819      	ldrb	r1, [r3, #0]
 8000658:	1cbb      	adds	r3, r7, #2
 800065a:	781a      	ldrb	r2, [r3, #0]
 800065c:	1c7b      	adds	r3, r7, #1
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff fedb 	bl	800041c <setLED>
	for (int i = 0; i < NUM_LEDS; i++) {
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3301      	adds	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b27      	cmp	r3, #39	@ 0x27
 8000670:	ddb6      	ble.n	80005e0 <update_led_strip_to_physical_leds+0xc>
	}
	ws2812Send();
 8000672:	f7ff ff3d 	bl	80004f0 <ws2812Send>
}
 8000676:	46c0      	nop			@ (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b002      	add	sp, #8
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	200008bc 	.word	0x200008bc
 8000684:	2000000c 	.word	0x2000000c

08000688 <game_setup>:

// Oyun başlangıç ayarları
void game_setup(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
	// STM32 HAL başlatmaları (GPIO, TIM, DMA) main() içinde yapılmış olmalı.
	// Oyun mantığı için başlangıç ayarları:
	play_startup_animation();
 800068c:	f000 fb08 	bl	8000ca0 <play_startup_animation>
	fill_strip_solid(0, 0, 0); // Tüm LED'leri siyah yap
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	2000      	movs	r0, #0
 8000696:	f7ff ff75 	bl	8000584 <fill_strip_solid>
	update_led_strip_to_physical_leds(); // Siyah rengi LED'lere gönder
 800069a:	f7ff ff9b 	bl	80005d4 <update_led_strip_to_physical_leds>
	// Gerekirse STM32 UART başlatma kodları eklenebilir (Serial.begin eşdeğeri)
}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}

080006a4 <game_loop>:

// Ana oyun döngüsü
void game_loop(void) {
 80006a4:	b590      	push	{r4, r7, lr}
 80006a6:	b089      	sub	sp, #36	@ 0x24
 80006a8:	af00      	add	r7, sp, #0
	if (!Playing) { // Oyun durmuşsa (ISR tarafından Playing=false yapıldı)
 80006aa:	4b93      	ldr	r3, [pc, #588]	@ (80008f8 <game_loop+0x254>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2201      	movs	r2, #1
 80006b2:	4053      	eors	r3, r2
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d100      	bne.n	80006bc <game_loop+0x18>
 80006ba:	e0e1      	b.n	8000880 <game_loop+0x1dc>
		if (CycleEnded) { // ISR, CycleEnded=true yaptı, yani sonucu değerlendirmemiz gerekiyor
 80006bc:	4b8f      	ldr	r3, [pc, #572]	@ (80008fc <game_loop+0x258>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d100      	bne.n	80006c8 <game_loop+0x24>
 80006c6:	e092      	b.n	80007ee <game_loop+0x14a>
			// Hedef LED ve seçilen LED dışındaki tüm LED'leri kapat
			for (int i = 0; i < NUM_LEDS; i++) {
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]
 80006cc:	e008      	b.n	80006e0 <game_loop+0x3c>
				set_led_color_in_strip(i, 0, 0, 0); // Siyah
 80006ce:	69f8      	ldr	r0, [r7, #28]
 80006d0:	2300      	movs	r3, #0
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	f7ff ff1d 	bl	8000514 <set_led_color_in_strip>
			for (int i = 0; i < NUM_LEDS; i++) {
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3301      	adds	r3, #1
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	2b27      	cmp	r3, #39	@ 0x27
 80006e4:	ddf3      	ble.n	80006ce <game_loop+0x2a>
			}
			set_led_color_in_strip(CENTER_LED, 255, 0, 0); // Merkez LED Kırmızı
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	21ff      	movs	r1, #255	@ 0xff
 80006ec:	2015      	movs	r0, #21
 80006ee:	f7ff ff11 	bl	8000514 <set_led_color_in_strip>
			set_led_color_in_strip(LEDaddress, 0, 255, 0); // Durdurulan LED Yeşil
 80006f2:	4b83      	ldr	r3, [pc, #524]	@ (8000900 <game_loop+0x25c>)
 80006f4:	6818      	ldr	r0, [r3, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	22ff      	movs	r2, #255	@ 0xff
 80006fa:	2100      	movs	r1, #0
 80006fc:	f7ff ff0a 	bl	8000514 <set_led_color_in_strip>
			update_led_strip_to_physical_leds();
 8000700:	f7ff ff68 	bl	80005d4 <update_led_strip_to_physical_leds>

			int diff = abs(CENTER_LED - LEDaddress);
 8000704:	4b7e      	ldr	r3, [pc, #504]	@ (8000900 <game_loop+0x25c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	2215      	movs	r2, #21
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	17da      	asrs	r2, r3, #31
 800070e:	189b      	adds	r3, r3, r2
 8000710:	4053      	eors	r3, r2
 8000712:	607b      	str	r3, [r7, #4]
			if (diff == 0) { // KAZANDI
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d12d      	bne.n	8000776 <game_loop+0xd2>
				wonThisRound = true;
 800071a:	4b7a      	ldr	r3, [pc, #488]	@ (8000904 <game_loop+0x260>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
				if (difficulty == MISSION_IMPOSSIBLE) {
 8000720:	4b79      	ldr	r3, [pc, #484]	@ (8000908 <game_loop+0x264>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b08      	cmp	r3, #8
 8000726:	d115      	bne.n	8000754 <game_loop+0xb0>
					// Mission Impossible kazanıldı!
					play_won_animation(); // Yeni yeşil yanıp sönme animasyonu
 8000728:	f000 fa32 	bl	8000b90 <play_won_animation>
					// Ardından normal Cylon animasyonu (örneğin 2 kez)
					for (int i = 0; i < 2; i++) {
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
 8000730:	e004      	b.n	800073c <game_loop+0x98>
						play_cylon_animation();
 8000732:	f000 f9d3 	bl	8000adc <play_cylon_animation>
					for (int i = 0; i < 2; i++) {
 8000736:	69bb      	ldr	r3, [r7, #24]
 8000738:	3301      	adds	r3, #1
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]
 800073e:	2b01      	cmp	r3, #1
 8000740:	ddf7      	ble.n	8000732 <game_loop+0x8e>
					}
					difficulty = EASY; // Oyun başa döner (EASY seviyesine)
 8000742:	4b71      	ldr	r3, [pc, #452]	@ (8000908 <game_loop+0x264>)
 8000744:	2201      	movs	r2, #1
 8000746:	601a      	str	r2, [r3, #0]
					player_lives = 3;
 8000748:	4b70      	ldr	r3, [pc, #448]	@ (800090c <game_loop+0x268>)
 800074a:	2203      	movs	r2, #3
 800074c:	601a      	str	r2, [r3, #0]
					update_life_leds();
 800074e:	f000 fa6b 	bl	8000c28 <update_life_leds>
 8000752:	e00a      	b.n	800076a <game_loop+0xc6>
				} else {
					// Diğer seviyeler kazanıldı
					for (int i = 0; i < 2; i++) { // Normal Cylon animasyonu
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	e004      	b.n	8000764 <game_loop+0xc0>
						play_cylon_animation();
 800075a:	f000 f9bf 	bl	8000adc <play_cylon_animation>
					for (int i = 0; i < 2; i++) { // Normal Cylon animasyonu
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	2b01      	cmp	r3, #1
 8000768:	ddf7      	ble.n	800075a <game_loop+0xb6>
					}
				}
				increase_game_difficulty(); // Zorluk artırılır (veya MI sonrası sıfırlanır)
 800076a:	f000 f905 	bl	8000978 <increase_game_difficulty>
				wonThisRound = false;
 800076e:	4b65      	ldr	r3, [pc, #404]	@ (8000904 <game_loop+0x260>)
 8000770:	2200      	movs	r2, #0
 8000772:	701a      	strb	r2, [r3, #0]
 8000774:	e035      	b.n	80007e2 <game_loop+0x13e>
			} else { // KAYBETTİ
				player_lives--;
 8000776:	4b65      	ldr	r3, [pc, #404]	@ (800090c <game_loop+0x268>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1e5a      	subs	r2, r3, #1
 800077c:	4b63      	ldr	r3, [pc, #396]	@ (800090c <game_loop+0x268>)
 800077e:	601a      	str	r2, [r3, #0]
				update_life_leds();
 8000780:	f000 fa52 	bl	8000c28 <update_life_leds>
				if (player_lives > 0) {
 8000784:	4b61      	ldr	r3, [pc, #388]	@ (800090c <game_loop+0x268>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dd10      	ble.n	80007ae <game_loop+0x10a>
					HAL_Delay(1000);
 800078c:	23fa      	movs	r3, #250	@ 0xfa
 800078e:	009b      	lsls	r3, r3, #2
 8000790:	0018      	movs	r0, r3
 8000792:	f000 fe2f 	bl	80013f4 <HAL_Delay>
					// Normal kaybetme animasyonu (kısa flash)
					for (int i = 0; i < 2; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	e004      	b.n	80007a6 <game_loop+0x102>
						play_flash_animation();
 800079c:	f000 f90a 	bl	80009b4 <play_flash_animation>
					for (int i = 0; i < 2; i++) {
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	3301      	adds	r3, #1
 80007a4:	613b      	str	r3, [r7, #16]
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	ddf7      	ble.n	800079c <game_loop+0xf8>
 80007ac:	e019      	b.n	80007e2 <game_loop+0x13e>
					}
					// Mevcut seviyeden devam eder, zorluk değişmez.
					// `difficulty` değişkenine dokunmuyoruz.
				} else {
					// canı kalmadi restart_game
					HAL_Delay(1000);
 80007ae:	23fa      	movs	r3, #250	@ 0xfa
 80007b0:	009b      	lsls	r3, r3, #2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fe1e 	bl	80013f4 <HAL_Delay>
					// game over animasyonu daha uzun flash
					for (int i = 0; i < 4; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	e004      	b.n	80007c8 <game_loop+0x124>
						play_flash_animation();
 80007be:	f000 f8f9 	bl	80009b4 <play_flash_animation>
					for (int i = 0; i < 4; i++) {
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	3301      	adds	r3, #1
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
 80007ca:	2b03      	cmp	r3, #3
 80007cc:	ddf7      	ble.n	80007be <game_loop+0x11a>
					}
					// Game over sonrası ayarlar
					player_lives = 3;    // Canları yenile
 80007ce:	4b4f      	ldr	r3, [pc, #316]	@ (800090c <game_loop+0x268>)
 80007d0:	2203      	movs	r2, #3
 80007d2:	601a      	str	r2, [r3, #0]
					update_life_leds();
 80007d4:	f000 fa28 	bl	8000c28 <update_life_leds>
					difficulty = EASY;   // En baştaki bölüme (EASY) dön
 80007d8:	4b4b      	ldr	r3, [pc, #300]	@ (8000908 <game_loop+0x264>)
 80007da:	2201      	movs	r2, #1
 80007dc:	601a      	str	r2, [r3, #0]
					play_startup_animation();
 80007de:	f000 fa5f 	bl	8000ca0 <play_startup_animation>
				}

			}
			CycleEnded = false; // Bu kazanma/kaybetme durumu işlendi
 80007e2:	4b46      	ldr	r3, [pc, #280]	@ (80008fc <game_loop+0x258>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
			waiting_for_stable_release = false; // Yeniden başlatma için kararlı bırakma bayrağını sıfırla
 80007e8:	4b49      	ldr	r3, [pc, #292]	@ (8000910 <game_loop+0x26c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]
		}

		// CycleEnded false ise (animasyonlar bitti), butonun bırakılmasını bekle ve oyunu yeniden başlat
		GPIO_PinState current_button_state = HAL_GPIO_ReadPin(BUTTON_GPIO_Port,
 80007ee:	1cfc      	adds	r4, r7, #3
 80007f0:	2390      	movs	r3, #144	@ 0x90
 80007f2:	05db      	lsls	r3, r3, #23
 80007f4:	2101      	movs	r1, #1
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 fa44 	bl	8001c84 <HAL_GPIO_ReadPin>
 80007fc:	0003      	movs	r3, r0
 80007fe:	7023      	strb	r3, [r4, #0]
		BUTTON_Pin);

		if (current_button_state == GPIO_PIN_RESET) { // Buton şu an BIRAKILMIŞ (LOW) görünüyor
 8000800:	1cfb      	adds	r3, r7, #3
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d134      	bne.n	8000872 <game_loop+0x1ce>
			if (!waiting_for_stable_release) {
 8000808:	4b41      	ldr	r3, [pc, #260]	@ (8000910 <game_loop+0x26c>)
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	2201      	movs	r2, #1
 800080e:	4053      	eors	r3, r2
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	d008      	beq.n	8000828 <game_loop+0x184>
				// Butonu BIRAKILMIŞ olarak ilk kez görüyoruz (veya bir sıçrama sonrası tekrar BIRAKILMIŞ oldu)
				waiting_for_stable_release = true;
 8000816:	4b3e      	ldr	r3, [pc, #248]	@ (8000910 <game_loop+0x26c>)
 8000818:	2201      	movs	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
				button_seen_released_at_tick = HAL_GetTick(); // Zamanı kaydet
 800081c:	f000 fde0 	bl	80013e0 <HAL_GetTick>
 8000820:	0002      	movs	r2, r0
 8000822:	4b3c      	ldr	r3, [pc, #240]	@ (8000914 <game_loop+0x270>)
 8000824:	601a      	str	r2, [r3, #0]
 8000826:	e02b      	b.n	8000880 <game_loop+0x1dc>
			} else {
				// Zaten BIRAKILMIŞ olarak görmüştük, şimdi yeterince uzun süre öyle kalıp kalmadığını kontrol et
				if (HAL_GetTick()
 8000828:	f000 fdda 	bl	80013e0 <HAL_GetTick>
 800082c:	0002      	movs	r2, r0
						- button_seen_released_at_tick> STABLE_RELEASE_DURATION_MS) {
 800082e:	4b39      	ldr	r3, [pc, #228]	@ (8000914 <game_loop+0x270>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1ad3      	subs	r3, r2, r3
				if (HAL_GetTick()
 8000834:	2b32      	cmp	r3, #50	@ 0x32
 8000836:	d923      	bls.n	8000880 <game_loop+0x1dc>
					// Evet, buton STABLE_RELEASE_DURATION_MS süresince bırakılmış durumda kaldı. Oyunu yeniden başlat.
					Playing = true;       // Oyunu yeniden başlat
 8000838:	4b2f      	ldr	r3, [pc, #188]	@ (80008f8 <game_loop+0x254>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
					LEDaddress = 0;       // LED adresini sıfırla
 800083e:	4b30      	ldr	r3, [pc, #192]	@ (8000900 <game_loop+0x25c>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
					HAL_Delay(10);        // Kısa bir bekleme
 8000844:	200a      	movs	r0, #10
 8000846:	f000 fdd5 	bl	80013f4 <HAL_Delay>

					fill_strip_solid(0, 0, 0);
 800084a:	2200      	movs	r2, #0
 800084c:	2100      	movs	r1, #0
 800084e:	2000      	movs	r0, #0
 8000850:	f7ff fe98 	bl	8000584 <fill_strip_solid>
					set_led_color_in_strip(CENTER_LED, 255, 0, 0); // Merkezi kırmızı yap
 8000854:	2300      	movs	r3, #0
 8000856:	2200      	movs	r2, #0
 8000858:	21ff      	movs	r1, #255	@ 0xff
 800085a:	2015      	movs	r0, #21
 800085c:	f7ff fe5a 	bl	8000514 <set_led_color_in_strip>
					// set_led_color_in_strip(0, 0, 255, 0); // İlk LED'i yeşil yapmaya gerek yok, Playing=true döngüsü halledecek
					update_led_strip_to_physical_leds();
 8000860:	f7ff feb8 	bl	80005d4 <update_led_strip_to_physical_leds>
					HAL_Delay(10);
 8000864:	200a      	movs	r0, #10
 8000866:	f000 fdc5 	bl	80013f4 <HAL_Delay>

					waiting_for_stable_release = false; // Bir sonraki döngü için bayrağı sıfırla
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <game_loop+0x26c>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
 8000870:	e006      	b.n	8000880 <game_loop+0x1dc>
				}
			}
		} else { // Buton şu an BASILI (HIGH) görünüyor (ya hala basılı tutuluyor ya da sıçradı)
			// Eğer kararlı bir bırakılma bekliyorduk ama buton tekrar HIGH olduysa, bekleme durumunu sıfırla.
			if (waiting_for_stable_release) {
 8000872:	4b27      	ldr	r3, [pc, #156]	@ (8000910 <game_loop+0x26c>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d002      	beq.n	8000880 <game_loop+0x1dc>
				waiting_for_stable_release = false;
 800087a:	4b25      	ldr	r3, [pc, #148]	@ (8000910 <game_loop+0x26c>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
			}
		}
	} // if (!Playing) sonu

	if (Playing) { // Oyun oynanış mantığı (bu kısım değişmiyor)
 8000880:	4b1d      	ldr	r3, [pc, #116]	@ (80008f8 <game_loop+0x254>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d032      	beq.n	80008f0 <game_loop+0x24c>
		for (int i = 0; i < NUM_LEDS; i++) {
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
 800088e:	e008      	b.n	80008a2 <game_loop+0x1fe>
			set_led_color_in_strip(i, 0, 0, 0);
 8000890:	68b8      	ldr	r0, [r7, #8]
 8000892:	2300      	movs	r3, #0
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	f7ff fe3c 	bl	8000514 <set_led_color_in_strip>
		for (int i = 0; i < NUM_LEDS; i++) {
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	3301      	adds	r3, #1
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	2b27      	cmp	r3, #39	@ 0x27
 80008a6:	ddf3      	ble.n	8000890 <game_loop+0x1ec>
		}
		set_led_color_in_strip(CENTER_LED, 255, 0, 0);
 80008a8:	2300      	movs	r3, #0
 80008aa:	2200      	movs	r2, #0
 80008ac:	21ff      	movs	r1, #255	@ 0xff
 80008ae:	2015      	movs	r0, #21
 80008b0:	f7ff fe30 	bl	8000514 <set_led_color_in_strip>
		set_led_color_in_strip(LEDaddress, 0, 255, 0);
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <game_loop+0x25c>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	22ff      	movs	r2, #255	@ 0xff
 80008bc:	2100      	movs	r1, #0
 80008be:	f7ff fe29 	bl	8000514 <set_led_color_in_strip>
		update_led_strip_to_physical_leds();
 80008c2:	f7ff fe87 	bl	80005d4 <update_led_strip_to_physical_leds>

		LEDaddress++;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000900 <game_loop+0x25c>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <game_loop+0x25c>)
 80008ce:	601a      	str	r2, [r3, #0]
		if (LEDaddress == NUM_LEDS) {
 80008d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000900 <game_loop+0x25c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b28      	cmp	r3, #40	@ 0x28
 80008d6:	d102      	bne.n	80008de <game_loop+0x23a>
			LEDaddress = 0;
 80008d8:	4b09      	ldr	r3, [pc, #36]	@ (8000900 <game_loop+0x25c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
		}
		HAL_Delay(getTime(difficulty));
 80008de:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <game_loop+0x264>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 f818 	bl	8000918 <getTime>
 80008e8:	0003      	movs	r3, r0
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fd82 	bl	80013f4 <HAL_Delay>
	}
} // game_loop sonu
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b009      	add	sp, #36	@ 0x24
 80008f6:	bd90      	pop	{r4, r7, pc}
 80008f8:	20000000 	.word	0x20000000
 80008fc:	20000001 	.word	0x20000001
 8000900:	200008b0 	.word	0x200008b0
 8000904:	200008ac 	.word	0x200008ac
 8000908:	20000004 	.word	0x20000004
 800090c:	20000008 	.word	0x20000008
 8000910:	200008b8 	.word	0x200008b8
 8000914:	200008b4 	.word	0x200008b4

08000918 <getTime>:
// Zorluğa göre LED hareket gecikmesini döndürür
int getTime(int diff_level) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
    int timeValue = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
    switch (diff_level) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b08      	cmp	r3, #8
 8000928:	d81d      	bhi.n	8000966 <getTime+0x4e>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	009a      	lsls	r2, r3, #2
 800092e:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <getTime+0x5c>)
 8000930:	18d3      	adds	r3, r2, r3
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	469f      	mov	pc, r3
        case EASY: timeValue = 200; break;
 8000936:	23c8      	movs	r3, #200	@ 0xc8
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e016      	b.n	800096a <getTime+0x52>
        case MEDIUM: timeValue = 150; break;
 800093c:	2396      	movs	r3, #150	@ 0x96
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e013      	b.n	800096a <getTime+0x52>
        case HARD: timeValue = 100; break;
 8000942:	2364      	movs	r3, #100	@ 0x64
 8000944:	60fb      	str	r3, [r7, #12]
 8000946:	e010      	b.n	800096a <getTime+0x52>
        case ON_SPEED: timeValue = 80; break;
 8000948:	2350      	movs	r3, #80	@ 0x50
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	e00d      	b.n	800096a <getTime+0x52>
        case SONIC_SPEED: timeValue = 60; break;
 800094e:	233c      	movs	r3, #60	@ 0x3c
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	e00a      	b.n	800096a <getTime+0x52>
        case ROCKET_SPEED: timeValue = 50; break;
 8000954:	2332      	movs	r3, #50	@ 0x32
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	e007      	b.n	800096a <getTime+0x52>
        case LIGHT_SPEED: timeValue = 30; break;
 800095a:	231e      	movs	r3, #30
 800095c:	60fb      	str	r3, [r7, #12]
 800095e:	e004      	b.n	800096a <getTime+0x52>
        case MISSION_IMPOSSIBLE: timeValue = 20; break;
 8000960:	2314      	movs	r3, #20
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	e001      	b.n	800096a <getTime+0x52>
        default: timeValue = 100; // Hata durumunda varsayılan
 8000966:	2364      	movs	r3, #100	@ 0x64
 8000968:	60fb      	str	r3, [r7, #12]
    }
    return timeValue;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	0018      	movs	r0, r3
 800096e:	46bd      	mov	sp, r7
 8000970:	b004      	add	sp, #16
 8000972:	bd80      	pop	{r7, pc}
 8000974:	08003868 	.word	0x08003868

08000978 <increase_game_difficulty>:

// Kazanma durumunda zorluğu artırır
void increase_game_difficulty() {
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
	// Orijinal Arduino kodu: void increaseDifficulty() { if (difficulty != MISSION_IMPOSSIBLE && wonThisRound) { difficulty++; } }
	// Ve MISSION_IMPOSSIBLE kazanıldığında ana döngüde difficulty = 0; yapılıp sonra bu fonksiyon çağrılıyordu.
	// Bu mantık korunuyor:
	if (wonThisRound) { // Sadece kazanıldıysa zorluk değişir
 800097c:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <increase_game_difficulty+0x34>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d010      	beq.n	80009a6 <increase_game_difficulty+0x2e>
		if (difficulty == 0) { // Bu, MISSION_IMPOSSIBLE'dan sonraki sıfırlamadır
 8000984:	4b0a      	ldr	r3, [pc, #40]	@ (80009b0 <increase_game_difficulty+0x38>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d103      	bne.n	8000994 <increase_game_difficulty+0x1c>
			difficulty = 1; // EASY'ye geç
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <increase_game_difficulty+0x38>)
 800098e:	2201      	movs	r2, #1
 8000990:	601a      	str	r2, [r3, #0]
		}
		// Eğer difficulty zaten MISSION_IMPOSSIBLE ise ve kazanıldıysa,
		// game_loop içinde difficulty = 0 olarak ayarlandı. wonThisRound true olduğu için
		// bir sonraki adımda difficulty = 1 olacak.
	}
}
 8000992:	e008      	b.n	80009a6 <increase_game_difficulty+0x2e>
		} else if (difficulty < MISSION_IMPOSSIBLE) {
 8000994:	4b06      	ldr	r3, [pc, #24]	@ (80009b0 <increase_game_difficulty+0x38>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b07      	cmp	r3, #7
 800099a:	dc04      	bgt.n	80009a6 <increase_game_difficulty+0x2e>
			difficulty++;
 800099c:	4b04      	ldr	r3, [pc, #16]	@ (80009b0 <increase_game_difficulty+0x38>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1c5a      	adds	r2, r3, #1
 80009a2:	4b03      	ldr	r3, [pc, #12]	@ (80009b0 <increase_game_difficulty+0x38>)
 80009a4:	601a      	str	r2, [r3, #0]
}
 80009a6:	46c0      	nop			@ (mov r8, r8)
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200008ac 	.word	0x200008ac
 80009b0:	20000004 	.word	0x20000004

080009b4 <play_flash_animation>:

// Kaybetme durumunda LED animasyonu (iki kez kırmızı flaş)
void play_flash_animation() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint16_t flash_duration = 300; // Kırmızı ışığın yanık kalma süresi (ms)
 80009ba:	1dbb      	adds	r3, r7, #6
 80009bc:	2296      	movs	r2, #150	@ 0x96
 80009be:	0052      	lsls	r2, r2, #1
 80009c0:	801a      	strh	r2, [r3, #0]
	uint16_t off_duration = 300;   // LED'lerin sönük kalma süresi (ms)
 80009c2:	1d3b      	adds	r3, r7, #4
 80009c4:	2296      	movs	r2, #150	@ 0x96
 80009c6:	0052      	lsls	r2, r2, #1
 80009c8:	801a      	strh	r2, [r3, #0]

	// Birinci flaş
	fill_strip_solid(255, 0, 0); // Tüm LED'ler Kırmızı
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	20ff      	movs	r0, #255	@ 0xff
 80009d0:	f7ff fdd8 	bl	8000584 <fill_strip_solid>
	update_led_strip_to_physical_leds();
 80009d4:	f7ff fdfe 	bl	80005d4 <update_led_strip_to_physical_leds>
	HAL_Delay(flash_duration);
 80009d8:	1dbb      	adds	r3, r7, #6
 80009da:	881b      	ldrh	r3, [r3, #0]
 80009dc:	0018      	movs	r0, r3
 80009de:	f000 fd09 	bl	80013f4 <HAL_Delay>

	fill_strip_solid(0, 0, 0);   // Tüm LED'ler Siyah (Sönük)
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff fdcc 	bl	8000584 <fill_strip_solid>
	update_led_strip_to_physical_leds();
 80009ec:	f7ff fdf2 	bl	80005d4 <update_led_strip_to_physical_leds>
	HAL_Delay(off_duration);
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	881b      	ldrh	r3, [r3, #0]
 80009f4:	0018      	movs	r0, r3
 80009f6:	f000 fcfd 	bl	80013f4 <HAL_Delay>
//    // İkinci flaş
//    fill_strip_solid(255, 0, 0); // Tüm LED'ler Kırmızı
//    update_led_strip_to_physical_leds();
//    HAL_Delay(flash_duration);

	fill_strip_solid(0, 0, 0);   // Tüm LED'ler Siyah (Sönük)
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	2000      	movs	r0, #0
 8000a00:	f7ff fdc0 	bl	8000584 <fill_strip_solid>
	update_led_strip_to_physical_leds();
 8000a04:	f7ff fde6 	bl	80005d4 <update_led_strip_to_physical_leds>
	// Animasyon bittikten sonra LED'lerin sönük kalması için çok kısa bir bekleme,
	// bir sonraki LED güncellemesine kadar durumun korunmasına yardımcı olabilir.
	HAL_Delay(50);
 8000a08:	2032      	movs	r0, #50	@ 0x32
 8000a0a:	f000 fcf3 	bl	80013f4 <HAL_Delay>
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <rgb_color_wheel>:
	}
}

// Helper function to generate a color from a 0-255 position on a color wheel
// Pozisyon 0-255 arası bir değer alır ve bir gökkuşağı rengi döndürür.
void rgb_color_wheel(uint8_t wheel_pos, RGBColor *color) {
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	6039      	str	r1, [r7, #0]
 8000a20:	1dfb      	adds	r3, r7, #7
 8000a22:	701a      	strb	r2, [r3, #0]
	wheel_pos = 255 - wheel_pos; // Renk döngüsünün yönünü değiştirebilirsiniz (isteğe bağlı)
 8000a24:	1dfb      	adds	r3, r7, #7
 8000a26:	1dfa      	adds	r2, r7, #7
 8000a28:	7812      	ldrb	r2, [r2, #0]
 8000a2a:	43d2      	mvns	r2, r2
 8000a2c:	701a      	strb	r2, [r3, #0]
	if (wheel_pos < 85) {
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b54      	cmp	r3, #84	@ 0x54
 8000a34:	d815      	bhi.n	8000a62 <rgb_color_wheel+0x4c>
		color->r = 255 - wheel_pos * 3;
 8000a36:	1dfb      	adds	r3, r7, #7
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	1c1a      	adds	r2, r3, #0
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	3b01      	subs	r3, #1
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	701a      	strb	r2, [r3, #0]
		color->g = 0;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	705a      	strb	r2, [r3, #1]
		color->b = wheel_pos * 3;
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	1c1a      	adds	r2, r3, #0
 8000a56:	1892      	adds	r2, r2, r2
 8000a58:	18d3      	adds	r3, r2, r3
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	709a      	strb	r2, [r3, #2]
	// Not: Bu fonksiyonun ürettiği renkler tam parlaklıktadır (bir bileşen 255'e ulaşır).
	// Global parlaklık (global_brightness) daha sonra update_led_strip_to_physical_leds içinde uygulanacaktır.
	// Eğer bu animasyonun kendi parlaklığını ayrıca kısmak isterseniz,
	// burada üretilen r,g,b değerlerini bir miktar ölçekleyebilirsiniz.
	// Örn: color->r = color->r * anim_brightness_scale / 255; (anim_brightness_scale < 255)
}
 8000a60:	e038      	b.n	8000ad4 <rgb_color_wheel+0xbe>
	} else if (wheel_pos < 170) {
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2ba9      	cmp	r3, #169	@ 0xa9
 8000a68:	d81a      	bhi.n	8000aa0 <rgb_color_wheel+0x8a>
		wheel_pos -= 85;
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	1dfa      	adds	r2, r7, #7
 8000a6e:	7812      	ldrb	r2, [r2, #0]
 8000a70:	3a55      	subs	r2, #85	@ 0x55
 8000a72:	701a      	strb	r2, [r3, #0]
		color->r = 0;
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
		color->g = wheel_pos * 3;
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	1c1a      	adds	r2, r3, #0
 8000a80:	1892      	adds	r2, r2, r2
 8000a82:	18d3      	adds	r3, r2, r3
 8000a84:	b2da      	uxtb	r2, r3
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	705a      	strb	r2, [r3, #1]
		color->b = 255 - wheel_pos * 3;
 8000a8a:	1dfb      	adds	r3, r7, #7
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	1c1a      	adds	r2, r3, #0
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	3b01      	subs	r3, #1
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	709a      	strb	r2, [r3, #2]
}
 8000a9e:	e019      	b.n	8000ad4 <rgb_color_wheel+0xbe>
		wheel_pos -= 170;
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	1dfa      	adds	r2, r7, #7
 8000aa4:	7812      	ldrb	r2, [r2, #0]
 8000aa6:	3256      	adds	r2, #86	@ 0x56
 8000aa8:	701a      	strb	r2, [r3, #0]
		color->r = wheel_pos * 3;
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	1c1a      	adds	r2, r3, #0
 8000ab0:	1892      	adds	r2, r2, r2
 8000ab2:	18d3      	adds	r3, r2, r3
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
		color->g = 255 - wheel_pos * 3;
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	1c1a      	adds	r2, r3, #0
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	705a      	strb	r2, [r3, #1]
		color->b = 0;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	709a      	strb	r2, [r3, #2]
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd80      	pop	{r7, pc}

08000adc <play_cylon_animation>:
// Kazanma durumunda Cylon LED animasyonu
// Kazanma durumunda Cylon LED animasyonu (RGB Renk Tekerleği ile)
void play_cylon_animation() {
 8000adc:	b590      	push	{r4, r7, lr}
 8000ade:	b087      	sub	sp, #28
 8000ae0:	af00      	add	r7, sp, #0
	static uint8_t wheel_position = 0; // Renk tekerleğindeki mevcut pozisyon, çağrılar arasında devam eder.

	// Animasyon adımları arasındaki gecikme (ms).
	// Arduino'daki delay(10)'a karşılık gelir. Gerekirse artırılabilir.
	uint16_t step_delay = 10;
 8000ae2:	230e      	movs	r3, #14
 8000ae4:	18fb      	adds	r3, r7, r3
 8000ae6:	220a      	movs	r2, #10
 8000ae8:	801a      	strh	r2, [r3, #0]

	// İleri yönde
	for (int i = 0; i < NUM_LEDS; i++) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	e020      	b.n	8000b32 <play_cylon_animation+0x56>
		RGBColor current_color;
		// Her LED için renk tekerleğinden bir sonraki rengi al
		// wheel_position uint8_t olduğu için 255'ten sonra otomatik olarak 0'a döner.
		rgb_color_wheel(wheel_position++, &current_color);
 8000af0:	4b26      	ldr	r3, [pc, #152]	@ (8000b8c <play_cylon_animation+0xb0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	b2d1      	uxtb	r1, r2
 8000af8:	4a24      	ldr	r2, [pc, #144]	@ (8000b8c <play_cylon_animation+0xb0>)
 8000afa:	7011      	strb	r1, [r2, #0]
 8000afc:	2408      	movs	r4, #8
 8000afe:	193a      	adds	r2, r7, r4
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff87 	bl	8000a16 <rgb_color_wheel>

		set_led_color_in_strip(i, current_color.r, current_color.g,
 8000b08:	0020      	movs	r0, r4
 8000b0a:	183b      	adds	r3, r7, r0
 8000b0c:	7819      	ldrb	r1, [r3, #0]
 8000b0e:	183b      	adds	r3, r7, r0
 8000b10:	785a      	ldrb	r2, [r3, #1]
 8000b12:	183b      	adds	r3, r7, r0
 8000b14:	789b      	ldrb	r3, [r3, #2]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff fcfc 	bl	8000514 <set_led_color_in_strip>
				current_color.b);
		update_led_strip_to_physical_leds();
 8000b1c:	f7ff fd5a 	bl	80005d4 <update_led_strip_to_physical_leds>
		// BUNU YAPINCA LEDLERIN RENKLERI BOZULUYO
//        apply_fade_to_all_leds(); // Kuyruk efekti için (fade_amount'ı deneyerek ayarlayın)
		HAL_Delay(step_delay);
 8000b20:	230e      	movs	r3, #14
 8000b22:	18fb      	adds	r3, r7, r3
 8000b24:	881b      	ldrh	r3, [r3, #0]
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 fc64 	bl	80013f4 <HAL_Delay>
	for (int i = 0; i < NUM_LEDS; i++) {
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	2b27      	cmp	r3, #39	@ 0x27
 8000b36:	dddb      	ble.n	8000af0 <play_cylon_animation+0x14>
	}

	// Geri yönde
	for (int i = (NUM_LEDS) - 1; i >= 0; i--) {
 8000b38:	2327      	movs	r3, #39	@ 0x27
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	e01e      	b.n	8000b7c <play_cylon_animation+0xa0>
		RGBColor current_color;
		rgb_color_wheel(wheel_position++, &current_color);
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <play_cylon_animation+0xb0>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	b2d1      	uxtb	r1, r2
 8000b46:	4a11      	ldr	r2, [pc, #68]	@ (8000b8c <play_cylon_animation+0xb0>)
 8000b48:	7011      	strb	r1, [r2, #0]
 8000b4a:	1d3a      	adds	r2, r7, #4
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f7ff ff61 	bl	8000a16 <rgb_color_wheel>

		set_led_color_in_strip(i, current_color.r, current_color.g,
 8000b54:	1d3b      	adds	r3, r7, #4
 8000b56:	7819      	ldrb	r1, [r3, #0]
 8000b58:	1d3b      	adds	r3, r7, #4
 8000b5a:	785a      	ldrb	r2, [r3, #1]
 8000b5c:	1d3b      	adds	r3, r7, #4
 8000b5e:	789b      	ldrb	r3, [r3, #2]
 8000b60:	6938      	ldr	r0, [r7, #16]
 8000b62:	f7ff fcd7 	bl	8000514 <set_led_color_in_strip>
				current_color.b);
		update_led_strip_to_physical_leds();
 8000b66:	f7ff fd35 	bl	80005d4 <update_led_strip_to_physical_leds>
//        apply_fade_to_all_leds();
		HAL_Delay(step_delay);
 8000b6a:	230e      	movs	r3, #14
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	0018      	movs	r0, r3
 8000b72:	f000 fc3f 	bl	80013f4 <HAL_Delay>
	for (int i = (NUM_LEDS) - 1; i >= 0; i--) {
 8000b76:	693b      	ldr	r3, [r7, #16]
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	dadd      	bge.n	8000b3e <play_cylon_animation+0x62>
	}
}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b007      	add	sp, #28
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	20000934 	.word	0x20000934

08000b90 <play_won_animation>:

void play_won_animation() {
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0


	fill_strip_solid(0, 0, 0);   // Tüm LED'ler Siyah (Sönük)
 8000b96:	2200      	movs	r2, #0
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f7ff fcf2 	bl	8000584 <fill_strip_solid>
	update_led_strip_to_physical_leds();
 8000ba0:	f7ff fd18 	bl	80005d4 <update_led_strip_to_physical_leds>
	HAL_Delay(50);
 8000ba4:	2032      	movs	r0, #50	@ 0x32
 8000ba6:	f000 fc25 	bl	80013f4 <HAL_Delay>

	uint16_t blink_delay = 600; // Yanıp sönme hızı (ms)
 8000baa:	230a      	movs	r3, #10
 8000bac:	18fb      	adds	r3, r7, r3
 8000bae:	2296      	movs	r2, #150	@ 0x96
 8000bb0:	0092      	lsls	r2, r2, #2
 8000bb2:	801a      	strh	r2, [r3, #0]
	uint8_t green_r = 0;
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
	uint8_t green_g = 255;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	22ff      	movs	r2, #255	@ 0xff
 8000bc2:	701a      	strb	r2, [r3, #0]
	uint8_t green_b = 0;
 8000bc4:	1dfb      	adds	r3, r7, #7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < 2; i++) { // 3 kere yanıp sönsün
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	e021      	b.n	8000c14 <play_won_animation+0x84>
		// Tüm LED'leri Yeşil yap
		fill_strip_solid(green_r, green_g, green_b);
 8000bd0:	1dfb      	adds	r3, r7, #7
 8000bd2:	781a      	ldrb	r2, [r3, #0]
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	7819      	ldrb	r1, [r3, #0]
 8000bda:	2309      	movs	r3, #9
 8000bdc:	18fb      	adds	r3, r7, r3
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fccf 	bl	8000584 <fill_strip_solid>
		update_led_strip_to_physical_leds();
 8000be6:	f7ff fcf5 	bl	80005d4 <update_led_strip_to_physical_leds>
		HAL_Delay(blink_delay);
 8000bea:	240a      	movs	r4, #10
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f000 fbff 	bl	80013f4 <HAL_Delay>

		// Tüm LED'leri Söndür
		fill_strip_solid(0, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f7ff fcc2 	bl	8000584 <fill_strip_solid>
		update_led_strip_to_physical_leds();
 8000c00:	f7ff fce8 	bl	80005d4 <update_led_strip_to_physical_leds>
		HAL_Delay(blink_delay);
 8000c04:	193b      	adds	r3, r7, r4
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f000 fbf3 	bl	80013f4 <HAL_Delay>
	for (int i = 0; i < 2; i++) { // 3 kere yanıp sönsün
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	3301      	adds	r3, #1
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	ddda      	ble.n	8000bd0 <play_won_animation+0x40>
	}
	HAL_Delay(50);
 8000c1a:	2032      	movs	r0, #50	@ 0x32
 8000c1c:	f000 fbea 	bl	80013f4 <HAL_Delay>
}
 8000c20:	46c0      	nop			@ (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b005      	add	sp, #20
 8000c26:	bd90      	pop	{r4, r7, pc}

08000c28 <update_life_leds>:

void update_life_leds(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
	if (player_lives >= 1) {
 8000c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c98 <update_life_leds+0x70>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	dd06      	ble.n	8000c42 <update_life_leds+0x1a>
		HAL_GPIO_WritePin(LIFE_LED_3_PORT, LIFE_LED_3_PIN, GPIO_PIN_SET); // 1. can LED'i (örn: PB7) yanık
 8000c34:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <update_life_leds+0x74>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	2180      	movs	r1, #128	@ 0x80
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	f001 f83f 	bl	8001cbe <HAL_GPIO_WritePin>
 8000c40:	e005      	b.n	8000c4e <update_life_leds+0x26>
	} else {
		HAL_GPIO_WritePin(LIFE_LED_3_PORT, LIFE_LED_3_PIN, GPIO_PIN_RESET); // Sönük
 8000c42:	4b16      	ldr	r3, [pc, #88]	@ (8000c9c <update_life_leds+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	2180      	movs	r1, #128	@ 0x80
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f001 f838 	bl	8001cbe <HAL_GPIO_WritePin>
	}

	if (player_lives >= 2) {
 8000c4e:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <update_life_leds+0x70>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	dd06      	ble.n	8000c64 <update_life_leds+0x3c>
		HAL_GPIO_WritePin(LIFE_LED_2_PORT, LIFE_LED_2_PIN, GPIO_PIN_SET); // 2. can LED'i (örn: PB6) yanık
 8000c56:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <update_life_leds+0x74>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2102      	movs	r1, #2
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f001 f82e 	bl	8001cbe <HAL_GPIO_WritePin>
 8000c62:	e005      	b.n	8000c70 <update_life_leds+0x48>
	} else {
		HAL_GPIO_WritePin(LIFE_LED_2_PORT, LIFE_LED_2_PIN, GPIO_PIN_RESET); // Sönük
 8000c64:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <update_life_leds+0x74>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	2102      	movs	r1, #2
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f001 f827 	bl	8001cbe <HAL_GPIO_WritePin>
	}

	if (player_lives >= 3) {
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <update_life_leds+0x70>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	dd06      	ble.n	8000c86 <update_life_leds+0x5e>
		HAL_GPIO_WritePin(LIFE_LED_1_PORT, LIFE_LED_1_PIN, GPIO_PIN_SET); // 3. can LED'i (örn: PB1) yanık
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <update_life_leds+0x74>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	2101      	movs	r1, #1
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 f81d 	bl	8001cbe <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(LIFE_LED_1_PORT, LIFE_LED_1_PIN, GPIO_PIN_RESET); // Sönük
	}
}
 8000c84:	e005      	b.n	8000c92 <update_life_leds+0x6a>
		HAL_GPIO_WritePin(LIFE_LED_1_PORT, LIFE_LED_1_PIN, GPIO_PIN_RESET); // Sönük
 8000c86:	4b05      	ldr	r3, [pc, #20]	@ (8000c9c <update_life_leds+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 f816 	bl	8001cbe <HAL_GPIO_WritePin>
}
 8000c92:	46c0      	nop			@ (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	48000400 	.word	0x48000400

08000ca0 <play_startup_animation>:

void play_startup_animation() {
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b087      	sub	sp, #28
 8000ca4:	af00      	add	r7, sp, #0
    uint16_t chase_delay = 20; // Her bir LED'in yanma süresi (ms) - takip efekti için
 8000ca6:	230e      	movs	r3, #14
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	2214      	movs	r2, #20
 8000cac:	801a      	strh	r2, [r3, #0]
    uint16_t blink_total_delay = 250; // Toplu yanıp sönme hızı (ms)
 8000cae:	230c      	movs	r3, #12
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	22fa      	movs	r2, #250	@ 0xfa
 8000cb4:	801a      	strh	r2, [r3, #0]
    RGBColor chase_color = {25, 50, 150}; // Takip eden LED için mavi tonu
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	4a40      	ldr	r2, [pc, #256]	@ (8000dbc <play_startup_animation+0x11c>)
 8000cbc:	8811      	ldrh	r1, [r2, #0]
 8000cbe:	8019      	strh	r1, [r3, #0]
 8000cc0:	7892      	ldrb	r2, [r2, #2]
 8000cc2:	709a      	strb	r2, [r3, #2]
    RGBColor blink_color = {150, 150, 150}; // Yanıp sönme için beyaz/gri tonu
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8000dc0 <play_startup_animation+0x120>)
 8000cc8:	8811      	ldrh	r1, [r2, #0]
 8000cca:	8019      	strh	r1, [r3, #0]
 8000ccc:	7892      	ldrb	r2, [r2, #2]
 8000cce:	709a      	strb	r2, [r3, #2]

    // Önce tüm LED'leri temizle
    fill_strip_solid(0, 0, 0);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff fc55 	bl	8000584 <fill_strip_solid>
    update_led_strip_to_physical_leds();
 8000cda:	f7ff fc7b 	bl	80005d4 <update_led_strip_to_physical_leds>
    HAL_Delay(50); // Kısa bir bekleme
 8000cde:	2032      	movs	r0, #50	@ 0x32
 8000ce0:	f000 fb88 	bl	80013f4 <HAL_Delay>

    // 1. Tüm LED'leri birkaç kez (örneğin 3 kez) yakıp söndür
    for (int k = 0; k < 3; k++) {
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
 8000ce8:	e021      	b.n	8000d2e <play_startup_animation+0x8e>
        fill_strip_solid(blink_color.r, blink_color.g, blink_color.b);
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	7818      	ldrb	r0, [r3, #0]
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	7859      	ldrb	r1, [r3, #1]
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	f7ff fc44 	bl	8000584 <fill_strip_solid>
        update_led_strip_to_physical_leds();
 8000cfc:	f7ff fc6a 	bl	80005d4 <update_led_strip_to_physical_leds>
        HAL_Delay(blink_total_delay);
 8000d00:	240c      	movs	r4, #12
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	881b      	ldrh	r3, [r3, #0]
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fb74 	bl	80013f4 <HAL_Delay>

        fill_strip_solid(0, 0, 0); // Söndür
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff fc37 	bl	8000584 <fill_strip_solid>
        update_led_strip_to_physical_leds();
 8000d16:	f7ff fc5d 	bl	80005d4 <update_led_strip_to_physical_leds>
        HAL_Delay(blink_total_delay / 2); // Sönük kalma süresi daha kısa olabilir
 8000d1a:	193b      	adds	r3, r7, r4
 8000d1c:	881b      	ldrh	r3, [r3, #0]
 8000d1e:	085b      	lsrs	r3, r3, #1
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fb66 	bl	80013f4 <HAL_Delay>
    for (int k = 0; k < 3; k++) {
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	ddda      	ble.n	8000cea <play_startup_animation+0x4a>
    }

    // 2. LED'leri sırayla yak (chase efekti) - bir uçtan diğerine
    for (int i = 0; i < NUM_LEDS; i++) {
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	e01e      	b.n	8000d78 <play_startup_animation+0xd8>
        set_led_color_in_strip(i, chase_color.r, chase_color.g, chase_color.b);
 8000d3a:	2008      	movs	r0, #8
 8000d3c:	183b      	adds	r3, r7, r0
 8000d3e:	7819      	ldrb	r1, [r3, #0]
 8000d40:	183b      	adds	r3, r7, r0
 8000d42:	785a      	ldrb	r2, [r3, #1]
 8000d44:	183b      	adds	r3, r7, r0
 8000d46:	789b      	ldrb	r3, [r3, #2]
 8000d48:	6938      	ldr	r0, [r7, #16]
 8000d4a:	f7ff fbe3 	bl	8000514 <set_led_color_in_strip>
        update_led_strip_to_physical_leds();
 8000d4e:	f7ff fc41 	bl	80005d4 <update_led_strip_to_physical_leds>
        HAL_Delay(chase_delay);
 8000d52:	230e      	movs	r3, #14
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	881b      	ldrh	r3, [r3, #0]
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f000 fb4b 	bl	80013f4 <HAL_Delay>
        // İsteğe bağlı: Önceki LED'i söndürerek tek bir nokta gibi görünmesini sağla
        if (i > 0) {
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	dd06      	ble.n	8000d72 <play_startup_animation+0xd2>
             set_led_color_in_strip(i-1, 0,0,0);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	1e58      	subs	r0, r3, #1
 8000d68:	2300      	movs	r3, #0
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	f7ff fbd1 	bl	8000514 <set_led_color_in_strip>
    for (int i = 0; i < NUM_LEDS; i++) {
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	3301      	adds	r3, #1
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	2b27      	cmp	r3, #39	@ 0x27
 8000d7c:	dddd      	ble.n	8000d3a <play_startup_animation+0x9a>
        }
    }
    // Son LED'i de söndür
    set_led_color_in_strip(NUM_LEDS-1, 0,0,0);
 8000d7e:	2300      	movs	r3, #0
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	2027      	movs	r0, #39	@ 0x27
 8000d86:	f7ff fbc5 	bl	8000514 <set_led_color_in_strip>
    update_led_strip_to_physical_leds();
 8000d8a:	f7ff fc23 	bl	80005d4 <update_led_strip_to_physical_leds>
    HAL_Delay(blink_total_delay / 2); // Kısa bir bekleme
 8000d8e:	230c      	movs	r3, #12
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f000 fb2b 	bl	80013f4 <HAL_Delay>

    // Animasyon sonrası LED'leri bir sonraki durum için temizle
    fill_strip_solid(0, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fbee 	bl	8000584 <fill_strip_solid>
    update_led_strip_to_physical_leds();
 8000da8:	f7ff fc14 	bl	80005d4 <update_led_strip_to_physical_leds>
    HAL_Delay(50);
 8000dac:	2032      	movs	r0, #50	@ 0x32
 8000dae:	f000 fb21 	bl	80013f4 <HAL_Delay>
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b007      	add	sp, #28
 8000db8:	bd90      	pop	{r4, r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	08003860 	.word	0x08003860
 8000dc0:	08003864 	.word	0x08003864

08000dc4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	LEDaddress = 0; // Oyun başlamadan hemen önce kesin olarak 0'a ayarla
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <main+0x34>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000dce:	f000 faad 	bl	800132c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000dd2:	f000 f813 	bl	8000dfc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000dd6:	f000 f8f7 	bl	8000fc8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000dda:	f000 f8d7 	bl	8000f8c <MX_DMA_Init>
	MX_TIM3_Init();
 8000dde:	f000 f857 	bl	8000e90 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */

	game_setup();
 8000de2:	f7ff fc51 	bl	8000688 <game_setup>
	update_life_leds();
 8000de6:	f7ff ff1f 	bl	8000c28 <update_life_leds>
	HAL_Delay(10); // WS2812B reset/hazırlık süresi için
 8000dea:	200a      	movs	r0, #10
 8000dec:	f000 fb02 	bl	80013f4 <HAL_Delay>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		game_loop();
 8000df0:	f7ff fc58 	bl	80006a4 <game_loop>
 8000df4:	e7fc      	b.n	8000df0 <main+0x2c>
 8000df6:	46c0      	nop			@ (mov r8, r8)
 8000df8:	200008b0 	.word	0x200008b0

08000dfc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b091      	sub	sp, #68	@ 0x44
 8000e00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000e02:	2410      	movs	r4, #16
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	0018      	movs	r0, r3
 8000e08:	2330      	movs	r3, #48	@ 0x30
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f002 fcef 	bl	80037f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000e12:	003b      	movs	r3, r7
 8000e14:	0018      	movs	r0, r3
 8000e16:	2310      	movs	r3, #16
 8000e18:	001a      	movs	r2, r3
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	f002 fce8 	bl	80037f0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e20:	0021      	movs	r1, r4
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2202      	movs	r2, #2
 8000e26:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2210      	movs	r2, #16
 8000e32:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	2202      	movs	r2, #2
 8000e38:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e3a:	187b      	adds	r3, r7, r1
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	625a      	str	r2, [r3, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	22a0      	movs	r2, #160	@ 0xa0
 8000e44:	0392      	lsls	r2, r2, #14
 8000e46:	629a      	str	r2, [r3, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 ff6d 	bl	8001d30 <HAL_RCC_OscConfig>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0x62>
		Error_Handler();
 8000e5a:	f000 f951 	bl	8001100 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e5e:	003b      	movs	r3, r7
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e64:	003b      	movs	r3, r7
 8000e66:	2202      	movs	r2, #2
 8000e68:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6a:	003b      	movs	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e70:	003b      	movs	r3, r7
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000e76:	003b      	movs	r3, r7
 8000e78:	2101      	movs	r1, #1
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	f001 fa72 	bl	8002364 <HAL_RCC_ClockConfig>
 8000e80:	1e03      	subs	r3, r0, #0
 8000e82:	d001      	beq.n	8000e88 <SystemClock_Config+0x8c>
		Error_Handler();
 8000e84:	f000 f93c 	bl	8001100 <Error_Handler>
	}
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b011      	add	sp, #68	@ 0x44
 8000e8e:	bd90      	pop	{r4, r7, pc}

08000e90 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	@ 0x38
 8000e94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000e96:	2328      	movs	r3, #40	@ 0x28
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	2310      	movs	r3, #16
 8000e9e:	001a      	movs	r2, r3
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f002 fca5 	bl	80037f0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ea6:	2320      	movs	r3, #32
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	0018      	movs	r0, r3
 8000eac:	2308      	movs	r3, #8
 8000eae:	001a      	movs	r2, r3
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	f002 fc9d 	bl	80037f0 <memset>
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	0018      	movs	r0, r3
 8000eba:	231c      	movs	r3, #28
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	f002 fc96 	bl	80037f0 <memset>

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000ec4:	4b2f      	ldr	r3, [pc, #188]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000ec6:	4a30      	ldr	r2, [pc, #192]	@ (8000f88 <MX_TIM3_Init+0xf8>)
 8000ec8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 20 - 1;
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000ecc:	2213      	movs	r2, #19
 8000ece:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed0:	4b2c      	ldr	r3, [pc, #176]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 3 - 1;
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000ed8:	2202      	movs	r2, #2
 8000eda:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b29      	ldr	r3, [pc, #164]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b28      	ldr	r3, [pc, #160]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000ee8:	4b26      	ldr	r3, [pc, #152]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000eea:	0018      	movs	r0, r3
 8000eec:	f001 fb5e 	bl	80025ac <HAL_TIM_Base_Init>
 8000ef0:	1e03      	subs	r3, r0, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x68>
		Error_Handler();
 8000ef4:	f000 f904 	bl	8001100 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef8:	2128      	movs	r1, #40	@ 0x28
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	2280      	movs	r2, #128	@ 0x80
 8000efe:	0152      	lsls	r2, r2, #5
 8000f00:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000f02:	187a      	adds	r2, r7, r1
 8000f04:	4b1f      	ldr	r3, [pc, #124]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000f06:	0011      	movs	r1, r2
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f001 ff3f 	bl	8002d8c <HAL_TIM_ConfigClockSource>
 8000f0e:	1e03      	subs	r3, r0, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM3_Init+0x86>
		Error_Handler();
 8000f12:	f000 f8f5 	bl	8001100 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000f16:	4b1b      	ldr	r3, [pc, #108]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f001 fb97 	bl	800264c <HAL_TIM_PWM_Init>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x96>
		Error_Handler();
 8000f22:	f000 f8ed 	bl	8001100 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	2120      	movs	r1, #32
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f34:	187a      	adds	r2, r7, r1
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000f38:	0011      	movs	r1, r2
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f002 fc00 	bl	8003740 <HAL_TIMEx_MasterConfigSynchronization>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0xb8>
			!= HAL_OK) {
		Error_Handler();
 8000f44:	f000 f8dc 	bl	8001100 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	2260      	movs	r2, #96	@ 0x60
 8000f4c:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f54:	1d3b      	adds	r3, r7, #4
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000f60:	1d39      	adds	r1, r7, #4
 8000f62:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f001 fe4a 	bl	8002c00 <HAL_TIM_PWM_ConfigChannel>
 8000f6c:	1e03      	subs	r3, r0, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_TIM3_Init+0xe4>
			!= HAL_OK) {
		Error_Handler();
 8000f70:	f000 f8c6 	bl	8001100 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8000f74:	4b03      	ldr	r3, [pc, #12]	@ (8000f84 <MX_TIM3_Init+0xf4>)
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f93c 	bl	80011f4 <HAL_TIM_MspPostInit>

}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b00e      	add	sp, #56	@ 0x38
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000038 	.word	0x20000038
 8000f88:	40000400 	.word	0x40000400

08000f8c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_DMA_Init+0x38>)
 8000f94:	695a      	ldr	r2, [r3, #20]
 8000f96:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <MX_DMA_Init+0x38>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_DMA_Init+0x38>)
 8000fa0:	695b      	ldr	r3, [r3, #20]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	607b      	str	r3, [r7, #4]
 8000fa8:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel4_5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2100      	movs	r1, #0
 8000fae:	200b      	movs	r0, #11
 8000fb0:	f000 faf0 	bl	8001594 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000fb4:	200b      	movs	r0, #11
 8000fb6:	f000 fb02 	bl	80015be <HAL_NVIC_EnableIRQ>

}
 8000fba:	46c0      	nop			@ (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b002      	add	sp, #8
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	46c0      	nop			@ (mov r8, r8)
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fce:	240c      	movs	r4, #12
 8000fd0:	193b      	adds	r3, r7, r4
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	2314      	movs	r3, #20
 8000fd6:	001a      	movs	r2, r3
 8000fd8:	2100      	movs	r1, #0
 8000fda:	f002 fc09 	bl	80037f0 <memset>
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000fde:	4b30      	ldr	r3, [pc, #192]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8000fe0:	695a      	ldr	r2, [r3, #20]
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8000fe4:	2180      	movs	r1, #128	@ 0x80
 8000fe6:	03c9      	lsls	r1, r1, #15
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	4b2c      	ldr	r3, [pc, #176]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8000fee:	695a      	ldr	r2, [r3, #20]
 8000ff0:	2380      	movs	r3, #128	@ 0x80
 8000ff2:	03db      	lsls	r3, r3, #15
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60bb      	str	r3, [r7, #8]
 8000ff8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8000ffc:	695a      	ldr	r2, [r3, #20]
 8000ffe:	4b28      	ldr	r3, [pc, #160]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8001000:	2180      	movs	r1, #128	@ 0x80
 8001002:	0289      	lsls	r1, r1, #10
 8001004:	430a      	orrs	r2, r1
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 800100a:	695a      	ldr	r2, [r3, #20]
 800100c:	2380      	movs	r3, #128	@ 0x80
 800100e:	029b      	lsls	r3, r3, #10
 8001010:	4013      	ands	r3, r2
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b22      	ldr	r3, [pc, #136]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8001018:	695a      	ldr	r2, [r3, #20]
 800101a:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 800101c:	2180      	movs	r1, #128	@ 0x80
 800101e:	02c9      	lsls	r1, r1, #11
 8001020:	430a      	orrs	r2, r1
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	4b1e      	ldr	r3, [pc, #120]	@ (80010a0 <MX_GPIO_Init+0xd8>)
 8001026:	695a      	ldr	r2, [r3, #20]
 8001028:	2380      	movs	r3, #128	@ 0x80
 800102a:	02db      	lsls	r3, r3, #11
 800102c:	4013      	ands	r3, r2
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7,
 8001032:	4b1c      	ldr	r3, [pc, #112]	@ (80010a4 <MX_GPIO_Init+0xdc>)
 8001034:	2200      	movs	r2, #0
 8001036:	2183      	movs	r1, #131	@ 0x83
 8001038:	0018      	movs	r0, r3
 800103a:	f000 fe40 	bl	8001cbe <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800103e:	193b      	adds	r3, r7, r4
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001044:	193b      	adds	r3, r7, r4
 8001046:	2288      	movs	r2, #136	@ 0x88
 8001048:	0352      	lsls	r2, r2, #13
 800104a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800104c:	193b      	adds	r3, r7, r4
 800104e:	2202      	movs	r2, #2
 8001050:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	193a      	adds	r2, r7, r4
 8001054:	2390      	movs	r3, #144	@ 0x90
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	0011      	movs	r1, r2
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fcaa 	bl	80019b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7;
 8001060:	0021      	movs	r1, r4
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2283      	movs	r2, #131	@ 0x83
 8001066:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2201      	movs	r2, #1
 800106c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800107a:	187b      	adds	r3, r7, r1
 800107c:	4a09      	ldr	r2, [pc, #36]	@ (80010a4 <MX_GPIO_Init+0xdc>)
 800107e:	0019      	movs	r1, r3
 8001080:	0010      	movs	r0, r2
 8001082:	f000 fc97 	bl	80019b4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2005      	movs	r0, #5
 800108c:	f000 fa82 	bl	8001594 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8001090:	2005      	movs	r0, #5
 8001092:	f000 fa94 	bl	80015be <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b009      	add	sp, #36	@ 0x24
 800109c:	bd90      	pop	{r4, r7, pc}
 800109e:	46c0      	nop			@ (mov r8, r8)
 80010a0:	40021000 	.word	0x40021000
 80010a4:	48000400 	.word	0x48000400

080010a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	0002      	movs	r2, r0
 80010b0:	1dbb      	adds	r3, r7, #6
 80010b2:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == BUTTON_Pin) // Bizim butonumuz mu?
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	881b      	ldrh	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d117      	bne.n	80010ec <HAL_GPIO_EXTI_Callback+0x44>
	{
		uint32_t current_time = HAL_GetTick();
 80010bc:	f000 f990 	bl	80013e0 <HAL_GetTick>
 80010c0:	0003      	movs	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
		if (current_time - last_button_interrupt_time > DEBOUNCE_TIME_MS) // DEBOUNCE_TIME_MS (örn: 100ms)
 80010c4:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	68fa      	ldr	r2, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b64      	cmp	r3, #100	@ 0x64
 80010ce:	d90d      	bls.n	80010ec <HAL_GPIO_EXTI_Callback+0x44>
		{
			last_button_interrupt_time = current_time;
 80010d0:	4b08      	ldr	r3, [pc, #32]	@ (80010f4 <HAL_GPIO_EXTI_Callback+0x4c>)
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	601a      	str	r2, [r3, #0]

			if (Playing) // Eğer oyun zaten oynanıyorsa (LED'ler hareket ediyorsa)
 80010d6:	4b08      	ldr	r3, [pc, #32]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d005      	beq.n	80010ec <HAL_GPIO_EXTI_Callback+0x44>
			{
				Playing = false;    // Oyunu durdur
 80010e0:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <HAL_GPIO_EXTI_Callback+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	701a      	strb	r2, [r3, #0]
				CycleEnded = true;  // Sonucun işlenmesi için bayrağı ayarla
 80010e6:	4b05      	ldr	r3, [pc, #20]	@ (80010fc <HAL_GPIO_EXTI_Callback+0x54>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 80010ec:	46c0      	nop			@ (mov r8, r8)
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b004      	add	sp, #16
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200008a8 	.word	0x200008a8
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000001 	.word	0x20000001

08001100 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001104:	b672      	cpsid	i
}
 8001106:	46c0      	nop			@ (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	e7fd      	b.n	8001108 <Error_Handler+0x8>

0800110c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_MspInit+0x44>)
 8001114:	699a      	ldr	r2, [r3, #24]
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_MspInit+0x44>)
 8001118:	2101      	movs	r1, #1
 800111a:	430a      	orrs	r2, r1
 800111c:	619a      	str	r2, [r3, #24]
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <HAL_MspInit+0x44>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	2201      	movs	r2, #1
 8001124:	4013      	ands	r3, r2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b09      	ldr	r3, [pc, #36]	@ (8001150 <HAL_MspInit+0x44>)
 800112c:	69da      	ldr	r2, [r3, #28]
 800112e:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <HAL_MspInit+0x44>)
 8001130:	2180      	movs	r1, #128	@ 0x80
 8001132:	0549      	lsls	r1, r1, #21
 8001134:	430a      	orrs	r2, r1
 8001136:	61da      	str	r2, [r3, #28]
 8001138:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <HAL_MspInit+0x44>)
 800113a:	69da      	ldr	r2, [r3, #28]
 800113c:	2380      	movs	r3, #128	@ 0x80
 800113e:	055b      	lsls	r3, r3, #21
 8001140:	4013      	ands	r3, r2
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001146:	46c0      	nop			@ (mov r8, r8)
 8001148:	46bd      	mov	sp, r7
 800114a:	b002      	add	sp, #8
 800114c:	bd80      	pop	{r7, pc}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	40021000 	.word	0x40021000

08001154 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a20      	ldr	r2, [pc, #128]	@ (80011e4 <HAL_TIM_Base_MspInit+0x90>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d139      	bne.n	80011da <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001166:	4b20      	ldr	r3, [pc, #128]	@ (80011e8 <HAL_TIM_Base_MspInit+0x94>)
 8001168:	69da      	ldr	r2, [r3, #28]
 800116a:	4b1f      	ldr	r3, [pc, #124]	@ (80011e8 <HAL_TIM_Base_MspInit+0x94>)
 800116c:	2102      	movs	r1, #2
 800116e:	430a      	orrs	r2, r1
 8001170:	61da      	str	r2, [r3, #28]
 8001172:	4b1d      	ldr	r3, [pc, #116]	@ (80011e8 <HAL_TIM_Base_MspInit+0x94>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	2202      	movs	r2, #2
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_TIM_Base_MspInit+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001184:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 8001186:	2210      	movs	r2, #16
 8001188:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800118a:	4b18      	ldr	r3, [pc, #96]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 8001192:	2280      	movs	r2, #128	@ 0x80
 8001194:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 8001198:	2280      	movs	r2, #128	@ 0x80
 800119a:	0052      	lsls	r2, r2, #1
 800119c:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011a0:	2280      	movs	r2, #128	@ 0x80
 80011a2:	00d2      	lsls	r2, r2, #3
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80011ac:	4b0f      	ldr	r3, [pc, #60]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011b4:	0018      	movs	r0, r3
 80011b6:	f000 fa1f 	bl	80015f8 <HAL_DMA_Init>
 80011ba:	1e03      	subs	r3, r0, #0
 80011bc:	d001      	beq.n	80011c2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80011be:	f7ff ff9f 	bl	8001100 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a06      	ldr	r2, [pc, #24]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_TIM_Base_MspInit+0x98>)
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b004      	add	sp, #16
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	40000400 	.word	0x40000400
 80011e8:	40021000 	.word	0x40021000
 80011ec:	20000080 	.word	0x20000080
 80011f0:	40020044 	.word	0x40020044

080011f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011f4:	b590      	push	{r4, r7, lr}
 80011f6:	b089      	sub	sp, #36	@ 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	240c      	movs	r4, #12
 80011fe:	193b      	adds	r3, r7, r4
 8001200:	0018      	movs	r0, r3
 8001202:	2314      	movs	r3, #20
 8001204:	001a      	movs	r2, r3
 8001206:	2100      	movs	r1, #0
 8001208:	f002 faf2 	bl	80037f0 <memset>
  if(htim->Instance==TIM3)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a15      	ldr	r2, [pc, #84]	@ (8001268 <HAL_TIM_MspPostInit+0x74>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d124      	bne.n	8001260 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	4b15      	ldr	r3, [pc, #84]	@ (800126c <HAL_TIM_MspPostInit+0x78>)
 8001218:	695a      	ldr	r2, [r3, #20]
 800121a:	4b14      	ldr	r3, [pc, #80]	@ (800126c <HAL_TIM_MspPostInit+0x78>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	0289      	lsls	r1, r1, #10
 8001220:	430a      	orrs	r2, r1
 8001222:	615a      	str	r2, [r3, #20]
 8001224:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_TIM_MspPostInit+0x78>)
 8001226:	695a      	ldr	r2, [r3, #20]
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	029b      	lsls	r3, r3, #10
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001232:	0021      	movs	r1, r4
 8001234:	187b      	adds	r3, r7, r1
 8001236:	2240      	movs	r2, #64	@ 0x40
 8001238:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	187b      	adds	r3, r7, r1
 800123c:	2202      	movs	r2, #2
 800123e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	187b      	adds	r3, r7, r1
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001246:	187b      	adds	r3, r7, r1
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800124c:	187b      	adds	r3, r7, r1
 800124e:	2201      	movs	r2, #1
 8001250:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	187a      	adds	r2, r7, r1
 8001254:	2390      	movs	r3, #144	@ 0x90
 8001256:	05db      	lsls	r3, r3, #23
 8001258:	0011      	movs	r1, r2
 800125a:	0018      	movs	r0, r3
 800125c:	f000 fbaa 	bl	80019b4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001260:	46c0      	nop			@ (mov r8, r8)
 8001262:	46bd      	mov	sp, r7
 8001264:	b009      	add	sp, #36	@ 0x24
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	40000400 	.word	0x40000400
 800126c:	40021000 	.word	0x40021000

08001270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001274:	46c0      	nop			@ (mov r8, r8)
 8001276:	e7fd      	b.n	8001274 <NMI_Handler+0x4>

08001278 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800127c:	46c0      	nop			@ (mov r8, r8)
 800127e:	e7fd      	b.n	800127c <HardFault_Handler+0x4>

08001280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001284:	46c0      	nop			@ (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001298:	f000 f890 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800129c:	46c0      	nop			@ (mov r8, r8)
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 fd26 	bl	8001cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */


  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80012b8:	4b03      	ldr	r3, [pc, #12]	@ (80012c8 <DMA1_Channel4_5_IRQHandler+0x14>)
 80012ba:	0018      	movs	r0, r3
 80012bc:	f000 fa8f 	bl	80017de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80012c0:	46c0      	nop			@ (mov r8, r8)
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			@ (mov r8, r8)
 80012c8:	20000080 	.word	0x20000080

080012cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012d8:	480d      	ldr	r0, [pc, #52]	@ (8001310 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012da:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012dc:	f7ff fff6 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480c      	ldr	r0, [pc, #48]	@ (8001314 <LoopForever+0x6>)
  ldr r1, =_edata
 80012e2:	490d      	ldr	r1, [pc, #52]	@ (8001318 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e4:	4a0d      	ldr	r2, [pc, #52]	@ (800131c <LoopForever+0xe>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001324 <LoopForever+0x16>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001306:	f002 fa7b 	bl	8003800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130a:	f7ff fd5b 	bl	8000dc4 <main>

0800130e <LoopForever>:

LoopForever:
    b LoopForever
 800130e:	e7fe      	b.n	800130e <LoopForever>
  ldr   r0, =_estack
 8001310:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001318:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800131c:	080038c4 	.word	0x080038c4
  ldr r2, =_sbss
 8001320:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001324:	2000093c 	.word	0x2000093c

08001328 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001328:	e7fe      	b.n	8001328 <ADC1_IRQHandler>
	...

0800132c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001330:	4b07      	ldr	r3, [pc, #28]	@ (8001350 <HAL_Init+0x24>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_Init+0x24>)
 8001336:	2110      	movs	r1, #16
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800133c:	2003      	movs	r0, #3
 800133e:	f000 f809 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001342:	f7ff fee3 	bl	800110c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
}
 8001348:	0018      	movs	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			@ (mov r8, r8)
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b14      	ldr	r3, [pc, #80]	@ (80013b0 <HAL_InitTick+0x5c>)
 800135e:	681c      	ldr	r4, [r3, #0]
 8001360:	4b14      	ldr	r3, [pc, #80]	@ (80013b4 <HAL_InitTick+0x60>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	0019      	movs	r1, r3
 8001366:	23fa      	movs	r3, #250	@ 0xfa
 8001368:	0098      	lsls	r0, r3, #2
 800136a:	f7fe fecd 	bl	8000108 <__udivsi3>
 800136e:	0003      	movs	r3, r0
 8001370:	0019      	movs	r1, r3
 8001372:	0020      	movs	r0, r4
 8001374:	f7fe fec8 	bl	8000108 <__udivsi3>
 8001378:	0003      	movs	r3, r0
 800137a:	0018      	movs	r0, r3
 800137c:	f000 f92f 	bl	80015de <HAL_SYSTICK_Config>
 8001380:	1e03      	subs	r3, r0, #0
 8001382:	d001      	beq.n	8001388 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e00f      	b.n	80013a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b03      	cmp	r3, #3
 800138c:	d80b      	bhi.n	80013a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	2301      	movs	r3, #1
 8001392:	425b      	negs	r3, r3
 8001394:	2200      	movs	r2, #0
 8001396:	0018      	movs	r0, r3
 8001398:	f000 f8fc 	bl	8001594 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_InitTick+0x64>)
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b003      	add	sp, #12
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000010 	.word	0x20000010
 80013b4:	20000018 	.word	0x20000018
 80013b8:	20000014 	.word	0x20000014

080013bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_IncTick+0x1c>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	001a      	movs	r2, r3
 80013c6:	4b05      	ldr	r3, [pc, #20]	@ (80013dc <HAL_IncTick+0x20>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	18d2      	adds	r2, r2, r3
 80013cc:	4b03      	ldr	r3, [pc, #12]	@ (80013dc <HAL_IncTick+0x20>)
 80013ce:	601a      	str	r2, [r3, #0]
}
 80013d0:	46c0      	nop			@ (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	46c0      	nop			@ (mov r8, r8)
 80013d8:	20000018 	.word	0x20000018
 80013dc:	20000938 	.word	0x20000938

080013e0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b02      	ldr	r3, [pc, #8]	@ (80013f0 <HAL_GetTick+0x10>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	0018      	movs	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	46c0      	nop			@ (mov r8, r8)
 80013f0:	20000938 	.word	0x20000938

080013f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013fc:	f7ff fff0 	bl	80013e0 <HAL_GetTick>
 8001400:	0003      	movs	r3, r0
 8001402:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	3301      	adds	r3, #1
 800140c:	d005      	beq.n	800141a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800140e:	4b0a      	ldr	r3, [pc, #40]	@ (8001438 <HAL_Delay+0x44>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	001a      	movs	r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	189b      	adds	r3, r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	f7ff ffe0 	bl	80013e0 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	429a      	cmp	r2, r3
 800142a:	d8f7      	bhi.n	800141c <HAL_Delay+0x28>
  {
  }
}
 800142c:	46c0      	nop			@ (mov r8, r8)
 800142e:	46c0      	nop			@ (mov r8, r8)
 8001430:	46bd      	mov	sp, r7
 8001432:	b004      	add	sp, #16
 8001434:	bd80      	pop	{r7, pc}
 8001436:	46c0      	nop			@ (mov r8, r8)
 8001438:	20000018 	.word	0x20000018

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	0002      	movs	r2, r0
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b7f      	cmp	r3, #127	@ 0x7f
 800144e:	d809      	bhi.n	8001464 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001450:	1dfb      	adds	r3, r7, #7
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	001a      	movs	r2, r3
 8001456:	231f      	movs	r3, #31
 8001458:	401a      	ands	r2, r3
 800145a:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_EnableIRQ+0x30>)
 800145c:	2101      	movs	r1, #1
 800145e:	4091      	lsls	r1, r2
 8001460:	000a      	movs	r2, r1
 8001462:	601a      	str	r2, [r3, #0]
  }
}
 8001464:	46c0      	nop			@ (mov r8, r8)
 8001466:	46bd      	mov	sp, r7
 8001468:	b002      	add	sp, #8
 800146a:	bd80      	pop	{r7, pc}
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b7f      	cmp	r3, #127	@ 0x7f
 8001484:	d828      	bhi.n	80014d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001486:	4a2f      	ldr	r2, [pc, #188]	@ (8001544 <__NVIC_SetPriority+0xd4>)
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	b25b      	sxtb	r3, r3
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	33c0      	adds	r3, #192	@ 0xc0
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	589b      	ldr	r3, [r3, r2]
 8001496:	1dfa      	adds	r2, r7, #7
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	0011      	movs	r1, r2
 800149c:	2203      	movs	r2, #3
 800149e:	400a      	ands	r2, r1
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	21ff      	movs	r1, #255	@ 0xff
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	43d2      	mvns	r2, r2
 80014aa:	401a      	ands	r2, r3
 80014ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	22ff      	movs	r2, #255	@ 0xff
 80014b4:	401a      	ands	r2, r3
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	0018      	movs	r0, r3
 80014bc:	2303      	movs	r3, #3
 80014be:	4003      	ands	r3, r0
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	481f      	ldr	r0, [pc, #124]	@ (8001544 <__NVIC_SetPriority+0xd4>)
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	089b      	lsrs	r3, r3, #2
 80014ce:	430a      	orrs	r2, r1
 80014d0:	33c0      	adds	r3, #192	@ 0xc0
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014d6:	e031      	b.n	800153c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <__NVIC_SetPriority+0xd8>)
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	0019      	movs	r1, r3
 80014e0:	230f      	movs	r3, #15
 80014e2:	400b      	ands	r3, r1
 80014e4:	3b08      	subs	r3, #8
 80014e6:	089b      	lsrs	r3, r3, #2
 80014e8:	3306      	adds	r3, #6
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	18d3      	adds	r3, r2, r3
 80014ee:	3304      	adds	r3, #4
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1dfa      	adds	r2, r7, #7
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	0011      	movs	r1, r2
 80014f8:	2203      	movs	r2, #3
 80014fa:	400a      	ands	r2, r1
 80014fc:	00d2      	lsls	r2, r2, #3
 80014fe:	21ff      	movs	r1, #255	@ 0xff
 8001500:	4091      	lsls	r1, r2
 8001502:	000a      	movs	r2, r1
 8001504:	43d2      	mvns	r2, r2
 8001506:	401a      	ands	r2, r3
 8001508:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	019b      	lsls	r3, r3, #6
 800150e:	22ff      	movs	r2, #255	@ 0xff
 8001510:	401a      	ands	r2, r3
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	0018      	movs	r0, r3
 8001518:	2303      	movs	r3, #3
 800151a:	4003      	ands	r3, r0
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001520:	4809      	ldr	r0, [pc, #36]	@ (8001548 <__NVIC_SetPriority+0xd8>)
 8001522:	1dfb      	adds	r3, r7, #7
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	001c      	movs	r4, r3
 8001528:	230f      	movs	r3, #15
 800152a:	4023      	ands	r3, r4
 800152c:	3b08      	subs	r3, #8
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	430a      	orrs	r2, r1
 8001532:	3306      	adds	r3, #6
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	18c3      	adds	r3, r0, r3
 8001538:	3304      	adds	r3, #4
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	46c0      	nop			@ (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b003      	add	sp, #12
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	2380      	movs	r3, #128	@ 0x80
 800155a:	045b      	lsls	r3, r3, #17
 800155c:	429a      	cmp	r2, r3
 800155e:	d301      	bcc.n	8001564 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001560:	2301      	movs	r3, #1
 8001562:	e010      	b.n	8001586 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001564:	4b0a      	ldr	r3, [pc, #40]	@ (8001590 <SysTick_Config+0x44>)
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	3a01      	subs	r2, #1
 800156a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800156c:	2301      	movs	r3, #1
 800156e:	425b      	negs	r3, r3
 8001570:	2103      	movs	r1, #3
 8001572:	0018      	movs	r0, r3
 8001574:	f7ff ff7c 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001578:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <SysTick_Config+0x44>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157e:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <SysTick_Config+0x44>)
 8001580:	2207      	movs	r2, #7
 8001582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001584:	2300      	movs	r3, #0
}
 8001586:	0018      	movs	r0, r3
 8001588:	46bd      	mov	sp, r7
 800158a:	b002      	add	sp, #8
 800158c:	bd80      	pop	{r7, pc}
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	e000e010 	.word	0xe000e010

08001594 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	210f      	movs	r1, #15
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	1c02      	adds	r2, r0, #0
 80015a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	187b      	adds	r3, r7, r1
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	b25b      	sxtb	r3, r3
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff ff5d 	bl	8001470 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	46bd      	mov	sp, r7
 80015ba:	b004      	add	sp, #16
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	0002      	movs	r2, r0
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	0018      	movs	r0, r3
 80015d2:	f7ff ff33 	bl	800143c <__NVIC_EnableIRQ>
}
 80015d6:	46c0      	nop			@ (mov r8, r8)
 80015d8:	46bd      	mov	sp, r7
 80015da:	b002      	add	sp, #8
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ffaf 	bl	800154c <SysTick_Config>
 80015ee:	0003      	movs	r3, r0
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b002      	add	sp, #8
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e036      	b.n	800167c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2221      	movs	r2, #33	@ 0x21
 8001612:	2102      	movs	r1, #2
 8001614:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	4a18      	ldr	r2, [pc, #96]	@ (8001684 <HAL_DMA_Init+0x8c>)
 8001622:	4013      	ands	r3, r2
 8001624:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800162e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800163a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0018      	movs	r0, r3
 8001660:	f000 f98c 	bl	800197c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2221      	movs	r2, #33	@ 0x21
 800166e:	2101      	movs	r1, #1
 8001670:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b004      	add	sp, #16
 8001682:	bd80      	pop	{r7, pc}
 8001684:	ffffc00f 	.word	0xffffc00f

08001688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001696:	2317      	movs	r3, #23
 8001698:	18fb      	adds	r3, r7, r3
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2220      	movs	r2, #32
 80016a2:	5c9b      	ldrb	r3, [r3, r2]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d101      	bne.n	80016ac <HAL_DMA_Start_IT+0x24>
 80016a8:	2302      	movs	r3, #2
 80016aa:	e04f      	b.n	800174c <HAL_DMA_Start_IT+0xc4>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2220      	movs	r2, #32
 80016b0:	2101      	movs	r1, #1
 80016b2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2221      	movs	r2, #33	@ 0x21
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d13a      	bne.n	8001736 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2221      	movs	r2, #33	@ 0x21
 80016c4:	2102      	movs	r1, #2
 80016c6:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2101      	movs	r1, #1
 80016da:	438a      	bics	r2, r1
 80016dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	68b9      	ldr	r1, [r7, #8]
 80016e4:	68f8      	ldr	r0, [r7, #12]
 80016e6:	f000 f91c 	bl	8001922 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d008      	beq.n	8001704 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	210e      	movs	r1, #14
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	e00f      	b.n	8001724 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	210a      	movs	r1, #10
 8001710:	430a      	orrs	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2104      	movs	r1, #4
 8001720:	438a      	bics	r2, r1
 8001722:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2101      	movs	r1, #1
 8001730:	430a      	orrs	r2, r1
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	e007      	b.n	8001746 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800173e:	2317      	movs	r3, #23
 8001740:	18fb      	adds	r3, r7, r3
 8001742:	2202      	movs	r2, #2
 8001744:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001746:	2317      	movs	r3, #23
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	781b      	ldrb	r3, [r3, #0]
}
 800174c:	0018      	movs	r0, r3
 800174e:	46bd      	mov	sp, r7
 8001750:	b006      	add	sp, #24
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800175c:	210f      	movs	r1, #15
 800175e:	187b      	adds	r3, r7, r1
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2221      	movs	r2, #33	@ 0x21
 8001768:	5c9b      	ldrb	r3, [r3, r2]
 800176a:	b2db      	uxtb	r3, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d006      	beq.n	800177e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2204      	movs	r2, #4
 8001774:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8001776:	187b      	adds	r3, r7, r1
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e028      	b.n	80017d0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	210e      	movs	r1, #14
 800178a:	438a      	bics	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2101      	movs	r1, #1
 800179a:	438a      	bics	r2, r1
 800179c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a6:	2101      	movs	r1, #1
 80017a8:	4091      	lsls	r1, r2
 80017aa:	000a      	movs	r2, r1
 80017ac:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2221      	movs	r2, #33	@ 0x21
 80017b2:	2101      	movs	r1, #1
 80017b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2220      	movs	r2, #32
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d004      	beq.n	80017d0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	0010      	movs	r0, r2
 80017ce:	4798      	blx	r3
    }
  }
  return status;
 80017d0:	230f      	movs	r3, #15
 80017d2:	18fb      	adds	r3, r7, r3
 80017d4:	781b      	ldrb	r3, [r3, #0]
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b004      	add	sp, #16
 80017dc:	bd80      	pop	{r7, pc}

080017de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b084      	sub	sp, #16
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017fa:	2204      	movs	r2, #4
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	4013      	ands	r3, r2
 8001804:	d024      	beq.n	8001850 <HAL_DMA_IRQHandler+0x72>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d020      	beq.n	8001850 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2220      	movs	r2, #32
 8001816:	4013      	ands	r3, r2
 8001818:	d107      	bne.n	800182a <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2104      	movs	r1, #4
 8001826:	438a      	bics	r2, r1
 8001828:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001832:	2104      	movs	r1, #4
 8001834:	4091      	lsls	r1, r2
 8001836:	000a      	movs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800183e:	2b00      	cmp	r3, #0
 8001840:	d100      	bne.n	8001844 <HAL_DMA_IRQHandler+0x66>
 8001842:	e06a      	b.n	800191a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	0010      	movs	r0, r2
 800184c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800184e:	e064      	b.n	800191a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001854:	2202      	movs	r2, #2
 8001856:	409a      	lsls	r2, r3
 8001858:	0013      	movs	r3, r2
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	4013      	ands	r3, r2
 800185e:	d02b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0xda>
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2202      	movs	r2, #2
 8001864:	4013      	ands	r3, r2
 8001866:	d027      	beq.n	80018b8 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2220      	movs	r2, #32
 8001870:	4013      	ands	r3, r2
 8001872:	d10b      	bne.n	800188c <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	210a      	movs	r1, #10
 8001880:	438a      	bics	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2221      	movs	r2, #33	@ 0x21
 8001888:	2101      	movs	r1, #1
 800188a:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001894:	2102      	movs	r1, #2
 8001896:	4091      	lsls	r1, r2
 8001898:	000a      	movs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2220      	movs	r2, #32
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d036      	beq.n	800191a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	0010      	movs	r0, r2
 80018b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018b6:	e030      	b.n	800191a <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	2208      	movs	r2, #8
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	d028      	beq.n	800191a <HAL_DMA_IRQHandler+0x13c>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	2208      	movs	r2, #8
 80018cc:	4013      	ands	r3, r2
 80018ce:	d024      	beq.n	800191a <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	210e      	movs	r1, #14
 80018dc:	438a      	bics	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018e8:	2101      	movs	r1, #1
 80018ea:	4091      	lsls	r1, r2
 80018ec:	000a      	movs	r2, r1
 80018ee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2201      	movs	r2, #1
 80018f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2221      	movs	r2, #33	@ 0x21
 80018fa:	2101      	movs	r1, #1
 80018fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2220      	movs	r2, #32
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	0010      	movs	r0, r2
 8001916:	4798      	blx	r3
    }
  }
}
 8001918:	e7ff      	b.n	800191a <HAL_DMA_IRQHandler+0x13c>
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46bd      	mov	sp, r7
 800191e:	b004      	add	sp, #16
 8001920:	bd80      	pop	{r7, pc}

08001922 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001938:	2101      	movs	r1, #1
 800193a:	4091      	lsls	r1, r2
 800193c:	000a      	movs	r2, r1
 800193e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b10      	cmp	r3, #16
 800194e:	d108      	bne.n	8001962 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001960:	e007      	b.n	8001972 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68ba      	ldr	r2, [r7, #8]
 8001968:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	60da      	str	r2, [r3, #12]
}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	46bd      	mov	sp, r7
 8001976:	b004      	add	sp, #16
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a08      	ldr	r2, [pc, #32]	@ (80019ac <DMA_CalcBaseAndBitshift+0x30>)
 800198a:	4694      	mov	ip, r2
 800198c:	4463      	add	r3, ip
 800198e:	2114      	movs	r1, #20
 8001990:	0018      	movs	r0, r3
 8001992:	f7fe fbb9 	bl	8000108 <__udivsi3>
 8001996:	0003      	movs	r3, r0
 8001998:	009a      	lsls	r2, r3, #2
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a03      	ldr	r2, [pc, #12]	@ (80019b0 <DMA_CalcBaseAndBitshift+0x34>)
 80019a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80019a4:	46c0      	nop			@ (mov r8, r8)
 80019a6:	46bd      	mov	sp, r7
 80019a8:	b002      	add	sp, #8
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	bffdfff8 	.word	0xbffdfff8
 80019b0:	40020000 	.word	0x40020000

080019b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019be:	2300      	movs	r3, #0
 80019c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c2:	e149      	b.n	8001c58 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2101      	movs	r1, #1
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4091      	lsls	r1, r2
 80019ce:	000a      	movs	r2, r1
 80019d0:	4013      	ands	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d100      	bne.n	80019dc <HAL_GPIO_Init+0x28>
 80019da:	e13a      	b.n	8001c52 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	2203      	movs	r2, #3
 80019e2:	4013      	ands	r3, r2
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d005      	beq.n	80019f4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d130      	bne.n	8001a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	2203      	movs	r2, #3
 8001a00:	409a      	lsls	r2, r3
 8001a02:	0013      	movs	r3, r2
 8001a04:	43da      	mvns	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	68da      	ldr	r2, [r3, #12]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	409a      	lsls	r2, r3
 8001a16:	0013      	movs	r3, r2
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	409a      	lsls	r2, r3
 8001a30:	0013      	movs	r3, r2
 8001a32:	43da      	mvns	r2, r3
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	091b      	lsrs	r3, r3, #4
 8001a40:	2201      	movs	r2, #1
 8001a42:	401a      	ands	r2, r3
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	409a      	lsls	r2, r3
 8001a48:	0013      	movs	r3, r2
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b03      	cmp	r3, #3
 8001a60:	d017      	beq.n	8001a92 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	0013      	movs	r3, r2
 8001a72:	43da      	mvns	r2, r3
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	409a      	lsls	r2, r3
 8001a84:	0013      	movs	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	2203      	movs	r2, #3
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d123      	bne.n	8001ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	08da      	lsrs	r2, r3, #3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3208      	adds	r2, #8
 8001aa6:	0092      	lsls	r2, r2, #2
 8001aa8:	58d3      	ldr	r3, [r2, r3]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	43da      	mvns	r2, r3
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	691a      	ldr	r2, [r3, #16]
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2107      	movs	r1, #7
 8001aca:	400b      	ands	r3, r1
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	0013      	movs	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	08da      	lsrs	r2, r3, #3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3208      	adds	r2, #8
 8001ae0:	0092      	lsls	r2, r2, #2
 8001ae2:	6939      	ldr	r1, [r7, #16]
 8001ae4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	2203      	movs	r2, #3
 8001af2:	409a      	lsls	r2, r3
 8001af4:	0013      	movs	r3, r2
 8001af6:	43da      	mvns	r2, r3
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2203      	movs	r2, #3
 8001b04:	401a      	ands	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	0013      	movs	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	23c0      	movs	r3, #192	@ 0xc0
 8001b20:	029b      	lsls	r3, r3, #10
 8001b22:	4013      	ands	r3, r2
 8001b24:	d100      	bne.n	8001b28 <HAL_GPIO_Init+0x174>
 8001b26:	e094      	b.n	8001c52 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b51      	ldr	r3, [pc, #324]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b2a:	699a      	ldr	r2, [r3, #24]
 8001b2c:	4b50      	ldr	r3, [pc, #320]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	619a      	str	r2, [r3, #24]
 8001b34:	4b4e      	ldr	r3, [pc, #312]	@ (8001c70 <HAL_GPIO_Init+0x2bc>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b40:	4a4c      	ldr	r2, [pc, #304]	@ (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	089b      	lsrs	r3, r3, #2
 8001b46:	3302      	adds	r3, #2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	589b      	ldr	r3, [r3, r2]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	2203      	movs	r2, #3
 8001b52:	4013      	ands	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	409a      	lsls	r2, r3
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	43da      	mvns	r2, r3
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	4013      	ands	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	2390      	movs	r3, #144	@ 0x90
 8001b68:	05db      	lsls	r3, r3, #23
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1d6>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a41      	ldr	r2, [pc, #260]	@ (8001c78 <HAL_GPIO_Init+0x2c4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1d2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a40      	ldr	r2, [pc, #256]	@ (8001c7c <HAL_GPIO_Init+0x2c8>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1ce>
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e004      	b.n	8001b8c <HAL_GPIO_Init+0x1d8>
 8001b82:	2305      	movs	r3, #5
 8001b84:	e002      	b.n	8001b8c <HAL_GPIO_Init+0x1d8>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_GPIO_Init+0x1d8>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	2103      	movs	r1, #3
 8001b90:	400a      	ands	r2, r1
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	4093      	lsls	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b9c:	4935      	ldr	r1, [pc, #212]	@ (8001c74 <HAL_GPIO_Init+0x2c0>)
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001baa:	4b35      	ldr	r3, [pc, #212]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	035b      	lsls	r3, r3, #13
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bce:	4b2c      	ldr	r3, [pc, #176]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	43da      	mvns	r2, r3
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	039b      	lsls	r3, r3, #14
 8001bec:	4013      	ands	r3, r2
 8001bee:	d003      	beq.n	8001bf8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bf8:	4b21      	ldr	r3, [pc, #132]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001bfe:	4b20      	ldr	r3, [pc, #128]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	43da      	mvns	r2, r3
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	029b      	lsls	r3, r3, #10
 8001c16:	4013      	ands	r3, r2
 8001c18:	d003      	beq.n	8001c22 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001c22:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001c28:	4b15      	ldr	r3, [pc, #84]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	43da      	mvns	r2, r3
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	2380      	movs	r3, #128	@ 0x80
 8001c3e:	025b      	lsls	r3, r3, #9
 8001c40:	4013      	ands	r3, r2
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c80 <HAL_GPIO_Init+0x2cc>)
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	40da      	lsrs	r2, r3
 8001c60:	1e13      	subs	r3, r2, #0
 8001c62:	d000      	beq.n	8001c66 <HAL_GPIO_Init+0x2b2>
 8001c64:	e6ae      	b.n	80019c4 <HAL_GPIO_Init+0x10>
  } 
}
 8001c66:	46c0      	nop			@ (mov r8, r8)
 8001c68:	46c0      	nop			@ (mov r8, r8)
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	b006      	add	sp, #24
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010000 	.word	0x40010000
 8001c78:	48000400 	.word	0x48000400
 8001c7c:	48000800 	.word	0x48000800
 8001c80:	40010400 	.word	0x40010400

08001c84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	000a      	movs	r2, r1
 8001c8e:	1cbb      	adds	r3, r7, #2
 8001c90:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	1cba      	adds	r2, r7, #2
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d004      	beq.n	8001ca8 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001c9e:	230f      	movs	r3, #15
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e003      	b.n	8001cb0 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ca8:	230f      	movs	r3, #15
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001cb0:	230f      	movs	r3, #15
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	781b      	ldrb	r3, [r3, #0]
  }
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	b004      	add	sp, #16
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	0008      	movs	r0, r1
 8001cc8:	0011      	movs	r1, r2
 8001cca:	1cbb      	adds	r3, r7, #2
 8001ccc:	1c02      	adds	r2, r0, #0
 8001cce:	801a      	strh	r2, [r3, #0]
 8001cd0:	1c7b      	adds	r3, r7, #1
 8001cd2:	1c0a      	adds	r2, r1, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd6:	1c7b      	adds	r3, r7, #1
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d004      	beq.n	8001ce8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cde:	1cbb      	adds	r3, r7, #2
 8001ce0:	881a      	ldrh	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce6:	e003      	b.n	8001cf0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce8:	1cbb      	adds	r3, r7, #2
 8001cea:	881a      	ldrh	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cf0:	46c0      	nop			@ (mov r8, r8)
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	0002      	movs	r2, r0
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d06:	695b      	ldr	r3, [r3, #20]
 8001d08:	1dba      	adds	r2, r7, #6
 8001d0a:	8812      	ldrh	r2, [r2, #0]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d008      	beq.n	8001d22 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001d12:	1dba      	adds	r2, r7, #6
 8001d14:	8812      	ldrh	r2, [r2, #0]
 8001d16:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d18:	1dbb      	adds	r3, r7, #6
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff f9c3 	bl	80010a8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d22:	46c0      	nop			@ (mov r8, r8)
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			@ (mov r8, r8)
 8001d2c:	40010400 	.word	0x40010400

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b088      	sub	sp, #32
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e301      	b.n	8002346 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2201      	movs	r2, #1
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d100      	bne.n	8001d4e <HAL_RCC_OscConfig+0x1e>
 8001d4c:	e08d      	b.n	8001e6a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d4e:	4bc3      	ldr	r3, [pc, #780]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	220c      	movs	r2, #12
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d00e      	beq.n	8001d78 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5a:	4bc0      	ldr	r3, [pc, #768]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x64>
 8001d66:	4bbd      	ldr	r3, [pc, #756]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	2380      	movs	r3, #128	@ 0x80
 8001d6c:	025b      	lsls	r3, r3, #9
 8001d6e:	401a      	ands	r2, r3
 8001d70:	2380      	movs	r3, #128	@ 0x80
 8001d72:	025b      	lsls	r3, r3, #9
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d10d      	bne.n	8001d94 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d78:	4bb8      	ldr	r3, [pc, #736]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	029b      	lsls	r3, r3, #10
 8001d80:	4013      	ands	r3, r2
 8001d82:	d100      	bne.n	8001d86 <HAL_RCC_OscConfig+0x56>
 8001d84:	e070      	b.n	8001e68 <HAL_RCC_OscConfig+0x138>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d000      	beq.n	8001d90 <HAL_RCC_OscConfig+0x60>
 8001d8e:	e06b      	b.n	8001e68 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e2d8      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_OscConfig+0x7c>
 8001d9c:	4baf      	ldr	r3, [pc, #700]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4bae      	ldr	r3, [pc, #696]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001da2:	2180      	movs	r1, #128	@ 0x80
 8001da4:	0249      	lsls	r1, r1, #9
 8001da6:	430a      	orrs	r2, r1
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e02f      	b.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x9e>
 8001db4:	4ba9      	ldr	r3, [pc, #676]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4ba8      	ldr	r3, [pc, #672]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dba:	49a9      	ldr	r1, [pc, #676]	@ (8002060 <HAL_RCC_OscConfig+0x330>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4ba6      	ldr	r3, [pc, #664]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4ba5      	ldr	r3, [pc, #660]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dc6:	49a7      	ldr	r1, [pc, #668]	@ (8002064 <HAL_RCC_OscConfig+0x334>)
 8001dc8:	400a      	ands	r2, r1
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	e01e      	b.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b05      	cmp	r3, #5
 8001dd4:	d10e      	bne.n	8001df4 <HAL_RCC_OscConfig+0xc4>
 8001dd6:	4ba1      	ldr	r3, [pc, #644]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	4ba0      	ldr	r3, [pc, #640]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ddc:	2180      	movs	r1, #128	@ 0x80
 8001dde:	02c9      	lsls	r1, r1, #11
 8001de0:	430a      	orrs	r2, r1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	4b9d      	ldr	r3, [pc, #628]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b9c      	ldr	r3, [pc, #624]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dea:	2180      	movs	r1, #128	@ 0x80
 8001dec:	0249      	lsls	r1, r1, #9
 8001dee:	430a      	orrs	r2, r1
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xdc>
 8001df4:	4b99      	ldr	r3, [pc, #612]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b98      	ldr	r3, [pc, #608]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	4999      	ldr	r1, [pc, #612]	@ (8002060 <HAL_RCC_OscConfig+0x330>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	4b96      	ldr	r3, [pc, #600]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b95      	ldr	r3, [pc, #596]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e06:	4997      	ldr	r1, [pc, #604]	@ (8002064 <HAL_RCC_OscConfig+0x334>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d014      	beq.n	8001e3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7ff fae4 	bl	80013e0 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e1e:	f7ff fadf 	bl	80013e0 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b64      	cmp	r3, #100	@ 0x64
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e28a      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e30:	4b8a      	ldr	r3, [pc, #552]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0xee>
 8001e3c:	e015      	b.n	8001e6a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff facf 	bl	80013e0 <HAL_GetTick>
 8001e42:	0003      	movs	r3, r0
 8001e44:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e48:	f7ff faca 	bl	80013e0 <HAL_GetTick>
 8001e4c:	0002      	movs	r2, r0
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b64      	cmp	r3, #100	@ 0x64
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e275      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5a:	4b80      	ldr	r3, [pc, #512]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	029b      	lsls	r3, r3, #10
 8001e62:	4013      	ands	r3, r2
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x118>
 8001e66:	e000      	b.n	8001e6a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e68:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d100      	bne.n	8001e76 <HAL_RCC_OscConfig+0x146>
 8001e74:	e069      	b.n	8001f4a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e76:	4b79      	ldr	r3, [pc, #484]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	220c      	movs	r2, #12
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d00b      	beq.n	8001e98 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e80:	4b76      	ldr	r3, [pc, #472]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	220c      	movs	r2, #12
 8001e86:	4013      	ands	r3, r2
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d11c      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x196>
 8001e8c:	4b73      	ldr	r3, [pc, #460]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	2380      	movs	r3, #128	@ 0x80
 8001e92:	025b      	lsls	r3, r3, #9
 8001e94:	4013      	ands	r3, r2
 8001e96:	d116      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e98:	4b70      	ldr	r3, [pc, #448]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x17e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e24b      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b6b      	ldr	r3, [pc, #428]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	22f8      	movs	r2, #248	@ 0xf8
 8001eb4:	4393      	bics	r3, r2
 8001eb6:	0019      	movs	r1, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	00da      	lsls	r2, r3, #3
 8001ebe:	4b67      	ldr	r3, [pc, #412]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec4:	e041      	b.n	8001f4a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d024      	beq.n	8001f18 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ece:	4b63      	ldr	r3, [pc, #396]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	4b62      	ldr	r3, [pc, #392]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fa81 	bl	80013e0 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ee4:	f7ff fa7c 	bl	80013e0 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e227      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ef6:	4b59      	ldr	r3, [pc, #356]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f1      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f00:	4b56      	ldr	r3, [pc, #344]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	22f8      	movs	r2, #248	@ 0xf8
 8001f06:	4393      	bics	r3, r2
 8001f08:	0019      	movs	r1, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	00da      	lsls	r2, r3, #3
 8001f10:	4b52      	ldr	r3, [pc, #328]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e018      	b.n	8001f4a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f18:	4b50      	ldr	r3, [pc, #320]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b4f      	ldr	r3, [pc, #316]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	2101      	movs	r1, #1
 8001f20:	438a      	bics	r2, r1
 8001f22:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f24:	f7ff fa5c 	bl	80013e0 <HAL_GetTick>
 8001f28:	0003      	movs	r3, r0
 8001f2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2c:	e008      	b.n	8001f40 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f2e:	f7ff fa57 	bl	80013e0 <HAL_GetTick>
 8001f32:	0002      	movs	r2, r0
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e202      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f40:	4b46      	ldr	r3, [pc, #280]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2202      	movs	r2, #2
 8001f46:	4013      	ands	r3, r2
 8001f48:	d1f1      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2208      	movs	r2, #8
 8001f50:	4013      	ands	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d019      	beq.n	8001f90 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b3f      	ldr	r3, [pc, #252]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f60:	4b3e      	ldr	r3, [pc, #248]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	430a      	orrs	r2, r1
 8001f66:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fa3a 	bl	80013e0 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff fa35 	bl	80013e0 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e1e0      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f84:	4b35      	ldr	r3, [pc, #212]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f88:	2202      	movs	r2, #2
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d0f1      	beq.n	8001f72 <HAL_RCC_OscConfig+0x242>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b32      	ldr	r3, [pc, #200]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f94:	4b31      	ldr	r3, [pc, #196]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001f96:	2101      	movs	r1, #1
 8001f98:	438a      	bics	r2, r1
 8001f9a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fa20 	bl	80013e0 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fa6:	f7ff fa1b 	bl	80013e0 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1c6      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb8:	4b28      	ldr	r3, [pc, #160]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f1      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d100      	bne.n	8001fce <HAL_RCC_OscConfig+0x29e>
 8001fcc:	e0b4      	b.n	8002138 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fce:	201f      	movs	r0, #31
 8001fd0:	183b      	adds	r3, r7, r0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd6:	4b21      	ldr	r3, [pc, #132]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fd8:	69da      	ldr	r2, [r3, #28]
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	055b      	lsls	r3, r3, #21
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d110      	bne.n	8002004 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fe4:	69da      	ldr	r2, [r3, #28]
 8001fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001fe8:	2180      	movs	r1, #128	@ 0x80
 8001fea:	0549      	lsls	r1, r1, #21
 8001fec:	430a      	orrs	r2, r1
 8001fee:	61da      	str	r2, [r3, #28]
 8001ff0:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8001ff2:	69da      	ldr	r2, [r3, #28]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	055b      	lsls	r3, r3, #21
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ffe:	183b      	adds	r3, r7, r0
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002004:	4b18      	ldr	r3, [pc, #96]	@ (8002068 <HAL_RCC_OscConfig+0x338>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4013      	ands	r3, r2
 800200e:	d11a      	bne.n	8002046 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_RCC_OscConfig+0x338>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <HAL_RCC_OscConfig+0x338>)
 8002016:	2180      	movs	r1, #128	@ 0x80
 8002018:	0049      	lsls	r1, r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201e:	f7ff f9df 	bl	80013e0 <HAL_GetTick>
 8002022:	0003      	movs	r3, r0
 8002024:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7ff f9da 	bl	80013e0 <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b64      	cmp	r3, #100	@ 0x64
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e185      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <HAL_RCC_OscConfig+0x338>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	@ 0x80
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4013      	ands	r3, r2
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d10e      	bne.n	800206c <HAL_RCC_OscConfig+0x33c>
 800204e:	4b03      	ldr	r3, [pc, #12]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	4b02      	ldr	r3, [pc, #8]	@ (800205c <HAL_RCC_OscConfig+0x32c>)
 8002054:	2101      	movs	r1, #1
 8002056:	430a      	orrs	r2, r1
 8002058:	621a      	str	r2, [r3, #32]
 800205a:	e035      	b.n	80020c8 <HAL_RCC_OscConfig+0x398>
 800205c:	40021000 	.word	0x40021000
 8002060:	fffeffff 	.word	0xfffeffff
 8002064:	fffbffff 	.word	0xfffbffff
 8002068:	40007000 	.word	0x40007000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x35e>
 8002074:	4bb6      	ldr	r3, [pc, #728]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002076:	6a1a      	ldr	r2, [r3, #32]
 8002078:	4bb5      	ldr	r3, [pc, #724]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	621a      	str	r2, [r3, #32]
 8002080:	4bb3      	ldr	r3, [pc, #716]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	4bb2      	ldr	r3, [pc, #712]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002086:	2104      	movs	r1, #4
 8002088:	438a      	bics	r2, r1
 800208a:	621a      	str	r2, [r3, #32]
 800208c:	e01c      	b.n	80020c8 <HAL_RCC_OscConfig+0x398>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2b05      	cmp	r3, #5
 8002094:	d10c      	bne.n	80020b0 <HAL_RCC_OscConfig+0x380>
 8002096:	4bae      	ldr	r3, [pc, #696]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002098:	6a1a      	ldr	r2, [r3, #32]
 800209a:	4bad      	ldr	r3, [pc, #692]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800209c:	2104      	movs	r1, #4
 800209e:	430a      	orrs	r2, r1
 80020a0:	621a      	str	r2, [r3, #32]
 80020a2:	4bab      	ldr	r3, [pc, #684]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020a4:	6a1a      	ldr	r2, [r3, #32]
 80020a6:	4baa      	ldr	r3, [pc, #680]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	430a      	orrs	r2, r1
 80020ac:	621a      	str	r2, [r3, #32]
 80020ae:	e00b      	b.n	80020c8 <HAL_RCC_OscConfig+0x398>
 80020b0:	4ba7      	ldr	r3, [pc, #668]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020b2:	6a1a      	ldr	r2, [r3, #32]
 80020b4:	4ba6      	ldr	r3, [pc, #664]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	438a      	bics	r2, r1
 80020ba:	621a      	str	r2, [r3, #32]
 80020bc:	4ba4      	ldr	r3, [pc, #656]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020be:	6a1a      	ldr	r2, [r3, #32]
 80020c0:	4ba3      	ldr	r3, [pc, #652]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020c2:	2104      	movs	r1, #4
 80020c4:	438a      	bics	r2, r1
 80020c6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d014      	beq.n	80020fa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d0:	f7ff f986 	bl	80013e0 <HAL_GetTick>
 80020d4:	0003      	movs	r3, r0
 80020d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	e009      	b.n	80020ee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff f981 	bl	80013e0 <HAL_GetTick>
 80020de:	0002      	movs	r2, r0
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	4a9b      	ldr	r2, [pc, #620]	@ (8002354 <HAL_RCC_OscConfig+0x624>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d901      	bls.n	80020ee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e12b      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ee:	4b98      	ldr	r3, [pc, #608]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	2202      	movs	r2, #2
 80020f4:	4013      	ands	r3, r2
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x3aa>
 80020f8:	e013      	b.n	8002122 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fa:	f7ff f971 	bl	80013e0 <HAL_GetTick>
 80020fe:	0003      	movs	r3, r0
 8002100:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002102:	e009      	b.n	8002118 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002104:	f7ff f96c 	bl	80013e0 <HAL_GetTick>
 8002108:	0002      	movs	r2, r0
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	4a91      	ldr	r2, [pc, #580]	@ (8002354 <HAL_RCC_OscConfig+0x624>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e116      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002118:	4b8d      	ldr	r3, [pc, #564]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	2202      	movs	r2, #2
 800211e:	4013      	ands	r3, r2
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002122:	231f      	movs	r3, #31
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d105      	bne.n	8002138 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212c:	4b88      	ldr	r3, [pc, #544]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800212e:	69da      	ldr	r2, [r3, #28]
 8002130:	4b87      	ldr	r3, [pc, #540]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002132:	4989      	ldr	r1, [pc, #548]	@ (8002358 <HAL_RCC_OscConfig+0x628>)
 8002134:	400a      	ands	r2, r1
 8002136:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2210      	movs	r2, #16
 800213e:	4013      	ands	r3, r2
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d12a      	bne.n	80021a0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800214a:	4b81      	ldr	r3, [pc, #516]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800214c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800214e:	4b80      	ldr	r3, [pc, #512]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002150:	2104      	movs	r1, #4
 8002152:	430a      	orrs	r2, r1
 8002154:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002156:	4b7e      	ldr	r3, [pc, #504]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002158:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215a:	4b7d      	ldr	r3, [pc, #500]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800215c:	2101      	movs	r1, #1
 800215e:	430a      	orrs	r2, r1
 8002160:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff f93d 	bl	80013e0 <HAL_GetTick>
 8002166:	0003      	movs	r3, r0
 8002168:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800216c:	f7ff f938 	bl	80013e0 <HAL_GetTick>
 8002170:	0002      	movs	r2, r0
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e0e3      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800217e:	4b74      	ldr	r3, [pc, #464]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002182:	2202      	movs	r2, #2
 8002184:	4013      	ands	r3, r2
 8002186:	d0f1      	beq.n	800216c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002188:	4b71      	ldr	r3, [pc, #452]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800218a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800218c:	22f8      	movs	r2, #248	@ 0xf8
 800218e:	4393      	bics	r3, r2
 8002190:	0019      	movs	r1, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	00da      	lsls	r2, r3, #3
 8002198:	4b6d      	ldr	r3, [pc, #436]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800219a:	430a      	orrs	r2, r1
 800219c:	635a      	str	r2, [r3, #52]	@ 0x34
 800219e:	e034      	b.n	800220a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	3305      	adds	r3, #5
 80021a6:	d111      	bne.n	80021cc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80021a8:	4b69      	ldr	r3, [pc, #420]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ac:	4b68      	ldr	r3, [pc, #416]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021ae:	2104      	movs	r1, #4
 80021b0:	438a      	bics	r2, r1
 80021b2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80021b4:	4b66      	ldr	r3, [pc, #408]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b8:	22f8      	movs	r2, #248	@ 0xf8
 80021ba:	4393      	bics	r3, r2
 80021bc:	0019      	movs	r1, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	00da      	lsls	r2, r3, #3
 80021c4:	4b62      	ldr	r3, [pc, #392]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021c6:	430a      	orrs	r2, r1
 80021c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ca:	e01e      	b.n	800220a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80021cc:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021d0:	4b5f      	ldr	r3, [pc, #380]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021d2:	2104      	movs	r1, #4
 80021d4:	430a      	orrs	r2, r1
 80021d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80021d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021dc:	4b5c      	ldr	r3, [pc, #368]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80021de:	2101      	movs	r1, #1
 80021e0:	438a      	bics	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff f8fc 	bl	80013e0 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80021ee:	f7ff f8f7 	bl	80013e0 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0a2      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002200:	4b53      	ldr	r3, [pc, #332]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002204:	2202      	movs	r2, #2
 8002206:	4013      	ands	r3, r2
 8002208:	d1f1      	bne.n	80021ee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a1b      	ldr	r3, [r3, #32]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d100      	bne.n	8002214 <HAL_RCC_OscConfig+0x4e4>
 8002212:	e097      	b.n	8002344 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002214:	4b4e      	ldr	r3, [pc, #312]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	220c      	movs	r2, #12
 800221a:	4013      	ands	r3, r2
 800221c:	2b08      	cmp	r3, #8
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x4f2>
 8002220:	e06b      	b.n	80022fa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1b      	ldr	r3, [r3, #32]
 8002226:	2b02      	cmp	r3, #2
 8002228:	d14c      	bne.n	80022c4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800222a:	4b49      	ldr	r3, [pc, #292]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	4b48      	ldr	r3, [pc, #288]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002230:	494a      	ldr	r1, [pc, #296]	@ (800235c <HAL_RCC_OscConfig+0x62c>)
 8002232:	400a      	ands	r2, r1
 8002234:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff f8d3 	bl	80013e0 <HAL_GetTick>
 800223a:	0003      	movs	r3, r0
 800223c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002240:	f7ff f8ce 	bl	80013e0 <HAL_GetTick>
 8002244:	0002      	movs	r2, r0
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e079      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	049b      	lsls	r3, r3, #18
 800225a:	4013      	ands	r3, r2
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800225e:	4b3c      	ldr	r3, [pc, #240]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002262:	220f      	movs	r2, #15
 8002264:	4393      	bics	r3, r2
 8002266:	0019      	movs	r1, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800226c:	4b38      	ldr	r3, [pc, #224]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800226e:	430a      	orrs	r2, r1
 8002270:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a3a      	ldr	r2, [pc, #232]	@ (8002360 <HAL_RCC_OscConfig+0x630>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	431a      	orrs	r2, r3
 8002286:	4b32      	ldr	r3, [pc, #200]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002288:	430a      	orrs	r2, r1
 800228a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228c:	4b30      	ldr	r3, [pc, #192]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b2f      	ldr	r3, [pc, #188]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002292:	2180      	movs	r1, #128	@ 0x80
 8002294:	0449      	lsls	r1, r1, #17
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229a:	f7ff f8a1 	bl	80013e0 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7ff f89c 	bl	80013e0 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e047      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b6:	4b26      	ldr	r3, [pc, #152]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	049b      	lsls	r3, r3, #18
 80022be:	4013      	ands	r3, r2
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x574>
 80022c2:	e03f      	b.n	8002344 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	4b21      	ldr	r3, [pc, #132]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80022ca:	4924      	ldr	r1, [pc, #144]	@ (800235c <HAL_RCC_OscConfig+0x62c>)
 80022cc:	400a      	ands	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff f886 	bl	80013e0 <HAL_GetTick>
 80022d4:	0003      	movs	r3, r0
 80022d6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7ff f881 	bl	80013e0 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e02c      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ec:	4b18      	ldr	r3, [pc, #96]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	049b      	lsls	r3, r3, #18
 80022f4:	4013      	ands	r3, r2
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x5aa>
 80022f8:	e024      	b.n	8002344 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e01f      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800230c:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <HAL_RCC_OscConfig+0x620>)
 800230e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002310:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	2380      	movs	r3, #128	@ 0x80
 8002316:	025b      	lsls	r3, r3, #9
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	429a      	cmp	r2, r3
 8002320:	d10e      	bne.n	8002340 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	220f      	movs	r2, #15
 8002326:	401a      	ands	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800232c:	429a      	cmp	r2, r3
 800232e:	d107      	bne.n	8002340 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	23f0      	movs	r3, #240	@ 0xf0
 8002334:	039b      	lsls	r3, r3, #14
 8002336:	401a      	ands	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	0018      	movs	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	b008      	add	sp, #32
 800234c:	bd80      	pop	{r7, pc}
 800234e:	46c0      	nop			@ (mov r8, r8)
 8002350:	40021000 	.word	0x40021000
 8002354:	00001388 	.word	0x00001388
 8002358:	efffffff 	.word	0xefffffff
 800235c:	feffffff 	.word	0xfeffffff
 8002360:	ffc2ffff 	.word	0xffc2ffff

08002364 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0b3      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002378:	4b5b      	ldr	r3, [pc, #364]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2201      	movs	r2, #1
 800237e:	4013      	ands	r3, r2
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	429a      	cmp	r2, r3
 8002384:	d911      	bls.n	80023aa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002386:	4b58      	ldr	r3, [pc, #352]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4393      	bics	r3, r2
 800238e:	0019      	movs	r1, r3
 8002390:	4b55      	ldr	r3, [pc, #340]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002398:	4b53      	ldr	r3, [pc, #332]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2201      	movs	r2, #1
 800239e:	4013      	ands	r3, r2
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d001      	beq.n	80023aa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e09a      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2202      	movs	r2, #2
 80023b0:	4013      	ands	r3, r2
 80023b2:	d015      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	d006      	beq.n	80023cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80023be:	4b4b      	ldr	r3, [pc, #300]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023c0:	685a      	ldr	r2, [r3, #4]
 80023c2:	4b4a      	ldr	r3, [pc, #296]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023c4:	21e0      	movs	r1, #224	@ 0xe0
 80023c6:	00c9      	lsls	r1, r1, #3
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023cc:	4b47      	ldr	r3, [pc, #284]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	22f0      	movs	r2, #240	@ 0xf0
 80023d2:	4393      	bics	r3, r2
 80023d4:	0019      	movs	r1, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	4b44      	ldr	r3, [pc, #272]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023dc:	430a      	orrs	r2, r1
 80023de:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2201      	movs	r2, #1
 80023e6:	4013      	ands	r3, r2
 80023e8:	d040      	beq.n	800246c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f2:	4b3e      	ldr	r3, [pc, #248]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	@ 0x80
 80023f8:	029b      	lsls	r3, r3, #10
 80023fa:	4013      	ands	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e06e      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240a:	4b38      	ldr	r3, [pc, #224]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	2380      	movs	r3, #128	@ 0x80
 8002410:	049b      	lsls	r3, r3, #18
 8002412:	4013      	ands	r3, r2
 8002414:	d108      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e062      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b34      	ldr	r3, [pc, #208]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e05b      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4b30      	ldr	r3, [pc, #192]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2203      	movs	r2, #3
 800242e:	4393      	bics	r3, r2
 8002430:	0019      	movs	r1, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	4b2d      	ldr	r3, [pc, #180]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 8002438:	430a      	orrs	r2, r1
 800243a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe ffd0 	bl	80013e0 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002444:	e009      	b.n	800245a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002446:	f7fe ffcb 	bl	80013e0 <HAL_GetTick>
 800244a:	0002      	movs	r2, r0
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	4a27      	ldr	r2, [pc, #156]	@ (80024f0 <HAL_RCC_ClockConfig+0x18c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e042      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245a:	4b24      	ldr	r3, [pc, #144]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	220c      	movs	r2, #12
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	429a      	cmp	r2, r3
 800246a:	d1ec      	bne.n	8002446 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800246c:	4b1e      	ldr	r3, [pc, #120]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d211      	bcs.n	800249e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2201      	movs	r2, #1
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	4b18      	ldr	r3, [pc, #96]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <HAL_RCC_ClockConfig+0x184>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d001      	beq.n	800249e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e020      	b.n	80024e0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2204      	movs	r2, #4
 80024a4:	4013      	ands	r3, r2
 80024a6:	d009      	beq.n	80024bc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80024a8:	4b10      	ldr	r3, [pc, #64]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	4a11      	ldr	r2, [pc, #68]	@ (80024f4 <HAL_RCC_ClockConfig+0x190>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	0019      	movs	r1, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	4b0d      	ldr	r3, [pc, #52]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80024b8:	430a      	orrs	r2, r1
 80024ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80024bc:	f000 f820 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80024c0:	0001      	movs	r1, r0
 80024c2:	4b0a      	ldr	r3, [pc, #40]	@ (80024ec <HAL_RCC_ClockConfig+0x188>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	220f      	movs	r2, #15
 80024ca:	4013      	ands	r3, r2
 80024cc:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <HAL_RCC_ClockConfig+0x194>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	000a      	movs	r2, r1
 80024d2:	40da      	lsrs	r2, r3
 80024d4:	4b09      	ldr	r3, [pc, #36]	@ (80024fc <HAL_RCC_ClockConfig+0x198>)
 80024d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80024d8:	2003      	movs	r0, #3
 80024da:	f7fe ff3b 	bl	8001354 <HAL_InitTick>
  
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	0018      	movs	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	b004      	add	sp, #16
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40022000 	.word	0x40022000
 80024ec:	40021000 	.word	0x40021000
 80024f0:	00001388 	.word	0x00001388
 80024f4:	fffff8ff 	.word	0xfffff8ff
 80024f8:	0800388c 	.word	0x0800388c
 80024fc:	20000010 	.word	0x20000010

08002500 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	60fb      	str	r3, [r7, #12]
 800250a:	2300      	movs	r3, #0
 800250c:	60bb      	str	r3, [r7, #8]
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002516:	2300      	movs	r3, #0
 8002518:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800251a:	4b20      	ldr	r3, [pc, #128]	@ (800259c <HAL_RCC_GetSysClockFreq+0x9c>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	220c      	movs	r2, #12
 8002524:	4013      	ands	r3, r2
 8002526:	2b04      	cmp	r3, #4
 8002528:	d002      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x30>
 800252a:	2b08      	cmp	r3, #8
 800252c:	d003      	beq.n	8002536 <HAL_RCC_GetSysClockFreq+0x36>
 800252e:	e02c      	b.n	800258a <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002530:	4b1b      	ldr	r3, [pc, #108]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002532:	613b      	str	r3, [r7, #16]
      break;
 8002534:	e02c      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0c9b      	lsrs	r3, r3, #18
 800253a:	220f      	movs	r2, #15
 800253c:	4013      	ands	r3, r2
 800253e:	4a19      	ldr	r2, [pc, #100]	@ (80025a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002544:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	220f      	movs	r2, #15
 800254a:	4013      	ands	r3, r2
 800254c:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xa8>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	2380      	movs	r3, #128	@ 0x80
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	4013      	ands	r3, r2
 800255a:	d009      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	4810      	ldr	r0, [pc, #64]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002560:	f7fd fdd2 	bl	8000108 <__udivsi3>
 8002564:	0003      	movs	r3, r0
 8002566:	001a      	movs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4353      	muls	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	e009      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	000a      	movs	r2, r1
 8002574:	0152      	lsls	r2, r2, #5
 8002576:	1a52      	subs	r2, r2, r1
 8002578:	0193      	lsls	r3, r2, #6
 800257a:	1a9b      	subs	r3, r3, r2
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	185b      	adds	r3, r3, r1
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	613b      	str	r3, [r7, #16]
      break;
 8002588:	e002      	b.n	8002590 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800258a:	4b05      	ldr	r3, [pc, #20]	@ (80025a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002590:	693b      	ldr	r3, [r7, #16]
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b006      	add	sp, #24
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			@ (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	007a1200 	.word	0x007a1200
 80025a4:	0800389c 	.word	0x0800389c
 80025a8:	080038ac 	.word	0x080038ac

080025ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d101      	bne.n	80025be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e042      	b.n	8002644 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	223d      	movs	r2, #61	@ 0x3d
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d107      	bne.n	80025da <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	223c      	movs	r2, #60	@ 0x3c
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f7fe fdbd 	bl	8001154 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	223d      	movs	r2, #61	@ 0x3d
 80025de:	2102      	movs	r1, #2
 80025e0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	3304      	adds	r3, #4
 80025ea:	0019      	movs	r1, r3
 80025ec:	0010      	movs	r0, r2
 80025ee:	f000 fd85 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2246      	movs	r2, #70	@ 0x46
 80025f6:	2101      	movs	r1, #1
 80025f8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	223e      	movs	r2, #62	@ 0x3e
 80025fe:	2101      	movs	r1, #1
 8002600:	5499      	strb	r1, [r3, r2]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	223f      	movs	r2, #63	@ 0x3f
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2240      	movs	r2, #64	@ 0x40
 800260e:	2101      	movs	r1, #1
 8002610:	5499      	strb	r1, [r3, r2]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2241      	movs	r2, #65	@ 0x41
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2242      	movs	r2, #66	@ 0x42
 800261e:	2101      	movs	r1, #1
 8002620:	5499      	strb	r1, [r3, r2]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2243      	movs	r2, #67	@ 0x43
 8002626:	2101      	movs	r1, #1
 8002628:	5499      	strb	r1, [r3, r2]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2244      	movs	r2, #68	@ 0x44
 800262e:	2101      	movs	r1, #1
 8002630:	5499      	strb	r1, [r3, r2]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2245      	movs	r2, #69	@ 0x45
 8002636:	2101      	movs	r1, #1
 8002638:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	223d      	movs	r2, #61	@ 0x3d
 800263e:	2101      	movs	r1, #1
 8002640:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	0018      	movs	r0, r3
 8002646:	46bd      	mov	sp, r7
 8002648:	b002      	add	sp, #8
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e042      	b.n	80026e4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	223d      	movs	r2, #61	@ 0x3d
 8002662:	5c9b      	ldrb	r3, [r3, r2]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d107      	bne.n	800267a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223c      	movs	r2, #60	@ 0x3c
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	0018      	movs	r0, r3
 8002676:	f000 f839 	bl	80026ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	223d      	movs	r2, #61	@ 0x3d
 800267e:	2102      	movs	r1, #2
 8002680:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	0019      	movs	r1, r3
 800268c:	0010      	movs	r0, r2
 800268e:	f000 fd35 	bl	80030fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2246      	movs	r2, #70	@ 0x46
 8002696:	2101      	movs	r1, #1
 8002698:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	223e      	movs	r2, #62	@ 0x3e
 800269e:	2101      	movs	r1, #1
 80026a0:	5499      	strb	r1, [r3, r2]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	223f      	movs	r2, #63	@ 0x3f
 80026a6:	2101      	movs	r1, #1
 80026a8:	5499      	strb	r1, [r3, r2]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2240      	movs	r2, #64	@ 0x40
 80026ae:	2101      	movs	r1, #1
 80026b0:	5499      	strb	r1, [r3, r2]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2241      	movs	r2, #65	@ 0x41
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2242      	movs	r2, #66	@ 0x42
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2243      	movs	r2, #67	@ 0x43
 80026c6:	2101      	movs	r1, #1
 80026c8:	5499      	strb	r1, [r3, r2]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2244      	movs	r2, #68	@ 0x44
 80026ce:	2101      	movs	r1, #1
 80026d0:	5499      	strb	r1, [r3, r2]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2245      	movs	r2, #69	@ 0x45
 80026d6:	2101      	movs	r1, #1
 80026d8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	223d      	movs	r2, #61	@ 0x3d
 80026de:	2101      	movs	r1, #1
 80026e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	0018      	movs	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	b002      	add	sp, #8
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026f4:	46c0      	nop			@ (mov r8, r8)
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b002      	add	sp, #8
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	001a      	movs	r2, r3
 800270a:	1cbb      	adds	r3, r7, #2
 800270c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800270e:	2317      	movs	r3, #23
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2200      	movs	r2, #0
 8002714:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d108      	bne.n	800272e <HAL_TIM_PWM_Start_DMA+0x32>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	223e      	movs	r2, #62	@ 0x3e
 8002720:	5c9b      	ldrb	r3, [r3, r2]
 8002722:	b2db      	uxtb	r3, r3
 8002724:	3b02      	subs	r3, #2
 8002726:	425a      	negs	r2, r3
 8002728:	4153      	adcs	r3, r2
 800272a:	b2db      	uxtb	r3, r3
 800272c:	e01f      	b.n	800276e <HAL_TIM_PWM_Start_DMA+0x72>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d108      	bne.n	8002746 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	223f      	movs	r2, #63	@ 0x3f
 8002738:	5c9b      	ldrb	r3, [r3, r2]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	3b02      	subs	r3, #2
 800273e:	425a      	negs	r2, r3
 8002740:	4153      	adcs	r3, r2
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e013      	b.n	800276e <HAL_TIM_PWM_Start_DMA+0x72>
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d108      	bne.n	800275e <HAL_TIM_PWM_Start_DMA+0x62>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2240      	movs	r2, #64	@ 0x40
 8002750:	5c9b      	ldrb	r3, [r3, r2]
 8002752:	b2db      	uxtb	r3, r3
 8002754:	3b02      	subs	r3, #2
 8002756:	425a      	negs	r2, r3
 8002758:	4153      	adcs	r3, r2
 800275a:	b2db      	uxtb	r3, r3
 800275c:	e007      	b.n	800276e <HAL_TIM_PWM_Start_DMA+0x72>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2241      	movs	r2, #65	@ 0x41
 8002762:	5c9b      	ldrb	r3, [r3, r2]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	3b02      	subs	r3, #2
 8002768:	425a      	negs	r2, r3
 800276a:	4153      	adcs	r3, r2
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002772:	2302      	movs	r3, #2
 8002774:	e15a      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d108      	bne.n	800278e <HAL_TIM_PWM_Start_DMA+0x92>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	223e      	movs	r2, #62	@ 0x3e
 8002780:	5c9b      	ldrb	r3, [r3, r2]
 8002782:	b2db      	uxtb	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	425a      	negs	r2, r3
 8002788:	4153      	adcs	r3, r2
 800278a:	b2db      	uxtb	r3, r3
 800278c:	e01f      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0xd2>
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b04      	cmp	r3, #4
 8002792:	d108      	bne.n	80027a6 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	223f      	movs	r2, #63	@ 0x3f
 8002798:	5c9b      	ldrb	r3, [r3, r2]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	425a      	negs	r2, r3
 80027a0:	4153      	adcs	r3, r2
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	e013      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0xd2>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	2b08      	cmp	r3, #8
 80027aa:	d108      	bne.n	80027be <HAL_TIM_PWM_Start_DMA+0xc2>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2240      	movs	r2, #64	@ 0x40
 80027b0:	5c9b      	ldrb	r3, [r3, r2]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	3b01      	subs	r3, #1
 80027b6:	425a      	negs	r2, r3
 80027b8:	4153      	adcs	r3, r2
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e007      	b.n	80027ce <HAL_TIM_PWM_Start_DMA+0xd2>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2241      	movs	r2, #65	@ 0x41
 80027c2:	5c9b      	ldrb	r3, [r3, r2]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3b01      	subs	r3, #1
 80027c8:	425a      	negs	r2, r3
 80027ca:	4153      	adcs	r3, r2
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d025      	beq.n	800281e <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_TIM_PWM_Start_DMA+0xe4>
 80027d8:	1cbb      	adds	r3, r7, #2
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e123      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d104      	bne.n	80027f4 <HAL_TIM_PWM_Start_DMA+0xf8>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	223e      	movs	r2, #62	@ 0x3e
 80027ee:	2102      	movs	r1, #2
 80027f0:	5499      	strb	r1, [r3, r2]
 80027f2:	e016      	b.n	8002822 <HAL_TIM_PWM_Start_DMA+0x126>
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d104      	bne.n	8002804 <HAL_TIM_PWM_Start_DMA+0x108>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	223f      	movs	r2, #63	@ 0x3f
 80027fe:	2102      	movs	r1, #2
 8002800:	5499      	strb	r1, [r3, r2]
 8002802:	e00e      	b.n	8002822 <HAL_TIM_PWM_Start_DMA+0x126>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d104      	bne.n	8002814 <HAL_TIM_PWM_Start_DMA+0x118>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2240      	movs	r2, #64	@ 0x40
 800280e:	2102      	movs	r1, #2
 8002810:	5499      	strb	r1, [r3, r2]
 8002812:	e006      	b.n	8002822 <HAL_TIM_PWM_Start_DMA+0x126>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2241      	movs	r2, #65	@ 0x41
 8002818:	2102      	movs	r1, #2
 800281a:	5499      	strb	r1, [r3, r2]
 800281c:	e001      	b.n	8002822 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e104      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d100      	bne.n	800282a <HAL_TIM_PWM_Start_DMA+0x12e>
 8002828:	e080      	b.n	800292c <HAL_TIM_PWM_Start_DMA+0x230>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	2b0c      	cmp	r3, #12
 800282e:	d900      	bls.n	8002832 <HAL_TIM_PWM_Start_DMA+0x136>
 8002830:	e0a1      	b.n	8002976 <HAL_TIM_PWM_Start_DMA+0x27a>
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b08      	cmp	r3, #8
 8002836:	d054      	beq.n	80028e2 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d900      	bls.n	8002840 <HAL_TIM_PWM_Start_DMA+0x144>
 800283e:	e09a      	b.n	8002976 <HAL_TIM_PWM_Start_DMA+0x27a>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_TIM_PWM_Start_DMA+0x152>
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	2b04      	cmp	r3, #4
 800284a:	d025      	beq.n	8002898 <HAL_TIM_PWM_Start_DMA+0x19c>
 800284c:	e093      	b.n	8002976 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002852:	4a78      	ldr	r2, [pc, #480]	@ (8002a34 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002854:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285a:	4a77      	ldr	r2, [pc, #476]	@ (8002a38 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800285c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002862:	4a76      	ldr	r2, [pc, #472]	@ (8002a3c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002864:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3334      	adds	r3, #52	@ 0x34
 8002872:	001a      	movs	r2, r3
 8002874:	1cbb      	adds	r3, r7, #2
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	f7fe ff06 	bl	8001688 <HAL_DMA_Start_IT>
 800287c:	1e03      	subs	r3, r0, #0
 800287e:	d001      	beq.n	8002884 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0d3      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	0089      	lsls	r1, r1, #2
 8002892:	430a      	orrs	r2, r1
 8002894:	60da      	str	r2, [r3, #12]
      break;
 8002896:	e073      	b.n	8002980 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	4a65      	ldr	r2, [pc, #404]	@ (8002a34 <HAL_TIM_PWM_Start_DMA+0x338>)
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a4:	4a64      	ldr	r2, [pc, #400]	@ (8002a38 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80028a6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	4a63      	ldr	r2, [pc, #396]	@ (8002a3c <HAL_TIM_PWM_Start_DMA+0x340>)
 80028ae:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	3338      	adds	r3, #56	@ 0x38
 80028bc:	001a      	movs	r2, r3
 80028be:	1cbb      	adds	r3, r7, #2
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	f7fe fee1 	bl	8001688 <HAL_DMA_Start_IT>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d001      	beq.n	80028ce <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e0ae      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2180      	movs	r1, #128	@ 0x80
 80028da:	00c9      	lsls	r1, r1, #3
 80028dc:	430a      	orrs	r2, r1
 80028de:	60da      	str	r2, [r3, #12]
      break;
 80028e0:	e04e      	b.n	8002980 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028e6:	4a53      	ldr	r2, [pc, #332]	@ (8002a34 <HAL_TIM_PWM_Start_DMA+0x338>)
 80028e8:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ee:	4a52      	ldr	r2, [pc, #328]	@ (8002a38 <HAL_TIM_PWM_Start_DMA+0x33c>)
 80028f0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028f6:	4a51      	ldr	r2, [pc, #324]	@ (8002a3c <HAL_TIM_PWM_Start_DMA+0x340>)
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	333c      	adds	r3, #60	@ 0x3c
 8002906:	001a      	movs	r2, r3
 8002908:	1cbb      	adds	r3, r7, #2
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	f7fe febc 	bl	8001688 <HAL_DMA_Start_IT>
 8002910:	1e03      	subs	r3, r0, #0
 8002912:	d001      	beq.n	8002918 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e089      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2180      	movs	r1, #128	@ 0x80
 8002924:	0109      	lsls	r1, r1, #4
 8002926:	430a      	orrs	r2, r1
 8002928:	60da      	str	r2, [r3, #12]
      break;
 800292a:	e029      	b.n	8002980 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002930:	4a40      	ldr	r2, [pc, #256]	@ (8002a34 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002938:	4a3f      	ldr	r2, [pc, #252]	@ (8002a38 <HAL_TIM_PWM_Start_DMA+0x33c>)
 800293a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	4a3e      	ldr	r2, [pc, #248]	@ (8002a3c <HAL_TIM_PWM_Start_DMA+0x340>)
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	3340      	adds	r3, #64	@ 0x40
 8002950:	001a      	movs	r2, r3
 8002952:	1cbb      	adds	r3, r7, #2
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	f7fe fe97 	bl	8001688 <HAL_DMA_Start_IT>
 800295a:	1e03      	subs	r3, r0, #0
 800295c:	d001      	beq.n	8002962 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e064      	b.n	8002a2c <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68da      	ldr	r2, [r3, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2180      	movs	r1, #128	@ 0x80
 800296e:	0149      	lsls	r1, r1, #5
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]
      break;
 8002974:	e004      	b.n	8002980 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002976:	2317      	movs	r3, #23
 8002978:	18fb      	adds	r3, r7, r3
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
      break;
 800297e:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002980:	2317      	movs	r3, #23
 8002982:	18fb      	adds	r3, r7, r3
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d14d      	bne.n	8002a26 <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68b9      	ldr	r1, [r7, #8]
 8002990:	2201      	movs	r2, #1
 8002992:	0018      	movs	r0, r3
 8002994:	f000 feb0 	bl	80036f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a28      	ldr	r2, [pc, #160]	@ (8002a40 <HAL_TIM_PWM_Start_DMA+0x344>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_TIM_PWM_Start_DMA+0x2ba>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a27      	ldr	r2, [pc, #156]	@ (8002a44 <HAL_TIM_PWM_Start_DMA+0x348>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_PWM_Start_DMA+0x2ba>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a25      	ldr	r2, [pc, #148]	@ (8002a48 <HAL_TIM_PWM_Start_DMA+0x34c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d101      	bne.n	80029ba <HAL_TIM_PWM_Start_DMA+0x2be>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_TIM_PWM_Start_DMA+0x2c0>
 80029ba:	2300      	movs	r3, #0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2180      	movs	r1, #128	@ 0x80
 80029cc:	0209      	lsls	r1, r1, #8
 80029ce:	430a      	orrs	r2, r1
 80029d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002a40 <HAL_TIM_PWM_Start_DMA+0x344>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d00a      	beq.n	80029f2 <HAL_TIM_PWM_Start_DMA+0x2f6>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	05db      	lsls	r3, r3, #23
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_PWM_Start_DMA+0x2f6>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <HAL_TIM_PWM_Start_DMA+0x350>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d111      	bne.n	8002a16 <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2207      	movs	r2, #7
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	2b06      	cmp	r3, #6
 8002a02:	d010      	beq.n	8002a26 <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2101      	movs	r1, #1
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a14:	e007      	b.n	8002a26 <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002a26:	2317      	movs	r3, #23
 8002a28:	18fb      	adds	r3, r7, r3
 8002a2a:	781b      	ldrb	r3, [r3, #0]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b006      	add	sp, #24
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	08002fe9 	.word	0x08002fe9
 8002a38:	08003093 	.word	0x08003093
 8002a3c:	08002f55 	.word	0x08002f55
 8002a40:	40012c00 	.word	0x40012c00
 8002a44:	40014400 	.word	0x40014400
 8002a48:	40014800 	.word	0x40014800
 8002a4c:	40000400 	.word	0x40000400

08002a50 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
 8002a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a5a:	230f      	movs	r3, #15
 8002a5c:	18fb      	adds	r3, r7, r3
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b0c      	cmp	r3, #12
 8002a66:	d039      	beq.n	8002adc <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2b0c      	cmp	r3, #12
 8002a6c:	d844      	bhi.n	8002af8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	2b08      	cmp	r3, #8
 8002a72:	d025      	beq.n	8002ac0 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d83e      	bhi.n	8002af8 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d00e      	beq.n	8002aa4 <HAL_TIM_PWM_Stop_DMA+0x54>
 8002a86:	e037      	b.n	8002af8 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4951      	ldr	r1, [pc, #324]	@ (8002bd8 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002a94:	400a      	ands	r2, r1
 8002a96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7fe fe59 	bl	8001754 <HAL_DMA_Abort_IT>
      break;
 8002aa2:	e02e      	b.n	8002b02 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	494b      	ldr	r1, [pc, #300]	@ (8002bdc <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f7fe fe4b 	bl	8001754 <HAL_DMA_Abort_IT>
      break;
 8002abe:	e020      	b.n	8002b02 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4945      	ldr	r1, [pc, #276]	@ (8002be0 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8002acc:	400a      	ands	r2, r1
 8002ace:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fe fe3d 	bl	8001754 <HAL_DMA_Abort_IT>
      break;
 8002ada:	e012      	b.n	8002b02 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68da      	ldr	r2, [r3, #12]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	493f      	ldr	r1, [pc, #252]	@ (8002be4 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8002ae8:	400a      	ands	r2, r1
 8002aea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7fe fe2f 	bl	8001754 <HAL_DMA_Abort_IT>
      break;
 8002af6:	e004      	b.n	8002b02 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002af8:	230f      	movs	r3, #15
 8002afa:	18fb      	adds	r3, r7, r3
 8002afc:	2201      	movs	r2, #1
 8002afe:	701a      	strb	r2, [r3, #0]
      break;
 8002b00:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002b02:	230f      	movs	r3, #15
 8002b04:	18fb      	adds	r3, r7, r3
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d15e      	bne.n	8002bca <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6839      	ldr	r1, [r7, #0]
 8002b12:	2200      	movs	r2, #0
 8002b14:	0018      	movs	r0, r3
 8002b16:	f000 fdef 	bl	80036f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a32      	ldr	r2, [pc, #200]	@ (8002be8 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d009      	beq.n	8002b38 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a30      	ldr	r2, [pc, #192]	@ (8002bec <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d004      	beq.n	8002b38 <HAL_TIM_PWM_Stop_DMA+0xe8>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_TIM_PWM_Stop_DMA+0xec>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <HAL_TIM_PWM_Stop_DMA+0xee>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d013      	beq.n	8002b6a <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf4 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d10d      	bne.n	8002b6a <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	4a28      	ldr	r2, [pc, #160]	@ (8002bf8 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8002b56:	4013      	ands	r3, r2
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_PWM_Stop_DMA+0x11a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4925      	ldr	r1, [pc, #148]	@ (8002bfc <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8002b66:	400a      	ands	r2, r1
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	4a20      	ldr	r2, [pc, #128]	@ (8002bf4 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	d10d      	bne.n	8002b92 <HAL_TIM_PWM_Stop_DMA+0x142>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	4a1e      	ldr	r2, [pc, #120]	@ (8002bf8 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d107      	bne.n	8002b92 <HAL_TIM_PWM_Stop_DMA+0x142>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	438a      	bics	r2, r1
 8002b90:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d104      	bne.n	8002ba2 <HAL_TIM_PWM_Stop_DMA+0x152>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	223e      	movs	r2, #62	@ 0x3e
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	5499      	strb	r1, [r3, r2]
 8002ba0:	e013      	b.n	8002bca <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	2b04      	cmp	r3, #4
 8002ba6:	d104      	bne.n	8002bb2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	223f      	movs	r2, #63	@ 0x3f
 8002bac:	2101      	movs	r1, #1
 8002bae:	5499      	strb	r1, [r3, r2]
 8002bb0:	e00b      	b.n	8002bca <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d104      	bne.n	8002bc2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2240      	movs	r2, #64	@ 0x40
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	5499      	strb	r1, [r3, r2]
 8002bc0:	e003      	b.n	8002bca <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2241      	movs	r2, #65	@ 0x41
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002bca:	230f      	movs	r3, #15
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
}
 8002bd0:	0018      	movs	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	b004      	add	sp, #16
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	fffffdff 	.word	0xfffffdff
 8002bdc:	fffffbff 	.word	0xfffffbff
 8002be0:	fffff7ff 	.word	0xfffff7ff
 8002be4:	ffffefff 	.word	0xffffefff
 8002be8:	40012c00 	.word	0x40012c00
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40014800 	.word	0x40014800
 8002bf4:	00001111 	.word	0x00001111
 8002bf8:	00000444 	.word	0x00000444
 8002bfc:	ffff7fff 	.word	0xffff7fff

08002c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c0c:	2317      	movs	r3, #23
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	223c      	movs	r2, #60	@ 0x3c
 8002c18:	5c9b      	ldrb	r3, [r3, r2]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e0ad      	b.n	8002d7e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	223c      	movs	r2, #60	@ 0x3c
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0c      	cmp	r3, #12
 8002c2e:	d100      	bne.n	8002c32 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c30:	e076      	b.n	8002d20 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2b0c      	cmp	r3, #12
 8002c36:	d900      	bls.n	8002c3a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c38:	e095      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d04e      	beq.n	8002cde <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d900      	bls.n	8002c48 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c46:	e08e      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d021      	beq.n	8002c98 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c54:	e087      	b.n	8002d66 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	0011      	movs	r1, r2
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 fad0 	bl	8003204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2108      	movs	r1, #8
 8002c70:	430a      	orrs	r2, r1
 8002c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2104      	movs	r1, #4
 8002c80:	438a      	bics	r2, r1
 8002c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6999      	ldr	r1, [r3, #24]
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	619a      	str	r2, [r3, #24]
      break;
 8002c96:	e06b      	b.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	0011      	movs	r1, r2
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	f000 fb2d 	bl	8003300 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699a      	ldr	r2, [r3, #24]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2180      	movs	r1, #128	@ 0x80
 8002cb2:	0109      	lsls	r1, r1, #4
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4931      	ldr	r1, [pc, #196]	@ (8002d88 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6999      	ldr	r1, [r3, #24]
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	619a      	str	r2, [r3, #24]
      break;
 8002cdc:	e048      	b.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	68ba      	ldr	r2, [r7, #8]
 8002ce4:	0011      	movs	r1, r2
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f000 fb88 	bl	80033fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	69da      	ldr	r2, [r3, #28]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2104      	movs	r1, #4
 8002d08:	438a      	bics	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69d9      	ldr	r1, [r3, #28]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	691a      	ldr	r2, [r3, #16]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	61da      	str	r2, [r3, #28]
      break;
 8002d1e:	e027      	b.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68ba      	ldr	r2, [r7, #8]
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f000 fbe7 	bl	80034fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	69da      	ldr	r2, [r3, #28]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2180      	movs	r1, #128	@ 0x80
 8002d3a:	0109      	lsls	r1, r1, #4
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69da      	ldr	r2, [r3, #28]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	490f      	ldr	r1, [pc, #60]	@ (8002d88 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	69d9      	ldr	r1, [r3, #28]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	021a      	lsls	r2, r3, #8
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	61da      	str	r2, [r3, #28]
      break;
 8002d64:	e004      	b.n	8002d70 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d66:	2317      	movs	r3, #23
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
      break;
 8002d6e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	223c      	movs	r2, #60	@ 0x3c
 8002d74:	2100      	movs	r1, #0
 8002d76:	5499      	strb	r1, [r3, r2]

  return status;
 8002d78:	2317      	movs	r3, #23
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b006      	add	sp, #24
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			@ (mov r8, r8)
 8002d88:	fffffbff 	.word	0xfffffbff

08002d8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d96:	230f      	movs	r3, #15
 8002d98:	18fb      	adds	r3, r7, r3
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	223c      	movs	r2, #60	@ 0x3c
 8002da2:	5c9b      	ldrb	r3, [r3, r2]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_ConfigClockSource+0x20>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0bc      	b.n	8002f26 <HAL_TIM_ConfigClockSource+0x19a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	223c      	movs	r2, #60	@ 0x3c
 8002db0:	2101      	movs	r1, #1
 8002db2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	223d      	movs	r2, #61	@ 0x3d
 8002db8:	2102      	movs	r1, #2
 8002dba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	2277      	movs	r2, #119	@ 0x77
 8002dc8:	4393      	bics	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	4a58      	ldr	r2, [pc, #352]	@ (8002f30 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	0192      	lsls	r2, r2, #6
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d040      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0xde>
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	0192      	lsls	r2, r2, #6
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d900      	bls.n	8002df2 <HAL_TIM_ConfigClockSource+0x66>
 8002df0:	e088      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	0152      	lsls	r2, r2, #5
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d100      	bne.n	8002dfc <HAL_TIM_ConfigClockSource+0x70>
 8002dfa:	e088      	b.n	8002f0e <HAL_TIM_ConfigClockSource+0x182>
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	0152      	lsls	r2, r2, #5
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d900      	bls.n	8002e06 <HAL_TIM_ConfigClockSource+0x7a>
 8002e04:	e07e      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e06:	2b70      	cmp	r3, #112	@ 0x70
 8002e08:	d018      	beq.n	8002e3c <HAL_TIM_ConfigClockSource+0xb0>
 8002e0a:	d900      	bls.n	8002e0e <HAL_TIM_ConfigClockSource+0x82>
 8002e0c:	e07a      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e0e:	2b60      	cmp	r3, #96	@ 0x60
 8002e10:	d04f      	beq.n	8002eb2 <HAL_TIM_ConfigClockSource+0x126>
 8002e12:	d900      	bls.n	8002e16 <HAL_TIM_ConfigClockSource+0x8a>
 8002e14:	e076      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e16:	2b50      	cmp	r3, #80	@ 0x50
 8002e18:	d03b      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0x106>
 8002e1a:	d900      	bls.n	8002e1e <HAL_TIM_ConfigClockSource+0x92>
 8002e1c:	e072      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e1e:	2b40      	cmp	r3, #64	@ 0x40
 8002e20:	d057      	beq.n	8002ed2 <HAL_TIM_ConfigClockSource+0x146>
 8002e22:	d900      	bls.n	8002e26 <HAL_TIM_ConfigClockSource+0x9a>
 8002e24:	e06e      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e26:	2b30      	cmp	r3, #48	@ 0x30
 8002e28:	d063      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x166>
 8002e2a:	d86b      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d060      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x166>
 8002e30:	d868      	bhi.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d05d      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x166>
 8002e36:	2b10      	cmp	r3, #16
 8002e38:	d05b      	beq.n	8002ef2 <HAL_TIM_ConfigClockSource+0x166>
 8002e3a:	e063      	b.n	8002f04 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e4c:	f000 fc34 	bl	80036b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2277      	movs	r2, #119	@ 0x77
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	609a      	str	r2, [r3, #8]
      break;
 8002e68:	e052      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e7a:	f000 fc1d 	bl	80036b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2180      	movs	r1, #128	@ 0x80
 8002e8a:	01c9      	lsls	r1, r1, #7
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	609a      	str	r2, [r3, #8]
      break;
 8002e90:	e03e      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	f000 fb90 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2150      	movs	r1, #80	@ 0x50
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f000 fbea 	bl	8003684 <TIM_ITRx_SetConfig>
      break;
 8002eb0:	e02e      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ebe:	001a      	movs	r2, r3
 8002ec0:	f000 fbae 	bl	8003620 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2160      	movs	r1, #96	@ 0x60
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f000 fbda 	bl	8003684 <TIM_ITRx_SetConfig>
      break;
 8002ed0:	e01e      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ede:	001a      	movs	r2, r3
 8002ee0:	f000 fb70 	bl	80035c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2140      	movs	r1, #64	@ 0x40
 8002eea:	0018      	movs	r0, r3
 8002eec:	f000 fbca 	bl	8003684 <TIM_ITRx_SetConfig>
      break;
 8002ef0:	e00e      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0019      	movs	r1, r3
 8002efc:	0010      	movs	r0, r2
 8002efe:	f000 fbc1 	bl	8003684 <TIM_ITRx_SetConfig>
      break;
 8002f02:	e005      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
      break;
 8002f0c:	e000      	b.n	8002f10 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f0e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	223d      	movs	r2, #61	@ 0x3d
 8002f14:	2101      	movs	r1, #1
 8002f16:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	223c      	movs	r2, #60	@ 0x3c
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	5499      	strb	r1, [r3, r2]

  return status;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	781b      	ldrb	r3, [r3, #0]
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b004      	add	sp, #16
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	ffff00ff 	.word	0xffff00ff

08002f34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	b002      	add	sp, #8
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002f4c:	46c0      	nop			@ (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f60:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d107      	bne.n	8002f7c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	223e      	movs	r2, #62	@ 0x3e
 8002f76:	2101      	movs	r1, #1
 8002f78:	5499      	strb	r1, [r3, r2]
 8002f7a:	e02a      	b.n	8002fd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d107      	bne.n	8002f96 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	223f      	movs	r2, #63	@ 0x3f
 8002f90:	2101      	movs	r1, #1
 8002f92:	5499      	strb	r1, [r3, r2]
 8002f94:	e01d      	b.n	8002fd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2240      	movs	r2, #64	@ 0x40
 8002faa:	2101      	movs	r1, #1
 8002fac:	5499      	strb	r1, [r3, r2]
 8002fae:	e010      	b.n	8002fd2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d107      	bne.n	8002fca <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2208      	movs	r2, #8
 8002fbe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2241      	movs	r2, #65	@ 0x41
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	5499      	strb	r1, [r3, r2]
 8002fc8:	e003      	b.n	8002fd2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	223d      	movs	r2, #61	@ 0x3d
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	0018      	movs	r0, r3
 8002fd6:	f7ff ffb5 	bl	8002f44 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	771a      	strb	r2, [r3, #28]
}
 8002fe0:	46c0      	nop			@ (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b004      	add	sp, #16
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d10b      	bne.n	8003018 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d136      	bne.n	800307c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	223e      	movs	r2, #62	@ 0x3e
 8003012:	2101      	movs	r1, #1
 8003014:	5499      	strb	r1, [r3, r2]
 8003016:	e031      	b.n	800307c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	429a      	cmp	r2, r3
 8003020:	d10b      	bne.n	800303a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2202      	movs	r2, #2
 8003026:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d125      	bne.n	800307c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	223f      	movs	r2, #63	@ 0x3f
 8003034:	2101      	movs	r1, #1
 8003036:	5499      	strb	r1, [r3, r2]
 8003038:	e020      	b.n	800307c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	429a      	cmp	r2, r3
 8003042:	d10b      	bne.n	800305c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2204      	movs	r2, #4
 8003048:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d114      	bne.n	800307c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2240      	movs	r2, #64	@ 0x40
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	e00f      	b.n	800307c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	429a      	cmp	r2, r3
 8003064:	d10a      	bne.n	800307c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2208      	movs	r2, #8
 800306a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d103      	bne.n	800307c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2241      	movs	r2, #65	@ 0x41
 8003078:	2101      	movs	r1, #1
 800307a:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	0018      	movs	r0, r3
 8003080:	f7fd f9b8 	bl	80003f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	771a      	strb	r2, [r3, #28]
}
 800308a:	46c0      	nop			@ (mov r8, r8)
 800308c:	46bd      	mov	sp, r7
 800308e:	b004      	add	sp, #16
 8003090:	bd80      	pop	{r7, pc}

08003092 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b084      	sub	sp, #16
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d103      	bne.n	80030b2 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	771a      	strb	r2, [r3, #28]
 80030b0:	e019      	b.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d103      	bne.n	80030c4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2202      	movs	r2, #2
 80030c0:	771a      	strb	r2, [r3, #28]
 80030c2:	e010      	b.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d103      	bne.n	80030d6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2204      	movs	r2, #4
 80030d2:	771a      	strb	r2, [r3, #28]
 80030d4:	e007      	b.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d102      	bne.n	80030e6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2208      	movs	r2, #8
 80030e4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff ff23 	bl	8002f34 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	46bd      	mov	sp, r7
 80030f8:	b004      	add	sp, #16
 80030fa:	bd80      	pop	{r7, pc}

080030fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a37      	ldr	r2, [pc, #220]	@ (80031ec <TIM_Base_SetConfig+0xf0>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d008      	beq.n	8003126 <TIM_Base_SetConfig+0x2a>
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	2380      	movs	r3, #128	@ 0x80
 8003118:	05db      	lsls	r3, r3, #23
 800311a:	429a      	cmp	r2, r3
 800311c:	d003      	beq.n	8003126 <TIM_Base_SetConfig+0x2a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a33      	ldr	r2, [pc, #204]	@ (80031f0 <TIM_Base_SetConfig+0xf4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d108      	bne.n	8003138 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2270      	movs	r2, #112	@ 0x70
 800312a:	4393      	bics	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <TIM_Base_SetConfig+0xf0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d014      	beq.n	800316a <TIM_Base_SetConfig+0x6e>
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	2380      	movs	r3, #128	@ 0x80
 8003144:	05db      	lsls	r3, r3, #23
 8003146:	429a      	cmp	r2, r3
 8003148:	d00f      	beq.n	800316a <TIM_Base_SetConfig+0x6e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a28      	ldr	r2, [pc, #160]	@ (80031f0 <TIM_Base_SetConfig+0xf4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00b      	beq.n	800316a <TIM_Base_SetConfig+0x6e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a27      	ldr	r2, [pc, #156]	@ (80031f4 <TIM_Base_SetConfig+0xf8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <TIM_Base_SetConfig+0x6e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a26      	ldr	r2, [pc, #152]	@ (80031f8 <TIM_Base_SetConfig+0xfc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d003      	beq.n	800316a <TIM_Base_SetConfig+0x6e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a25      	ldr	r2, [pc, #148]	@ (80031fc <TIM_Base_SetConfig+0x100>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d108      	bne.n	800317c <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4a24      	ldr	r2, [pc, #144]	@ (8003200 <TIM_Base_SetConfig+0x104>)
 800316e:	4013      	ands	r3, r2
 8003170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2280      	movs	r2, #128	@ 0x80
 8003180:	4393      	bics	r3, r2
 8003182:	001a      	movs	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a11      	ldr	r2, [pc, #68]	@ (80031ec <TIM_Base_SetConfig+0xf0>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0xbe>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a12      	ldr	r2, [pc, #72]	@ (80031f8 <TIM_Base_SetConfig+0xfc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0xbe>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a11      	ldr	r2, [pc, #68]	@ (80031fc <TIM_Base_SetConfig+0x100>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d103      	bne.n	80031c2 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	691a      	ldr	r2, [r3, #16]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d106      	bne.n	80031e2 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	2201      	movs	r2, #1
 80031da:	4393      	bics	r3, r2
 80031dc:	001a      	movs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	611a      	str	r2, [r3, #16]
  }
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	46bd      	mov	sp, r7
 80031e6:	b004      	add	sp, #16
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	46c0      	nop			@ (mov r8, r8)
 80031ec:	40012c00 	.word	0x40012c00
 80031f0:	40000400 	.word	0x40000400
 80031f4:	40002000 	.word	0x40002000
 80031f8:	40014400 	.word	0x40014400
 80031fc:	40014800 	.word	0x40014800
 8003200:	fffffcff 	.word	0xfffffcff

08003204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	2201      	movs	r2, #1
 800321a:	4393      	bics	r3, r2
 800321c:	001a      	movs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2270      	movs	r2, #112	@ 0x70
 8003232:	4393      	bics	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2203      	movs	r2, #3
 800323a:	4393      	bics	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	4313      	orrs	r3, r2
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	2202      	movs	r2, #2
 800324c:	4393      	bics	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a23      	ldr	r2, [pc, #140]	@ (80032ec <TIM_OC1_SetConfig+0xe8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <TIM_OC1_SetConfig+0x6e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a22      	ldr	r2, [pc, #136]	@ (80032f0 <TIM_OC1_SetConfig+0xec>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d003      	beq.n	8003272 <TIM_OC1_SetConfig+0x6e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a21      	ldr	r2, [pc, #132]	@ (80032f4 <TIM_OC1_SetConfig+0xf0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10c      	bne.n	800328c <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2208      	movs	r2, #8
 8003276:	4393      	bics	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2204      	movs	r2, #4
 8003288:	4393      	bics	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a17      	ldr	r2, [pc, #92]	@ (80032ec <TIM_OC1_SetConfig+0xe8>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d007      	beq.n	80032a4 <TIM_OC1_SetConfig+0xa0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a16      	ldr	r2, [pc, #88]	@ (80032f0 <TIM_OC1_SetConfig+0xec>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d003      	beq.n	80032a4 <TIM_OC1_SetConfig+0xa0>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	4a15      	ldr	r2, [pc, #84]	@ (80032f4 <TIM_OC1_SetConfig+0xf0>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d111      	bne.n	80032c8 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4a14      	ldr	r2, [pc, #80]	@ (80032f8 <TIM_OC1_SetConfig+0xf4>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	4a13      	ldr	r2, [pc, #76]	@ (80032fc <TIM_OC1_SetConfig+0xf8>)
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	621a      	str	r2, [r3, #32]
}
 80032e2:	46c0      	nop			@ (mov r8, r8)
 80032e4:	46bd      	mov	sp, r7
 80032e6:	b006      	add	sp, #24
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	46c0      	nop			@ (mov r8, r8)
 80032ec:	40012c00 	.word	0x40012c00
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800
 80032f8:	fffffeff 	.word	0xfffffeff
 80032fc:	fffffdff 	.word	0xfffffdff

08003300 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a1b      	ldr	r3, [r3, #32]
 8003314:	2210      	movs	r2, #16
 8003316:	4393      	bics	r3, r2
 8003318:	001a      	movs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	4a2c      	ldr	r2, [pc, #176]	@ (80033e0 <TIM_OC2_SetConfig+0xe0>)
 800332e:	4013      	ands	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	4a2b      	ldr	r2, [pc, #172]	@ (80033e4 <TIM_OC2_SetConfig+0xe4>)
 8003336:	4013      	ands	r3, r2
 8003338:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	021b      	lsls	r3, r3, #8
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2220      	movs	r2, #32
 800334a:	4393      	bics	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	4313      	orrs	r3, r2
 8003358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a22      	ldr	r2, [pc, #136]	@ (80033e8 <TIM_OC2_SetConfig+0xe8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d10d      	bne.n	800337e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	2280      	movs	r2, #128	@ 0x80
 8003366:	4393      	bics	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	697a      	ldr	r2, [r7, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2240      	movs	r2, #64	@ 0x40
 800337a:	4393      	bics	r3, r2
 800337c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a19      	ldr	r2, [pc, #100]	@ (80033e8 <TIM_OC2_SetConfig+0xe8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <TIM_OC2_SetConfig+0x96>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a18      	ldr	r2, [pc, #96]	@ (80033ec <TIM_OC2_SetConfig+0xec>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_OC2_SetConfig+0x96>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a17      	ldr	r2, [pc, #92]	@ (80033f0 <TIM_OC2_SetConfig+0xf0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d113      	bne.n	80033be <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4a16      	ldr	r2, [pc, #88]	@ (80033f4 <TIM_OC2_SetConfig+0xf4>)
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <TIM_OC2_SetConfig+0xf8>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	621a      	str	r2, [r3, #32]
}
 80033d8:	46c0      	nop			@ (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b006      	add	sp, #24
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	ffff8fff 	.word	0xffff8fff
 80033e4:	fffffcff 	.word	0xfffffcff
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40014400 	.word	0x40014400
 80033f0:	40014800 	.word	0x40014800
 80033f4:	fffffbff 	.word	0xfffffbff
 80033f8:	fffff7ff 	.word	0xfffff7ff

080033fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a1b      	ldr	r3, [r3, #32]
 8003410:	4a31      	ldr	r2, [pc, #196]	@ (80034d8 <TIM_OC3_SetConfig+0xdc>)
 8003412:	401a      	ands	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2270      	movs	r2, #112	@ 0x70
 8003428:	4393      	bics	r3, r2
 800342a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2203      	movs	r2, #3
 8003430:	4393      	bics	r3, r2
 8003432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	4313      	orrs	r3, r2
 800343c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	4a26      	ldr	r2, [pc, #152]	@ (80034dc <TIM_OC3_SetConfig+0xe0>)
 8003442:	4013      	ands	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	021b      	lsls	r3, r3, #8
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	4313      	orrs	r3, r2
 8003450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a22      	ldr	r2, [pc, #136]	@ (80034e0 <TIM_OC3_SetConfig+0xe4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d10d      	bne.n	8003476 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	4a21      	ldr	r2, [pc, #132]	@ (80034e4 <TIM_OC3_SetConfig+0xe8>)
 800345e:	4013      	ands	r3, r2
 8003460:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a1d      	ldr	r2, [pc, #116]	@ (80034e8 <TIM_OC3_SetConfig+0xec>)
 8003472:	4013      	ands	r3, r2
 8003474:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a19      	ldr	r2, [pc, #100]	@ (80034e0 <TIM_OC3_SetConfig+0xe4>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d007      	beq.n	800348e <TIM_OC3_SetConfig+0x92>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <TIM_OC3_SetConfig+0xf0>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d003      	beq.n	800348e <TIM_OC3_SetConfig+0x92>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a19      	ldr	r2, [pc, #100]	@ (80034f0 <TIM_OC3_SetConfig+0xf4>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d113      	bne.n	80034b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4a18      	ldr	r2, [pc, #96]	@ (80034f4 <TIM_OC3_SetConfig+0xf8>)
 8003492:	4013      	ands	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	4a17      	ldr	r2, [pc, #92]	@ (80034f8 <TIM_OC3_SetConfig+0xfc>)
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	693a      	ldr	r2, [r7, #16]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	621a      	str	r2, [r3, #32]
}
 80034d0:	46c0      	nop			@ (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b006      	add	sp, #24
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	fffffeff 	.word	0xfffffeff
 80034dc:	fffffdff 	.word	0xfffffdff
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	fffff7ff 	.word	0xfffff7ff
 80034e8:	fffffbff 	.word	0xfffffbff
 80034ec:	40014400 	.word	0x40014400
 80034f0:	40014800 	.word	0x40014800
 80034f4:	ffffefff 	.word	0xffffefff
 80034f8:	ffffdfff 	.word	0xffffdfff

080034fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4a24      	ldr	r2, [pc, #144]	@ (80035a4 <TIM_OC4_SetConfig+0xa8>)
 8003512:	401a      	ands	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a20      	ldr	r2, [pc, #128]	@ (80035a8 <TIM_OC4_SetConfig+0xac>)
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	4a1f      	ldr	r2, [pc, #124]	@ (80035ac <TIM_OC4_SetConfig+0xb0>)
 8003530:	4013      	ands	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	021b      	lsls	r3, r3, #8
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	4313      	orrs	r3, r2
 800353e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	4a1b      	ldr	r2, [pc, #108]	@ (80035b0 <TIM_OC4_SetConfig+0xb4>)
 8003544:	4013      	ands	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	031b      	lsls	r3, r3, #12
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4313      	orrs	r3, r2
 8003552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a17      	ldr	r2, [pc, #92]	@ (80035b4 <TIM_OC4_SetConfig+0xb8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d007      	beq.n	800356c <TIM_OC4_SetConfig+0x70>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a16      	ldr	r2, [pc, #88]	@ (80035b8 <TIM_OC4_SetConfig+0xbc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d003      	beq.n	800356c <TIM_OC4_SetConfig+0x70>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a15      	ldr	r2, [pc, #84]	@ (80035bc <TIM_OC4_SetConfig+0xc0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d109      	bne.n	8003580 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4a14      	ldr	r2, [pc, #80]	@ (80035c0 <TIM_OC4_SetConfig+0xc4>)
 8003570:	4013      	ands	r3, r2
 8003572:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	019b      	lsls	r3, r3, #6
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	4313      	orrs	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	621a      	str	r2, [r3, #32]
}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b006      	add	sp, #24
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	ffffefff 	.word	0xffffefff
 80035a8:	ffff8fff 	.word	0xffff8fff
 80035ac:	fffffcff 	.word	0xfffffcff
 80035b0:	ffffdfff 	.word	0xffffdfff
 80035b4:	40012c00 	.word	0x40012c00
 80035b8:	40014400 	.word	0x40014400
 80035bc:	40014800 	.word	0x40014800
 80035c0:	ffffbfff 	.word	0xffffbfff

080035c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	2201      	movs	r2, #1
 80035dc:	4393      	bics	r3, r2
 80035de:	001a      	movs	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	22f0      	movs	r2, #240	@ 0xf0
 80035ee:	4393      	bics	r3, r2
 80035f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	220a      	movs	r2, #10
 8003600:	4393      	bics	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	46c0      	nop			@ (mov r8, r8)
 800361a:	46bd      	mov	sp, r7
 800361c:	b006      	add	sp, #24
 800361e:	bd80      	pop	{r7, pc}

08003620 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	2210      	movs	r2, #16
 8003638:	4393      	bics	r3, r2
 800363a:	001a      	movs	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	699b      	ldr	r3, [r3, #24]
 8003644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4a0d      	ldr	r2, [pc, #52]	@ (8003680 <TIM_TI2_ConfigInputStage+0x60>)
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	031b      	lsls	r3, r3, #12
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	22a0      	movs	r2, #160	@ 0xa0
 800365c:	4393      	bics	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	4313      	orrs	r3, r2
 8003668:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	697a      	ldr	r2, [r7, #20]
 8003674:	621a      	str	r2, [r3, #32]
}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b006      	add	sp, #24
 800367c:	bd80      	pop	{r7, pc}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	ffff0fff 	.word	0xffff0fff

08003684 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2270      	movs	r2, #112	@ 0x70
 8003698:	4393      	bics	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	2207      	movs	r2, #7
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	609a      	str	r2, [r3, #8]
}
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b004      	add	sp, #16
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
 80036c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	4a09      	ldr	r2, [pc, #36]	@ (80036f4 <TIM_ETR_SetConfig+0x3c>)
 80036d0:	4013      	ands	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	021a      	lsls	r2, r3, #8
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	431a      	orrs	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4313      	orrs	r3, r2
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	697a      	ldr	r2, [r7, #20]
 80036ea:	609a      	str	r2, [r3, #8]
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b006      	add	sp, #24
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	ffff00ff 	.word	0xffff00ff

080036f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	221f      	movs	r2, #31
 8003708:	4013      	ands	r3, r2
 800370a:	2201      	movs	r2, #1
 800370c:	409a      	lsls	r2, r3
 800370e:	0013      	movs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	43d2      	mvns	r2, r2
 800371a:	401a      	ands	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	211f      	movs	r1, #31
 8003728:	400b      	ands	r3, r1
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4099      	lsls	r1, r3
 800372e:	000b      	movs	r3, r1
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	621a      	str	r2, [r3, #32]
}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	46bd      	mov	sp, r7
 800373a:	b006      	add	sp, #24
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	223c      	movs	r2, #60	@ 0x3c
 800374e:	5c9b      	ldrb	r3, [r3, r2]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003754:	2302      	movs	r3, #2
 8003756:	e042      	b.n	80037de <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223c      	movs	r2, #60	@ 0x3c
 800375c:	2101      	movs	r1, #1
 800375e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	223d      	movs	r2, #61	@ 0x3d
 8003764:	2102      	movs	r1, #2
 8003766:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2270      	movs	r2, #112	@ 0x70
 800377c:	4393      	bics	r3, r2
 800377e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4313      	orrs	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a14      	ldr	r2, [pc, #80]	@ (80037e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00a      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	2380      	movs	r3, #128	@ 0x80
 80037a2:	05db      	lsls	r3, r3, #23
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d004      	beq.n	80037b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0f      	ldr	r2, [pc, #60]	@ (80037ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d10c      	bne.n	80037cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	2280      	movs	r2, #128	@ 0x80
 80037b6:	4393      	bics	r3, r2
 80037b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	223d      	movs	r2, #61	@ 0x3d
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	223c      	movs	r2, #60	@ 0x3c
 80037d8:	2100      	movs	r1, #0
 80037da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40000400 	.word	0x40000400

080037f0 <memset>:
 80037f0:	0003      	movs	r3, r0
 80037f2:	1882      	adds	r2, r0, r2
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d100      	bne.n	80037fa <memset+0xa>
 80037f8:	4770      	bx	lr
 80037fa:	7019      	strb	r1, [r3, #0]
 80037fc:	3301      	adds	r3, #1
 80037fe:	e7f9      	b.n	80037f4 <memset+0x4>

08003800 <__libc_init_array>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	2600      	movs	r6, #0
 8003804:	4c0c      	ldr	r4, [pc, #48]	@ (8003838 <__libc_init_array+0x38>)
 8003806:	4d0d      	ldr	r5, [pc, #52]	@ (800383c <__libc_init_array+0x3c>)
 8003808:	1b64      	subs	r4, r4, r5
 800380a:	10a4      	asrs	r4, r4, #2
 800380c:	42a6      	cmp	r6, r4
 800380e:	d109      	bne.n	8003824 <__libc_init_array+0x24>
 8003810:	2600      	movs	r6, #0
 8003812:	f000 f819 	bl	8003848 <_init>
 8003816:	4c0a      	ldr	r4, [pc, #40]	@ (8003840 <__libc_init_array+0x40>)
 8003818:	4d0a      	ldr	r5, [pc, #40]	@ (8003844 <__libc_init_array+0x44>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	42a6      	cmp	r6, r4
 8003820:	d105      	bne.n	800382e <__libc_init_array+0x2e>
 8003822:	bd70      	pop	{r4, r5, r6, pc}
 8003824:	00b3      	lsls	r3, r6, #2
 8003826:	58eb      	ldr	r3, [r5, r3]
 8003828:	4798      	blx	r3
 800382a:	3601      	adds	r6, #1
 800382c:	e7ee      	b.n	800380c <__libc_init_array+0xc>
 800382e:	00b3      	lsls	r3, r6, #2
 8003830:	58eb      	ldr	r3, [r5, r3]
 8003832:	4798      	blx	r3
 8003834:	3601      	adds	r6, #1
 8003836:	e7f2      	b.n	800381e <__libc_init_array+0x1e>
 8003838:	080038bc 	.word	0x080038bc
 800383c:	080038bc 	.word	0x080038bc
 8003840:	080038c0 	.word	0x080038c0
 8003844:	080038bc 	.word	0x080038bc

08003848 <_init>:
 8003848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800384a:	46c0      	nop			@ (mov r8, r8)
 800384c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800384e:	bc08      	pop	{r3}
 8003850:	469e      	mov	lr, r3
 8003852:	4770      	bx	lr

08003854 <_fini>:
 8003854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003856:	46c0      	nop			@ (mov r8, r8)
 8003858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385a:	bc08      	pop	{r3}
 800385c:	469e      	mov	lr, r3
 800385e:	4770      	bx	lr
