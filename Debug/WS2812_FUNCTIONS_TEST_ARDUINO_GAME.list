
WS2812_FUNCTIONS_TEST_ARDUINO_GAME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003544  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08003604  08003604  00004604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800366c  0800366c  00005014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800366c  0800366c  00005014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800366c  0800366c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800366c  0800366c  0000466c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003670  08003670  00004670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003674  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  20000014  08003688  00005014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008c0  08003688  000058c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000833a  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000187f  00000000  00000000  0000d376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0000ebf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000792  00000000  00000000  0000f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ff2b  00000000  00000000  0000fd4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aacb  00000000  00000000  0001fc75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006247d  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008cbbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002300  00000000  00000000  0008cc00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  0008ef00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035ec 	.word	0x080035ec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080035ec 	.word	0x080035ec

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_TIM_PWM_PulseFinishedCallback>:
uint16_t pwmData[24 * noOfLEDs]; // Bu dizi main.c'de tanımlı olmalı

// -----------------------------------------------------------
// WS2812 TEST FONSKIYONLARI
// -----------------------------------------------------------
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_1);
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 80003fe:	2100      	movs	r1, #0
 8000400:	0018      	movs	r0, r3
 8000402:	f002 f9f7 	bl	80027f4 <HAL_TIM_PWM_Stop_DMA>
	htim3.Instance->CCR1 = 0;
 8000406:	4b04      	ldr	r3, [pc, #16]	@ (8000418 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2200      	movs	r2, #0
 800040c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	46bd      	mov	sp, r7
 8000412:	b002      	add	sp, #8
 8000414:	bd80      	pop	{r7, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	20000030 	.word	0x20000030

0800041c <setLED>:
	for (int i = 0; i < 24 * noOfLEDs; i++)
		pwmData[i] = 2;
}

// led'in rengini ayarlamak icin fonksiyon
void setLED(int LEDposition, int Red, int Green, int Blue) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b088      	sub	sp, #32
 8000420:	af00      	add	r7, sp, #0
 8000422:	60f8      	str	r0, [r7, #12]
 8000424:	60b9      	str	r1, [r7, #8]
 8000426:	607a      	str	r2, [r7, #4]
 8000428:	603b      	str	r3, [r7, #0]
	for (int i = 7; i >= 0; i--) // Set the first 8 out of 24 to green
 800042a:	2307      	movs	r3, #7
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	e017      	b.n	8000460 <setLED+0x44>
			{
		pwmData[24 * LEDposition + 7 - i] = ((Green >> i) & 1) + 1;
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	69fb      	ldr	r3, [r7, #28]
 8000434:	411a      	asrs	r2, r3
 8000436:	0013      	movs	r3, r2
 8000438:	b29b      	uxth	r3, r3
 800043a:	2201      	movs	r2, #1
 800043c:	4013      	ands	r3, r2
 800043e:	b299      	uxth	r1, r3
 8000440:	68fa      	ldr	r2, [r7, #12]
 8000442:	0013      	movs	r3, r2
 8000444:	005b      	lsls	r3, r3, #1
 8000446:	189b      	adds	r3, r3, r2
 8000448:	00db      	lsls	r3, r3, #3
 800044a:	1dda      	adds	r2, r3, #7
 800044c:	69fb      	ldr	r3, [r7, #28]
 800044e:	1ad2      	subs	r2, r2, r3
 8000450:	1c4b      	adds	r3, r1, #1
 8000452:	b299      	uxth	r1, r3
 8000454:	4b25      	ldr	r3, [pc, #148]	@ (80004ec <setLED+0xd0>)
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	52d1      	strh	r1, [r2, r3]
	for (int i = 7; i >= 0; i--) // Set the first 8 out of 24 to green
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b01      	subs	r3, #1
 800045e:	61fb      	str	r3, [r7, #28]
 8000460:	69fb      	ldr	r3, [r7, #28]
 8000462:	2b00      	cmp	r3, #0
 8000464:	dae4      	bge.n	8000430 <setLED+0x14>
	}
	for (int i = 7; i >= 0; i--) // Set the second 8 out of 24 to red
 8000466:	2307      	movs	r3, #7
 8000468:	61bb      	str	r3, [r7, #24]
 800046a:	e018      	b.n	800049e <setLED+0x82>
			{
		pwmData[24 * LEDposition + 15 - i] = ((Red >> i) & 1) + 1;
 800046c:	68ba      	ldr	r2, [r7, #8]
 800046e:	69bb      	ldr	r3, [r7, #24]
 8000470:	411a      	asrs	r2, r3
 8000472:	0013      	movs	r3, r2
 8000474:	b29b      	uxth	r3, r3
 8000476:	2201      	movs	r2, #1
 8000478:	4013      	ands	r3, r2
 800047a:	b299      	uxth	r1, r3
 800047c:	68fa      	ldr	r2, [r7, #12]
 800047e:	0013      	movs	r3, r2
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	189b      	adds	r3, r3, r2
 8000484:	00db      	lsls	r3, r3, #3
 8000486:	330f      	adds	r3, #15
 8000488:	001a      	movs	r2, r3
 800048a:	69bb      	ldr	r3, [r7, #24]
 800048c:	1ad2      	subs	r2, r2, r3
 800048e:	1c4b      	adds	r3, r1, #1
 8000490:	b299      	uxth	r1, r3
 8000492:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <setLED+0xd0>)
 8000494:	0052      	lsls	r2, r2, #1
 8000496:	52d1      	strh	r1, [r2, r3]
	for (int i = 7; i >= 0; i--) // Set the second 8 out of 24 to red
 8000498:	69bb      	ldr	r3, [r7, #24]
 800049a:	3b01      	subs	r3, #1
 800049c:	61bb      	str	r3, [r7, #24]
 800049e:	69bb      	ldr	r3, [r7, #24]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	dae3      	bge.n	800046c <setLED+0x50>
	}
	for (int i = 7; i >= 0; i--) // Set the third 8 out of 24 to blue
 80004a4:	2307      	movs	r3, #7
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	e018      	b.n	80004dc <setLED+0xc0>
			{
		pwmData[24 * LEDposition + 23 - i] = ((Blue >> i) & 1) + 1;
 80004aa:	683a      	ldr	r2, [r7, #0]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	411a      	asrs	r2, r3
 80004b0:	0013      	movs	r3, r2
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	2201      	movs	r2, #1
 80004b6:	4013      	ands	r3, r2
 80004b8:	b299      	uxth	r1, r3
 80004ba:	68fa      	ldr	r2, [r7, #12]
 80004bc:	0013      	movs	r3, r2
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	189b      	adds	r3, r3, r2
 80004c2:	00db      	lsls	r3, r3, #3
 80004c4:	3317      	adds	r3, #23
 80004c6:	001a      	movs	r2, r3
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	1ad2      	subs	r2, r2, r3
 80004cc:	1c4b      	adds	r3, r1, #1
 80004ce:	b299      	uxth	r1, r3
 80004d0:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <setLED+0xd0>)
 80004d2:	0052      	lsls	r2, r2, #1
 80004d4:	52d1      	strh	r1, [r2, r3]
	for (int i = 7; i >= 0; i--) // Set the third 8 out of 24 to blue
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	3b01      	subs	r3, #1
 80004da:	617b      	str	r3, [r7, #20]
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	dae3      	bge.n	80004aa <setLED+0x8e>
	}
}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b008      	add	sp, #32
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	200000bc 	.word	0x200000bc

080004f0 <ws2812Send>:

// DMA baslatan fonksiyon
void ws2812Send(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) pwmData,
 80004f4:	23f0      	movs	r3, #240	@ 0xf0
 80004f6:	009b      	lsls	r3, r3, #2
 80004f8:	4a03      	ldr	r2, [pc, #12]	@ (8000508 <ws2812Send+0x18>)
 80004fa:	4804      	ldr	r0, [pc, #16]	@ (800050c <ws2812Send+0x1c>)
 80004fc:	2100      	movs	r1, #0
 80004fe:	f001 ffcf 	bl	80024a0 <HAL_TIM_PWM_Start_DMA>
			24 * noOfLEDs);
}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	200000bc 	.word	0x200000bc
 800050c:	20000030 	.word	0x20000030

08000510 <hsvToRgb>:

RGBColor led_strip[NUM_LEDS]; // LED'lerin renklerini saklayan gölge dizi
uint8_t global_brightness = BRIGHTNESS; // Global parlaklık

// HSV'den RGB'ye renk dönüşüm fonksiyonu
void hsvToRgb(uint8_t h, uint8_t s, uint8_t v, RGBColor* rgb) {
 8000510:	b5b0      	push	{r4, r5, r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	0004      	movs	r4, r0
 8000518:	0008      	movs	r0, r1
 800051a:	0011      	movs	r1, r2
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	1dfb      	adds	r3, r7, #7
 8000520:	1c22      	adds	r2, r4, #0
 8000522:	701a      	strb	r2, [r3, #0]
 8000524:	1dbb      	adds	r3, r7, #6
 8000526:	1c02      	adds	r2, r0, #0
 8000528:	701a      	strb	r2, [r3, #0]
 800052a:	1d7b      	adds	r3, r7, #5
 800052c:	1c0a      	adds	r2, r1, #0
 800052e:	701a      	strb	r2, [r3, #0]
    uint8_t region, remainder, p, q, t;

    if (s == 0) {
 8000530:	1dbb      	adds	r3, r7, #6
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d10c      	bne.n	8000552 <hsvToRgb+0x42>
        rgb->r = v;
 8000538:	683b      	ldr	r3, [r7, #0]
 800053a:	1d7a      	adds	r2, r7, #5
 800053c:	7812      	ldrb	r2, [r2, #0]
 800053e:	701a      	strb	r2, [r3, #0]
        rgb->g = v;
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	1d7a      	adds	r2, r7, #5
 8000544:	7812      	ldrb	r2, [r2, #0]
 8000546:	705a      	strb	r2, [r3, #1]
        rgb->b = v;
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	1d7a      	adds	r2, r7, #5
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	709a      	strb	r2, [r3, #2]
        return;
 8000550:	e0af      	b.n	80006b2 <hsvToRgb+0x1a2>
    }

    region = h / 43; // 256 / 6 ~= 42.66, so h is 0-255 for 6 regions
 8000552:	250f      	movs	r5, #15
 8000554:	197c      	adds	r4, r7, r5
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	212b      	movs	r1, #43	@ 0x2b
 800055c:	0018      	movs	r0, r3
 800055e:	f7ff fdd3 	bl	8000108 <__udivsi3>
 8000562:	0003      	movs	r3, r0
 8000564:	7023      	strb	r3, [r4, #0]
    remainder = (h - (region * 43)) * 6;
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	7819      	ldrb	r1, [r3, #0]
 800056a:	002c      	movs	r4, r5
 800056c:	193b      	adds	r3, r7, r4
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	0013      	movs	r3, r2
 8000572:	069b      	lsls	r3, r3, #26
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	009b      	lsls	r3, r3, #2
 8000578:	189b      	adds	r3, r3, r2
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	189b      	adds	r3, r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	189b      	adds	r3, r3, r2
 8000582:	18cb      	adds	r3, r1, r3
 8000584:	b2db      	uxtb	r3, r3
 8000586:	200e      	movs	r0, #14
 8000588:	183a      	adds	r2, r7, r0
 800058a:	1c19      	adds	r1, r3, #0
 800058c:	1c0b      	adds	r3, r1, #0
 800058e:	18db      	adds	r3, r3, r3
 8000590:	185b      	adds	r3, r3, r1
 8000592:	18db      	adds	r3, r3, r3
 8000594:	7013      	strb	r3, [r2, #0]

    p = (v * (255 - s)) >> 8;
 8000596:	1d7b      	adds	r3, r7, #5
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	1dba      	adds	r2, r7, #6
 800059c:	7812      	ldrb	r2, [r2, #0]
 800059e:	21ff      	movs	r1, #255	@ 0xff
 80005a0:	1a8a      	subs	r2, r1, r2
 80005a2:	4353      	muls	r3, r2
 80005a4:	121a      	asrs	r2, r3, #8
 80005a6:	230d      	movs	r3, #13
 80005a8:	18fb      	adds	r3, r7, r3
 80005aa:	701a      	strb	r2, [r3, #0]
    q = (v * (255 - ((s * remainder) >> 8))) >> 8;
 80005ac:	1d7b      	adds	r3, r7, #5
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	1dba      	adds	r2, r7, #6
 80005b2:	7812      	ldrb	r2, [r2, #0]
 80005b4:	1839      	adds	r1, r7, r0
 80005b6:	7809      	ldrb	r1, [r1, #0]
 80005b8:	434a      	muls	r2, r1
 80005ba:	1212      	asrs	r2, r2, #8
 80005bc:	21ff      	movs	r1, #255	@ 0xff
 80005be:	1a8a      	subs	r2, r1, r2
 80005c0:	4353      	muls	r3, r2
 80005c2:	121a      	asrs	r2, r3, #8
 80005c4:	230c      	movs	r3, #12
 80005c6:	18fb      	adds	r3, r7, r3
 80005c8:	701a      	strb	r2, [r3, #0]
    t = (v * (255 - ((s * (255 - remainder)) >> 8))) >> 8;
 80005ca:	1d7b      	adds	r3, r7, #5
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	1dba      	adds	r2, r7, #6
 80005d0:	7812      	ldrb	r2, [r2, #0]
 80005d2:	1839      	adds	r1, r7, r0
 80005d4:	7809      	ldrb	r1, [r1, #0]
 80005d6:	20ff      	movs	r0, #255	@ 0xff
 80005d8:	1a41      	subs	r1, r0, r1
 80005da:	434a      	muls	r2, r1
 80005dc:	1212      	asrs	r2, r2, #8
 80005de:	21ff      	movs	r1, #255	@ 0xff
 80005e0:	1a8a      	subs	r2, r1, r2
 80005e2:	4353      	muls	r3, r2
 80005e4:	121a      	asrs	r2, r3, #8
 80005e6:	230b      	movs	r3, #11
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	701a      	strb	r2, [r3, #0]

    switch (region) {
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d84f      	bhi.n	8000694 <hsvToRgb+0x184>
 80005f4:	009a      	lsls	r2, r3, #2
 80005f6:	4b30      	ldr	r3, [pc, #192]	@ (80006b8 <hsvToRgb+0x1a8>)
 80005f8:	18d3      	adds	r3, r2, r3
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	469f      	mov	pc, r3
        case 0: rgb->r = v; rgb->g = t; rgb->b = p; break;
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	1d7a      	adds	r2, r7, #5
 8000602:	7812      	ldrb	r2, [r2, #0]
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	220b      	movs	r2, #11
 800060a:	18ba      	adds	r2, r7, r2
 800060c:	7812      	ldrb	r2, [r2, #0]
 800060e:	705a      	strb	r2, [r3, #1]
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	220d      	movs	r2, #13
 8000614:	18ba      	adds	r2, r7, r2
 8000616:	7812      	ldrb	r2, [r2, #0]
 8000618:	709a      	strb	r2, [r3, #2]
 800061a:	e04a      	b.n	80006b2 <hsvToRgb+0x1a2>
        case 1: rgb->r = q; rgb->g = v; rgb->b = p; break;
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	220c      	movs	r2, #12
 8000620:	18ba      	adds	r2, r7, r2
 8000622:	7812      	ldrb	r2, [r2, #0]
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	1d7a      	adds	r2, r7, #5
 800062a:	7812      	ldrb	r2, [r2, #0]
 800062c:	705a      	strb	r2, [r3, #1]
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	220d      	movs	r2, #13
 8000632:	18ba      	adds	r2, r7, r2
 8000634:	7812      	ldrb	r2, [r2, #0]
 8000636:	709a      	strb	r2, [r3, #2]
 8000638:	e03b      	b.n	80006b2 <hsvToRgb+0x1a2>
        case 2: rgb->r = p; rgb->g = v; rgb->b = t; break;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	220d      	movs	r2, #13
 800063e:	18ba      	adds	r2, r7, r2
 8000640:	7812      	ldrb	r2, [r2, #0]
 8000642:	701a      	strb	r2, [r3, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	1d7a      	adds	r2, r7, #5
 8000648:	7812      	ldrb	r2, [r2, #0]
 800064a:	705a      	strb	r2, [r3, #1]
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	220b      	movs	r2, #11
 8000650:	18ba      	adds	r2, r7, r2
 8000652:	7812      	ldrb	r2, [r2, #0]
 8000654:	709a      	strb	r2, [r3, #2]
 8000656:	e02c      	b.n	80006b2 <hsvToRgb+0x1a2>
        case 3: rgb->r = p; rgb->g = q; rgb->b = v; break;
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	220d      	movs	r2, #13
 800065c:	18ba      	adds	r2, r7, r2
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	701a      	strb	r2, [r3, #0]
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	220c      	movs	r2, #12
 8000666:	18ba      	adds	r2, r7, r2
 8000668:	7812      	ldrb	r2, [r2, #0]
 800066a:	705a      	strb	r2, [r3, #1]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	1d7a      	adds	r2, r7, #5
 8000670:	7812      	ldrb	r2, [r2, #0]
 8000672:	709a      	strb	r2, [r3, #2]
 8000674:	e01d      	b.n	80006b2 <hsvToRgb+0x1a2>
        case 4: rgb->r = t; rgb->g = p; rgb->b = v; break;
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	220b      	movs	r2, #11
 800067a:	18ba      	adds	r2, r7, r2
 800067c:	7812      	ldrb	r2, [r2, #0]
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	220d      	movs	r2, #13
 8000684:	18ba      	adds	r2, r7, r2
 8000686:	7812      	ldrb	r2, [r2, #0]
 8000688:	705a      	strb	r2, [r3, #1]
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	1d7a      	adds	r2, r7, #5
 800068e:	7812      	ldrb	r2, [r2, #0]
 8000690:	709a      	strb	r2, [r3, #2]
 8000692:	e00e      	b.n	80006b2 <hsvToRgb+0x1a2>
        default:rgb->r = v; rgb->g = p; rgb->b = q; break; // case 5
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	1d7a      	adds	r2, r7, #5
 8000698:	7812      	ldrb	r2, [r2, #0]
 800069a:	701a      	strb	r2, [r3, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	220d      	movs	r2, #13
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	7812      	ldrb	r2, [r2, #0]
 80006a4:	705a      	strb	r2, [r3, #1]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	220c      	movs	r2, #12
 80006aa:	18ba      	adds	r2, r7, r2
 80006ac:	7812      	ldrb	r2, [r2, #0]
 80006ae:	709a      	strb	r2, [r3, #2]
 80006b0:	46c0      	nop			@ (mov r8, r8)
    }
}
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b004      	add	sp, #16
 80006b6:	bdb0      	pop	{r4, r5, r7, pc}
 80006b8:	08003604 	.word	0x08003604

080006bc <set_led_color_in_strip>:

// Gölge LED dizisindeki bir LED'in rengini ayarlar
void set_led_color_in_strip(int index, uint8_t r, uint8_t g, uint8_t b) {
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
 80006c4:	000c      	movs	r4, r1
 80006c6:	0010      	movs	r0, r2
 80006c8:	0019      	movs	r1, r3
 80006ca:	1cfb      	adds	r3, r7, #3
 80006cc:	1c22      	adds	r2, r4, #0
 80006ce:	701a      	strb	r2, [r3, #0]
 80006d0:	1cbb      	adds	r3, r7, #2
 80006d2:	1c02      	adds	r2, r0, #0
 80006d4:	701a      	strb	r2, [r3, #0]
 80006d6:	1c7b      	adds	r3, r7, #1
 80006d8:	1c0a      	adds	r2, r1, #0
 80006da:	701a      	strb	r2, [r3, #0]
    if (index >= 0 && index < NUM_LEDS) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	db1e      	blt.n	8000720 <set_led_color_in_strip+0x64>
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2b27      	cmp	r3, #39	@ 0x27
 80006e6:	dc1b      	bgt.n	8000720 <set_led_color_in_strip+0x64>
        led_strip[index].r = r;
 80006e8:	490f      	ldr	r1, [pc, #60]	@ (8000728 <set_led_color_in_strip+0x6c>)
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	0013      	movs	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	189b      	adds	r3, r3, r2
 80006f2:	1cfa      	adds	r2, r7, #3
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	545a      	strb	r2, [r3, r1]
        led_strip[index].g = g;
 80006f8:	490b      	ldr	r1, [pc, #44]	@ (8000728 <set_led_color_in_strip+0x6c>)
 80006fa:	687a      	ldr	r2, [r7, #4]
 80006fc:	0013      	movs	r3, r2
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	189b      	adds	r3, r3, r2
 8000702:	18cb      	adds	r3, r1, r3
 8000704:	3301      	adds	r3, #1
 8000706:	1cba      	adds	r2, r7, #2
 8000708:	7812      	ldrb	r2, [r2, #0]
 800070a:	701a      	strb	r2, [r3, #0]
        led_strip[index].b = b;
 800070c:	4906      	ldr	r1, [pc, #24]	@ (8000728 <set_led_color_in_strip+0x6c>)
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	0013      	movs	r3, r2
 8000712:	005b      	lsls	r3, r3, #1
 8000714:	189b      	adds	r3, r3, r2
 8000716:	18cb      	adds	r3, r1, r3
 8000718:	3302      	adds	r3, #2
 800071a:	1c7a      	adds	r2, r7, #1
 800071c:	7812      	ldrb	r2, [r2, #0]
 800071e:	701a      	strb	r2, [r3, #0]
    }
}
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	46bd      	mov	sp, r7
 8000724:	b003      	add	sp, #12
 8000726:	bd90      	pop	{r4, r7, pc}
 8000728:	20000844 	.word	0x20000844

0800072c <fill_strip_solid>:

// Tüm gölge LED dizisini belirli bir renkle doldurur
void fill_strip_solid(uint8_t r, uint8_t g, uint8_t b) {
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	0004      	movs	r4, r0
 8000734:	0008      	movs	r0, r1
 8000736:	0011      	movs	r1, r2
 8000738:	1dfb      	adds	r3, r7, #7
 800073a:	1c22      	adds	r2, r4, #0
 800073c:	701a      	strb	r2, [r3, #0]
 800073e:	1dbb      	adds	r3, r7, #6
 8000740:	1c02      	adds	r2, r0, #0
 8000742:	701a      	strb	r2, [r3, #0]
 8000744:	1d7b      	adds	r3, r7, #5
 8000746:	1c0a      	adds	r2, r1, #0
 8000748:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 800074a:	2300      	movs	r3, #0
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e00c      	b.n	800076a <fill_strip_solid+0x3e>
        set_led_color_in_strip(i, r, g, b);
 8000750:	1d7b      	adds	r3, r7, #5
 8000752:	781c      	ldrb	r4, [r3, #0]
 8000754:	1dbb      	adds	r3, r7, #6
 8000756:	781a      	ldrb	r2, [r3, #0]
 8000758:	1dfb      	adds	r3, r7, #7
 800075a:	7819      	ldrb	r1, [r3, #0]
 800075c:	68f8      	ldr	r0, [r7, #12]
 800075e:	0023      	movs	r3, r4
 8000760:	f7ff ffac 	bl	80006bc <set_led_color_in_strip>
    for (int i = 0; i < NUM_LEDS; i++) {
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3301      	adds	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	2b27      	cmp	r3, #39	@ 0x27
 800076e:	ddef      	ble.n	8000750 <fill_strip_solid+0x24>
    }
}
 8000770:	46c0      	nop			@ (mov r8, r8)
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b005      	add	sp, #20
 8000778:	bd90      	pop	{r4, r7, pc}
	...

0800077c <update_led_strip_to_physical_leds>:

// Gölge LED dizisindeki renkleri parlaklık ayarıyla fiziksel LED'lere gönderir
void update_led_strip_to_physical_leds(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++) {
 8000782:	2300      	movs	r3, #0
 8000784:	607b      	str	r3, [r7, #4]
 8000786:	e045      	b.n	8000814 <update_led_strip_to_physical_leds+0x98>
        uint8_t r_adj = ((uint16_t)led_strip[i].r * global_brightness) / 255;
 8000788:	4927      	ldr	r1, [pc, #156]	@ (8000828 <update_led_strip_to_physical_leds+0xac>)
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	0013      	movs	r3, r2
 800078e:	005b      	lsls	r3, r3, #1
 8000790:	189b      	adds	r3, r3, r2
 8000792:	5c5b      	ldrb	r3, [r3, r1]
 8000794:	001a      	movs	r2, r3
 8000796:	4b25      	ldr	r3, [pc, #148]	@ (800082c <update_led_strip_to_physical_leds+0xb0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	4353      	muls	r3, r2
 800079c:	21ff      	movs	r1, #255	@ 0xff
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fd3c 	bl	800021c <__divsi3>
 80007a4:	0003      	movs	r3, r0
 80007a6:	001a      	movs	r2, r3
 80007a8:	1cfb      	adds	r3, r7, #3
 80007aa:	701a      	strb	r2, [r3, #0]
        uint8_t g_adj = ((uint16_t)led_strip[i].g * global_brightness) / 255;
 80007ac:	491e      	ldr	r1, [pc, #120]	@ (8000828 <update_led_strip_to_physical_leds+0xac>)
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	0013      	movs	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	189b      	adds	r3, r3, r2
 80007b6:	18cb      	adds	r3, r1, r3
 80007b8:	3301      	adds	r3, #1
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	001a      	movs	r2, r3
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <update_led_strip_to_physical_leds+0xb0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4353      	muls	r3, r2
 80007c4:	21ff      	movs	r1, #255	@ 0xff
 80007c6:	0018      	movs	r0, r3
 80007c8:	f7ff fd28 	bl	800021c <__divsi3>
 80007cc:	0003      	movs	r3, r0
 80007ce:	001a      	movs	r2, r3
 80007d0:	1cbb      	adds	r3, r7, #2
 80007d2:	701a      	strb	r2, [r3, #0]
        uint8_t b_adj = ((uint16_t)led_strip[i].b * global_brightness) / 255;
 80007d4:	4914      	ldr	r1, [pc, #80]	@ (8000828 <update_led_strip_to_physical_leds+0xac>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	0013      	movs	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	189b      	adds	r3, r3, r2
 80007de:	18cb      	adds	r3, r1, r3
 80007e0:	3302      	adds	r3, #2
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b11      	ldr	r3, [pc, #68]	@ (800082c <update_led_strip_to_physical_leds+0xb0>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	4353      	muls	r3, r2
 80007ec:	21ff      	movs	r1, #255	@ 0xff
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fd14 	bl	800021c <__divsi3>
 80007f4:	0003      	movs	r3, r0
 80007f6:	001a      	movs	r2, r3
 80007f8:	1c7b      	adds	r3, r7, #1
 80007fa:	701a      	strb	r2, [r3, #0]
        // Eğer FastLED RGB sırasında gönderiyorsa ve WS2811'iniz RGB ise, setLED'e R,G,B vermek doğrudur.
        // Eğer WS2811'iniz GRB ise ve FastLED RGB gönderiyorsa, FastLED kendi içinde çeviriyordu.
        // Sizin setLED fonksiyonunuzun argümanları (Red, Green, Blue) ise ve WS2811'iniz GRB ise,
        // setLED(pos, Kirmizi, Yesil, Mavi) -> pwmData'ya Yesil, Kirmizi, Mavi bitlerini yazar.
        // Bu durumda bizim RGBColor {r,g,b} yapımızdaki değerleri doğrudan kullanabiliriz.
        setLED(i, r_adj, g_adj, b_adj);
 80007fc:	1cfb      	adds	r3, r7, #3
 80007fe:	7819      	ldrb	r1, [r3, #0]
 8000800:	1cbb      	adds	r3, r7, #2
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	1c7b      	adds	r3, r7, #1
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f7ff fe07 	bl	800041c <setLED>
    for (int i = 0; i < NUM_LEDS; i++) {
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3301      	adds	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b27      	cmp	r3, #39	@ 0x27
 8000818:	ddb6      	ble.n	8000788 <update_led_strip_to_physical_leds+0xc>
    }
    ws2812Send();
 800081a:	f7ff fe69 	bl	80004f0 <ws2812Send>
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b002      	add	sp, #8
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	20000844 	.word	0x20000844
 800082c:	20000006 	.word	0x20000006

08000830 <game_setup>:


// Oyun başlangıç ayarları
void game_setup(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    // STM32 HAL başlatmaları (GPIO, TIM, DMA) main() içinde yapılmış olmalı.
    // Oyun mantığı için başlangıç ayarları:
    fill_strip_solid(0, 0, 0); // Tüm LED'leri siyah yap
 8000834:	2200      	movs	r2, #0
 8000836:	2100      	movs	r1, #0
 8000838:	2000      	movs	r0, #0
 800083a:	f7ff ff77 	bl	800072c <fill_strip_solid>
    update_led_strip_to_physical_leds(); // Siyah rengi LED'lere gönder
 800083e:	f7ff ff9d 	bl	800077c <update_led_strip_to_physical_leds>
    // Gerekirse STM32 UART başlatma kodları eklenebilir (Serial.begin eşdeğeri)
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <game_loop>:

// Ana oyun döngüsü
void game_loop(void) {
 8000848:	b5b0      	push	{r4, r5, r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
    GPIO_PinState currentButtonState = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800084e:	250b      	movs	r5, #11
 8000850:	197c      	adds	r4, r7, r5
 8000852:	2390      	movs	r3, #144	@ 0x90
 8000854:	05db      	lsls	r3, r3, #23
 8000856:	2101      	movs	r1, #1
 8000858:	0018      	movs	r0, r3
 800085a:	f001 f91d 	bl	8001a98 <HAL_GPIO_ReadPin>
 800085e:	0003      	movs	r3, r0
 8000860:	7023      	strb	r3, [r4, #0]
    // Orijinal kodda, loop'un başında buttonState kontrol ediliyor ve Playing = false yapılıyordu.
    // Bu, butona basıldığında oyunun durduğu ve sonucun işlendiği anlamına gelir.
    // Sonra buton bırakılana kadar bekleyip Playing = true yapar.

    // Eğer butona basıldıysa (ve oyun oynanıyorsa) veya oyun zaten durmuşsa (önceki basıştan dolayı)
    if (currentButtonState == BUTTON_PRESSED_STATE && Playing) {
 8000862:	197b      	adds	r3, r7, r5
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d109      	bne.n	800087e <game_loop+0x36>
 800086a:	4b75      	ldr	r3, [pc, #468]	@ (8000a40 <game_loop+0x1f8>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d005      	beq.n	800087e <game_loop+0x36>
        Playing = false;    // Oyunu durdur
 8000872:	4b73      	ldr	r3, [pc, #460]	@ (8000a40 <game_loop+0x1f8>)
 8000874:	2200      	movs	r2, #0
 8000876:	701a      	strb	r2, [r3, #0]
        CycleEnded = true;  // Sonucun işlenmesi için bayrağı ayarla
 8000878:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <game_loop+0x1fc>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
    }

    if (!Playing) { // Oyun durmuşsa (buton basılmış ve bırakılmamış olabilir)
 800087e:	4b70      	ldr	r3, [pc, #448]	@ (8000a40 <game_loop+0x1f8>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	4053      	eors	r3, r2
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d100      	bne.n	800088e <game_loop+0x46>
 800088c:	e089      	b.n	80009a2 <game_loop+0x15a>
        // Bu blok, Arduino kodundaki `if (buttonState == HIGH)` içindeki kısma karşılık gelir.
        // Sadece bir kez çalışması gereken win/loss kontrolü
        if (CycleEnded) { // Arduino'daki `if (CycleEnded = true)` (atama) mantığını taklit eder: bir kez çalışır.
 800088e:	4b6d      	ldr	r3, [pc, #436]	@ (8000a44 <game_loop+0x1fc>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d062      	beq.n	800095c <game_loop+0x114>
            // Hedef LED ve seçilen LED dışındaki tüm LED'leri kapat
            for (int i = 0; i < NUM_LEDS; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	61fb      	str	r3, [r7, #28]
 800089a:	e008      	b.n	80008ae <game_loop+0x66>
                set_led_color_in_strip(i, 0, 0, 0); // Siyah
 800089c:	69f8      	ldr	r0, [r7, #28]
 800089e:	2300      	movs	r3, #0
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	f7ff ff0a 	bl	80006bc <set_led_color_in_strip>
            for (int i = 0; i < NUM_LEDS; i++) {
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	3301      	adds	r3, #1
 80008ac:	61fb      	str	r3, [r7, #28]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	2b27      	cmp	r3, #39	@ 0x27
 80008b2:	ddf3      	ble.n	800089c <game_loop+0x54>
            }
            set_led_color_in_strip(CENTER_LED, 255, 0, 0); // Merkez LED Kırmızı
 80008b4:	2300      	movs	r3, #0
 80008b6:	2200      	movs	r2, #0
 80008b8:	21ff      	movs	r1, #255	@ 0xff
 80008ba:	2015      	movs	r0, #21
 80008bc:	f7ff fefe 	bl	80006bc <set_led_color_in_strip>
            set_led_color_in_strip(LEDaddress, 0, 255, 0); // Durdurulan LED Yeşil
 80008c0:	4b61      	ldr	r3, [pc, #388]	@ (8000a48 <game_loop+0x200>)
 80008c2:	6818      	ldr	r0, [r3, #0]
 80008c4:	2300      	movs	r3, #0
 80008c6:	22ff      	movs	r2, #255	@ 0xff
 80008c8:	2100      	movs	r1, #0
 80008ca:	f7ff fef7 	bl	80006bc <set_led_color_in_strip>
            update_led_strip_to_physical_leds();
 80008ce:	f7ff ff55 	bl	800077c <update_led_strip_to_physical_leds>

            int diff = abs(CENTER_LED - LEDaddress);
 80008d2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a48 <game_loop+0x200>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2215      	movs	r2, #21
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	17da      	asrs	r2, r3, #31
 80008dc:	189b      	adds	r3, r3, r2
 80008de:	4053      	eors	r3, r2
 80008e0:	607b      	str	r3, [r7, #4]
            if (diff == 0) { // KAZANDI
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d126      	bne.n	8000936 <game_loop+0xee>
                wonThisRound = true;
 80008e8:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <game_loop+0x204>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
                if (difficulty != MISSION_IMPOSSIBLE) {
 80008ee:	4b58      	ldr	r3, [pc, #352]	@ (8000a50 <game_loop+0x208>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d00b      	beq.n	800090e <game_loop+0xc6>
                    for (int i = 0; i < 2; i++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
 80008fa:	e004      	b.n	8000906 <game_loop+0xbe>
                        play_cylon_animation();
 80008fc:	f000 f984 	bl	8000c08 <play_cylon_animation>
                    for (int i = 0; i < 2; i++) {
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	3301      	adds	r3, #1
 8000904:	61bb      	str	r3, [r7, #24]
 8000906:	69bb      	ldr	r3, [r7, #24]
 8000908:	2b01      	cmp	r3, #1
 800090a:	ddf7      	ble.n	80008fc <game_loop+0xb4>
 800090c:	e00d      	b.n	800092a <game_loop+0xe2>
                    }
                } else { // MISSION_IMPOSSIBLE kazanıldı
                    for (int i = 0; i < 8; i++) {
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
 8000912:	e004      	b.n	800091e <game_loop+0xd6>
                        play_cylon_animation();
 8000914:	f000 f978 	bl	8000c08 <play_cylon_animation>
                    for (int i = 0; i < 8; i++) {
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	2b07      	cmp	r3, #7
 8000922:	ddf7      	ble.n	8000914 <game_loop+0xcc>
                    }
                    difficulty = 0; // Zorluk sıfırlanır (sonra increase_game_difficulty ile 1 olur)
 8000924:	4b4a      	ldr	r3, [pc, #296]	@ (8000a50 <game_loop+0x208>)
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
                }
                increase_game_difficulty();
 800092a:	f000 f8c3 	bl	8000ab4 <increase_game_difficulty>
                wonThisRound = false; // Bir sonraki tur için sıfırla
 800092e:	4b47      	ldr	r3, [pc, #284]	@ (8000a4c <game_loop+0x204>)
 8000930:	2200      	movs	r2, #0
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	e00f      	b.n	8000956 <game_loop+0x10e>
            } else { // KAYBETTİ
                HAL_Delay(1000);
 8000936:	23fa      	movs	r3, #250	@ 0xfa
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fc64 	bl	8001208 <HAL_Delay>
                for (int i = 0; i < 2; i++) {
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	e004      	b.n	8000950 <game_loop+0x108>
                    play_flash_animation();
 8000946:	f000 f8d3 	bl	8000af0 <play_flash_animation>
                for (int i = 0; i < 2; i++) {
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	3301      	adds	r3, #1
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	2b01      	cmp	r3, #1
 8000954:	ddf7      	ble.n	8000946 <game_loop+0xfe>
                }
            }
            CycleEnded = false; // Bu kazanma/kaybetme durumu işlendi
 8000956:	4b3b      	ldr	r3, [pc, #236]	@ (8000a44 <game_loop+0x1fc>)
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
        }

        // Buton bırakılana kadar bekle (yeniden başlatmak için)
        // Arduino kodunda: buttonState = digitalRead(buttonPin); if (buttonState == LOW) { Playing = true; }
        // Biz burada doğrudan güncel durumu okuyoruz.
        GPIO_PinState newButtonStateAfterDelay = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 800095c:	1cfc      	adds	r4, r7, #3
 800095e:	2390      	movs	r3, #144	@ 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2101      	movs	r1, #1
 8000964:	0018      	movs	r0, r3
 8000966:	f001 f897 	bl	8001a98 <HAL_GPIO_ReadPin>
 800096a:	0003      	movs	r3, r0
 800096c:	7023      	strb	r3, [r4, #0]
        if (newButtonStateAfterDelay != BUTTON_PRESSED_STATE) { // Buton bırakıldıysa
 800096e:	1cfb      	adds	r3, r7, #3
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d015      	beq.n	80009a2 <game_loop+0x15a>
            Playing = true;       // Oyunu yeniden başlat
 8000976:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <game_loop+0x1f8>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
            LEDaddress = 0;       // LED adresini sıfırla
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <game_loop+0x200>)
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
            HAL_Delay(250);       // Kısa bir bekleme (Arduino kodundaki gibi)
 8000982:	20fa      	movs	r0, #250	@ 0xfa
 8000984:	f000 fc40 	bl	8001208 <HAL_Delay>

            // Yeni tur için LED'leri hazırla
            fill_strip_solid(0,0,0);
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f7ff fecd 	bl	800072c <fill_strip_solid>
            set_led_color_in_strip(CENTER_LED, 255, 0, 0); // Merkez LED Kırmızı
 8000992:	2300      	movs	r3, #0
 8000994:	2200      	movs	r2, #0
 8000996:	21ff      	movs	r1, #255	@ 0xff
 8000998:	2015      	movs	r0, #21
 800099a:	f7ff fe8f 	bl	80006bc <set_led_color_in_strip>
            // İlk hareket eden LED game_loop'un PLAYING kısmında ayarlanacak.
            update_led_strip_to_physical_leds();
 800099e:	f7ff feed 	bl	800077c <update_led_strip_to_physical_leds>
        }
    }

    // OYNANIŞ MANTIĞI
    if (Playing) {
 80009a2:	4b27      	ldr	r3, [pc, #156]	@ (8000a40 <game_loop+0x1f8>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d045      	beq.n	8000a36 <game_loop+0x1ee>
        for (int i = 0; i < NUM_LEDS; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e008      	b.n	80009c2 <game_loop+0x17a>
            set_led_color_in_strip(i, 0, 0, 0); // Tüm LED'ler siyah
 80009b0:	68f8      	ldr	r0, [r7, #12]
 80009b2:	2300      	movs	r3, #0
 80009b4:	2200      	movs	r2, #0
 80009b6:	2100      	movs	r1, #0
 80009b8:	f7ff fe80 	bl	80006bc <set_led_color_in_strip>
        for (int i = 0; i < NUM_LEDS; i++) {
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	3301      	adds	r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	2b27      	cmp	r3, #39	@ 0x27
 80009c6:	ddf3      	ble.n	80009b0 <game_loop+0x168>
        }
        set_led_color_in_strip(CENTER_LED, 255, 0, 0); // Merkez LED Kırmızı
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	21ff      	movs	r1, #255	@ 0xff
 80009ce:	2015      	movs	r0, #21
 80009d0:	f7ff fe74 	bl	80006bc <set_led_color_in_strip>
        set_led_color_in_strip(LEDaddress, 0, 255, 0);  // Dönen LED Yeşil
 80009d4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <game_loop+0x200>)
 80009d6:	6818      	ldr	r0, [r3, #0]
 80009d8:	2300      	movs	r3, #0
 80009da:	22ff      	movs	r2, #255	@ 0xff
 80009dc:	2100      	movs	r1, #0
 80009de:	f7ff fe6d 	bl	80006bc <set_led_color_in_strip>
        update_led_strip_to_physical_leds();
 80009e2:	f7ff fecb 	bl	800077c <update_led_strip_to_physical_leds>

        LEDaddress++;
 80009e6:	4b18      	ldr	r3, [pc, #96]	@ (8000a48 <game_loop+0x200>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <game_loop+0x200>)
 80009ee:	601a      	str	r2, [r3, #0]
        if (LEDaddress == NUM_LEDS) {
 80009f0:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <game_loop+0x200>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	2b28      	cmp	r3, #40	@ 0x28
 80009f6:	d102      	bne.n	80009fe <game_loop+0x1b6>
            LEDaddress = 0;
 80009f8:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <game_loop+0x200>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
        }
        HAL_Delay(getTime(difficulty));
 80009fe:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <game_loop+0x208>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	0018      	movs	r0, r3
 8000a04:	f000 f826 	bl	8000a54 <getTime>
 8000a08:	0003      	movs	r3, r0
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f000 fbfc 	bl	8001208 <HAL_Delay>

        // Oynanış sırasında butona basılırsa, yukarıdaki !Playing bloğu bir sonraki döngüde durumu ele alacak.
        // currentButtonState zaten döngünün başında okunmuştu, onu tekrar kontrol edebiliriz.
        GPIO_PinState playingButtonCheck = HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin);
 8000a10:	1cbc      	adds	r4, r7, #2
 8000a12:	2390      	movs	r3, #144	@ 0x90
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	2101      	movs	r1, #1
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f001 f83d 	bl	8001a98 <HAL_GPIO_ReadPin>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	7023      	strb	r3, [r4, #0]
        if (playingButtonCheck == BUTTON_PRESSED_STATE) {
 8000a22:	1cbb      	adds	r3, r7, #2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d105      	bne.n	8000a36 <game_loop+0x1ee>
            Playing = false;    // Oyunu durdur
 8000a2a:	4b05      	ldr	r3, [pc, #20]	@ (8000a40 <game_loop+0x1f8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	701a      	strb	r2, [r3, #0]
            CycleEnded = true;  // Sonucun işlenmesi için bayrağı ayarla
 8000a30:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <game_loop+0x1fc>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	b008      	add	sp, #32
 8000a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000005 	.word	0x20000005
 8000a48:	20000840 	.word	0x20000840
 8000a4c:	2000083c 	.word	0x2000083c
 8000a50:	20000000 	.word	0x20000000

08000a54 <getTime>:

// Zorluğa göre LED hareket gecikmesini döndürür
int getTime(int diff_level) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
    int timeValue = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
    switch (diff_level) {
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	2b08      	cmp	r3, #8
 8000a64:	d81d      	bhi.n	8000aa2 <getTime+0x4e>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	009a      	lsls	r2, r3, #2
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <getTime+0x5c>)
 8000a6c:	18d3      	adds	r3, r2, r3
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	469f      	mov	pc, r3
        case EASY: timeValue = 100; break;
 8000a72:	2364      	movs	r3, #100	@ 0x64
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	e016      	b.n	8000aa6 <getTime+0x52>
        case MEDIUM: timeValue = 80; break;
 8000a78:	2350      	movs	r3, #80	@ 0x50
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e013      	b.n	8000aa6 <getTime+0x52>
        case HARD: timeValue = 60; break;
 8000a7e:	233c      	movs	r3, #60	@ 0x3c
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e010      	b.n	8000aa6 <getTime+0x52>
        case ON_SPEED: timeValue = 40; break;
 8000a84:	2328      	movs	r3, #40	@ 0x28
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	e00d      	b.n	8000aa6 <getTime+0x52>
        case SONIC_SPEED: timeValue = 30; break;
 8000a8a:	231e      	movs	r3, #30
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	e00a      	b.n	8000aa6 <getTime+0x52>
        case ROCKET_SPEED: timeValue = 20; break;
 8000a90:	2314      	movs	r3, #20
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	e007      	b.n	8000aa6 <getTime+0x52>
        case LIGHT_SPEED: timeValue = 13; break;
 8000a96:	230d      	movs	r3, #13
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	e004      	b.n	8000aa6 <getTime+0x52>
        case MISSION_IMPOSSIBLE: timeValue = 7; break;
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	e001      	b.n	8000aa6 <getTime+0x52>
        default: timeValue = 100; // Hata durumunda varsayılan
 8000aa2:	2364      	movs	r3, #100	@ 0x64
 8000aa4:	60fb      	str	r3, [r7, #12]
    }
    return timeValue;
 8000aa6:	68fb      	ldr	r3, [r7, #12]
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b004      	add	sp, #16
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	08003618 	.word	0x08003618

08000ab4 <increase_game_difficulty>:

// Kazanma durumunda zorluğu artırır
void increase_game_difficulty() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    // Orijinal Arduino kodu: void increaseDifficulty() { if (difficulty != MISSION_IMPOSSIBLE && wonThisRound) { difficulty++; } }
    // Ve MISSION_IMPOSSIBLE kazanıldığında ana döngüde difficulty = 0; yapılıp sonra bu fonksiyon çağrılıyordu.
    // Bu mantık korunuyor:
    if (wonThisRound) { // Sadece kazanıldıysa zorluk değişir
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <increase_game_difficulty+0x34>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d010      	beq.n	8000ae2 <increase_game_difficulty+0x2e>
        if (difficulty == 0) { // Bu, MISSION_IMPOSSIBLE'dan sonraki sıfırlamadır
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8000aec <increase_game_difficulty+0x38>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d103      	bne.n	8000ad0 <increase_game_difficulty+0x1c>
            difficulty = 1; // EASY'ye geç
 8000ac8:	4b08      	ldr	r3, [pc, #32]	@ (8000aec <increase_game_difficulty+0x38>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	601a      	str	r2, [r3, #0]
        }
        // Eğer difficulty zaten MISSION_IMPOSSIBLE ise ve kazanıldıysa,
        // game_loop içinde difficulty = 0 olarak ayarlandı. wonThisRound true olduğu için
        // bir sonraki adımda difficulty = 1 olacak.
    }
}
 8000ace:	e008      	b.n	8000ae2 <increase_game_difficulty+0x2e>
        } else if (difficulty < MISSION_IMPOSSIBLE) {
 8000ad0:	4b06      	ldr	r3, [pc, #24]	@ (8000aec <increase_game_difficulty+0x38>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	2b07      	cmp	r3, #7
 8000ad6:	dc04      	bgt.n	8000ae2 <increase_game_difficulty+0x2e>
            difficulty++;
 8000ad8:	4b04      	ldr	r3, [pc, #16]	@ (8000aec <increase_game_difficulty+0x38>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <increase_game_difficulty+0x38>)
 8000ae0:	601a      	str	r2, [r3, #0]
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000083c 	.word	0x2000083c
 8000aec:	20000000 	.word	0x20000000

08000af0 <play_flash_animation>:


// Kaybetme durumunda LED animasyonu (iki kez kırmızı flaş)
void play_flash_animation() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
    uint16_t flash_duration = 300; // Kırmızı ışığın yanık kalma süresi (ms)
 8000af6:	1dbb      	adds	r3, r7, #6
 8000af8:	2296      	movs	r2, #150	@ 0x96
 8000afa:	0052      	lsls	r2, r2, #1
 8000afc:	801a      	strh	r2, [r3, #0]
    uint16_t off_duration = 300;   // LED'lerin sönük kalma süresi (ms)
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2296      	movs	r2, #150	@ 0x96
 8000b02:	0052      	lsls	r2, r2, #1
 8000b04:	801a      	strh	r2, [r3, #0]

    // Birinci flaş
    fill_strip_solid(255, 0, 0); // Tüm LED'ler Kırmızı
 8000b06:	2200      	movs	r2, #0
 8000b08:	2100      	movs	r1, #0
 8000b0a:	20ff      	movs	r0, #255	@ 0xff
 8000b0c:	f7ff fe0e 	bl	800072c <fill_strip_solid>
    update_led_strip_to_physical_leds();
 8000b10:	f7ff fe34 	bl	800077c <update_led_strip_to_physical_leds>
    HAL_Delay(flash_duration);
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 fb75 	bl	8001208 <HAL_Delay>

    fill_strip_solid(0, 0, 0);   // Tüm LED'ler Siyah (Sönük)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2000      	movs	r0, #0
 8000b24:	f7ff fe02 	bl	800072c <fill_strip_solid>
    update_led_strip_to_physical_leds();
 8000b28:	f7ff fe28 	bl	800077c <update_led_strip_to_physical_leds>
    HAL_Delay(off_duration);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	881b      	ldrh	r3, [r3, #0]
 8000b30:	0018      	movs	r0, r3
 8000b32:	f000 fb69 	bl	8001208 <HAL_Delay>
//    // İkinci flaş
//    fill_strip_solid(255, 0, 0); // Tüm LED'ler Kırmızı
//    update_led_strip_to_physical_leds();
//    HAL_Delay(flash_duration);

    fill_strip_solid(0, 0, 0);   // Tüm LED'ler Siyah (Sönük)
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f7ff fdf6 	bl	800072c <fill_strip_solid>
    update_led_strip_to_physical_leds();
 8000b40:	f7ff fe1c 	bl	800077c <update_led_strip_to_physical_leds>
    // Animasyon bittikten sonra LED'lerin sönük kalması için çok kısa bir bekleme,
    // bir sonraki LED güncellemesine kadar durumun korunmasına yardımcı olabilir.
    HAL_Delay(50);
 8000b44:	2032      	movs	r0, #50	@ 0x32
 8000b46:	f000 fb5f 	bl	8001208 <HAL_Delay>
}
 8000b4a:	46c0      	nop			@ (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	b002      	add	sp, #8
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <apply_fade_to_all_leds>:

// Tüm LED'lerin parlaklığını azaltır (FastLED'deki fadeall gibi)
void apply_fade_to_all_leds() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUM_LEDS; i++) {
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	e049      	b.n	8000bf4 <apply_fade_to_all_leds+0xa0>
        led_strip[i].r = (led_strip[i].r * 250) / 256;
 8000b60:	4928      	ldr	r1, [pc, #160]	@ (8000c04 <apply_fade_to_all_leds+0xb0>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	0013      	movs	r3, r2
 8000b66:	005b      	lsls	r3, r3, #1
 8000b68:	189b      	adds	r3, r3, r2
 8000b6a:	5c5b      	ldrb	r3, [r3, r1]
 8000b6c:	001a      	movs	r2, r3
 8000b6e:	23fa      	movs	r3, #250	@ 0xfa
 8000b70:	4353      	muls	r3, r2
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	da00      	bge.n	8000b78 <apply_fade_to_all_leds+0x24>
 8000b76:	33ff      	adds	r3, #255	@ 0xff
 8000b78:	121b      	asrs	r3, r3, #8
 8000b7a:	b2d8      	uxtb	r0, r3
 8000b7c:	4921      	ldr	r1, [pc, #132]	@ (8000c04 <apply_fade_to_all_leds+0xb0>)
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	0013      	movs	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	189b      	adds	r3, r3, r2
 8000b86:	1c02      	adds	r2, r0, #0
 8000b88:	545a      	strb	r2, [r3, r1]
        led_strip[i].g = (led_strip[i].g * 250) / 256;
 8000b8a:	491e      	ldr	r1, [pc, #120]	@ (8000c04 <apply_fade_to_all_leds+0xb0>)
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	0013      	movs	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	189b      	adds	r3, r3, r2
 8000b94:	18cb      	adds	r3, r1, r3
 8000b96:	3301      	adds	r3, #1
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	001a      	movs	r2, r3
 8000b9c:	23fa      	movs	r3, #250	@ 0xfa
 8000b9e:	4353      	muls	r3, r2
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da00      	bge.n	8000ba6 <apply_fade_to_all_leds+0x52>
 8000ba4:	33ff      	adds	r3, #255	@ 0xff
 8000ba6:	121b      	asrs	r3, r3, #8
 8000ba8:	b2d8      	uxtb	r0, r3
 8000baa:	4916      	ldr	r1, [pc, #88]	@ (8000c04 <apply_fade_to_all_leds+0xb0>)
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	0013      	movs	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	189b      	adds	r3, r3, r2
 8000bb4:	18cb      	adds	r3, r1, r3
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	1c02      	adds	r2, r0, #0
 8000bba:	701a      	strb	r2, [r3, #0]
        led_strip[i].b = (led_strip[i].b * 250) / 256;
 8000bbc:	4911      	ldr	r1, [pc, #68]	@ (8000c04 <apply_fade_to_all_leds+0xb0>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	189b      	adds	r3, r3, r2
 8000bc6:	18cb      	adds	r3, r1, r3
 8000bc8:	3302      	adds	r3, #2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	001a      	movs	r2, r3
 8000bce:	23fa      	movs	r3, #250	@ 0xfa
 8000bd0:	4353      	muls	r3, r2
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	da00      	bge.n	8000bd8 <apply_fade_to_all_leds+0x84>
 8000bd6:	33ff      	adds	r3, #255	@ 0xff
 8000bd8:	121b      	asrs	r3, r3, #8
 8000bda:	b2d8      	uxtb	r0, r3
 8000bdc:	4909      	ldr	r1, [pc, #36]	@ (8000c04 <apply_fade_to_all_leds+0xb0>)
 8000bde:	687a      	ldr	r2, [r7, #4]
 8000be0:	0013      	movs	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	189b      	adds	r3, r3, r2
 8000be6:	18cb      	adds	r3, r1, r3
 8000be8:	3302      	adds	r3, #2
 8000bea:	1c02      	adds	r2, r0, #0
 8000bec:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_LEDS; i++) {
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b27      	cmp	r3, #39	@ 0x27
 8000bf8:	ddb2      	ble.n	8000b60 <apply_fade_to_all_leds+0xc>
    }
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46c0      	nop			@ (mov r8, r8)
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	b002      	add	sp, #8
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	20000844 	.word	0x20000844

08000c08 <play_cylon_animation>:

// Kazanma durumunda Cylon LED animasyonu
void play_cylon_animation() {
 8000c08:	b590      	push	{r4, r7, lr}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
    // 85 yaklaşık yeşil, 42 yaklaşık sarı, 0 kırmızı, 170 mavi.
    // 'static' olduğu için her çağrıda değeri korunur ve güncellenir.
    static uint8_t base_hue_for_pass = 85; // İlk animasyon yeşil tonlarında başlasın

    RGBColor current_sweep_color;
    uint8_t saturation = 255; // Tam doygunluk
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	22ff      	movs	r2, #255	@ 0xff
 8000c12:	701a      	strb	r2, [r3, #0]
    uint8_t value = 255;      // Tam parlaklık (HSV için). Global parlaklık ayrıca uygulanacak.
 8000c14:	1dbb      	adds	r3, r7, #6
 8000c16:	22ff      	movs	r2, #255	@ 0xff
 8000c18:	701a      	strb	r2, [r3, #0]
                               // Eğer Cylon animasyonu genel olarak çok parlaksa, bu 'value' değerini düşürebilirsiniz (örn: 200).

    // Bu play_cylon_animation çağrısı için ana rengi belirle
    hsvToRgb(base_hue_for_pass, saturation, value, &current_sweep_color);
 8000c1a:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <play_cylon_animation+0xac>)
 8000c1c:	7818      	ldrb	r0, [r3, #0]
 8000c1e:	003c      	movs	r4, r7
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	781a      	ldrb	r2, [r3, #0]
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	7819      	ldrb	r1, [r3, #0]
 8000c28:	0023      	movs	r3, r4
 8000c2a:	f7ff fc71 	bl	8000510 <hsvToRgb>

    // Kayma efekti adımları arasındaki gecikme (ms). Artırırsanız yavaşlar.
    uint16_t sweep_delay = 15; // Örnek: 15ms
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	220f      	movs	r2, #15
 8000c32:	801a      	strh	r2, [r3, #0]

    // İleri yönde kayma
    for (int i = 0; i < NUM_LEDS; i++) {
 8000c34:	2300      	movs	r3, #0
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	e014      	b.n	8000c64 <play_cylon_animation+0x5c>
        // Sadece kayan LED'i mevcut ana renge ayarla
        set_led_color_in_strip(i, current_sweep_color.r, current_sweep_color.g, current_sweep_color.b);
 8000c3a:	003b      	movs	r3, r7
 8000c3c:	7819      	ldrb	r1, [r3, #0]
 8000c3e:	003b      	movs	r3, r7
 8000c40:	785a      	ldrb	r2, [r3, #1]
 8000c42:	003b      	movs	r3, r7
 8000c44:	789b      	ldrb	r3, [r3, #2]
 8000c46:	68f8      	ldr	r0, [r7, #12]
 8000c48:	f7ff fd38 	bl	80006bc <set_led_color_in_strip>
        update_led_strip_to_physical_leds(); // Değişiklikleri LED'lere gönder
 8000c4c:	f7ff fd96 	bl	800077c <update_led_strip_to_physical_leds>
        apply_fade_to_all_leds(); // Diğer tüm LED'leri biraz söndürerek kuyruk etkisi oluştur
 8000c50:	f7ff ff80 	bl	8000b54 <apply_fade_to_all_leds>
        HAL_Delay(sweep_delay);
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	881b      	ldrh	r3, [r3, #0]
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f000 fad5 	bl	8001208 <HAL_Delay>
    for (int i = 0; i < NUM_LEDS; i++) {
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b27      	cmp	r3, #39	@ 0x27
 8000c68:	dde7      	ble.n	8000c3a <play_cylon_animation+0x32>
    }

    // Geri yönde kayma
    for (int i = (NUM_LEDS) - 1; i >= 0; i--) {
 8000c6a:	2327      	movs	r3, #39	@ 0x27
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	e014      	b.n	8000c9a <play_cylon_animation+0x92>
        set_led_color_in_strip(i, current_sweep_color.r, current_sweep_color.g, current_sweep_color.b);
 8000c70:	003b      	movs	r3, r7
 8000c72:	7819      	ldrb	r1, [r3, #0]
 8000c74:	003b      	movs	r3, r7
 8000c76:	785a      	ldrb	r2, [r3, #1]
 8000c78:	003b      	movs	r3, r7
 8000c7a:	789b      	ldrb	r3, [r3, #2]
 8000c7c:	68b8      	ldr	r0, [r7, #8]
 8000c7e:	f7ff fd1d 	bl	80006bc <set_led_color_in_strip>
        update_led_strip_to_physical_leds();
 8000c82:	f7ff fd7b 	bl	800077c <update_led_strip_to_physical_leds>
        apply_fade_to_all_leds();
 8000c86:	f7ff ff65 	bl	8000b54 <apply_fade_to_all_leds>
        HAL_Delay(sweep_delay);
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f000 faba 	bl	8001208 <HAL_Delay>
    for (int i = (NUM_LEDS) - 1; i >= 0; i--) {
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	dae7      	bge.n	8000c70 <play_cylon_animation+0x68>
    }

    // Bir sonraki play_cylon_animation çağrısı için ana rengi (hue) değiştir.
    // Bu artış miktarı renk geçişlerini belirler. 255/6 ~ 42 (yaklaşık 6 ana renk döngüsü için)
    base_hue_for_pass += 42;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <play_cylon_animation+0xac>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	332a      	adds	r3, #42	@ 0x2a
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b02      	ldr	r3, [pc, #8]	@ (8000cb4 <play_cylon_animation+0xac>)
 8000caa:	701a      	strb	r2, [r3, #0]
    // base_hue_for_pass değişkeni uint8_t olduğu için 255'i geçince otomatik olarak başa dönecektir (örn: 250 + 42 = 292 -> 36 olur).
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b005      	add	sp, #20
 8000cb2:	bd90      	pop	{r4, r7, pc}
 8000cb4:	20000007 	.word	0x20000007

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbc:	f000 fa40 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc0:	f000 f80b 	bl	8000cda <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc4:	f000 f8f0 	bl	8000ea8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cc8:	f000 f8d0 	bl	8000e6c <MX_DMA_Init>
  MX_TIM3_Init();
 8000ccc:	f000 f850 	bl	8000d70 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  game_setup();
 8000cd0:	f7ff fdae 	bl	8000830 <game_setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  game_loop();
 8000cd4:	f7ff fdb8 	bl	8000848 <game_loop>
 8000cd8:	e7fc      	b.n	8000cd4 <main+0x1c>

08000cda <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cda:	b590      	push	{r4, r7, lr}
 8000cdc:	b091      	sub	sp, #68	@ 0x44
 8000cde:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce0:	2410      	movs	r4, #16
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	2330      	movs	r3, #48	@ 0x30
 8000ce8:	001a      	movs	r2, r3
 8000cea:	2100      	movs	r1, #0
 8000cec:	f002 fc52 	bl	8003594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	003b      	movs	r3, r7
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	2310      	movs	r3, #16
 8000cf6:	001a      	movs	r2, r3
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f002 fc4b 	bl	8003594 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfe:	0021      	movs	r1, r4
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2202      	movs	r2, #2
 8000d04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	2201      	movs	r2, #1
 8000d0a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	2210      	movs	r2, #16
 8000d10:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	2202      	movs	r2, #2
 8000d16:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	22a0      	movs	r2, #160	@ 0xa0
 8000d22:	0392      	lsls	r2, r2, #14
 8000d24:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d26:	187b      	adds	r3, r7, r1
 8000d28:	2200      	movs	r2, #0
 8000d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	187b      	adds	r3, r7, r1
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fed0 	bl	8001ad4 <HAL_RCC_OscConfig>
 8000d34:	1e03      	subs	r3, r0, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000d38:	f000 f8f4 	bl	8000f24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	003b      	movs	r3, r7
 8000d3e:	2207      	movs	r2, #7
 8000d40:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d42:	003b      	movs	r3, r7
 8000d44:	2202      	movs	r2, #2
 8000d46:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d48:	003b      	movs	r3, r7
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d4e:	003b      	movs	r3, r7
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d54:	003b      	movs	r3, r7
 8000d56:	2101      	movs	r1, #1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	f001 f9d5 	bl	8002108 <HAL_RCC_ClockConfig>
 8000d5e:	1e03      	subs	r3, r0, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000d62:	f000 f8df 	bl	8000f24 <Error_Handler>
  }
}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b011      	add	sp, #68	@ 0x44
 8000d6c:	bd90      	pop	{r4, r7, pc}
	...

08000d70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08e      	sub	sp, #56	@ 0x38
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d76:	2328      	movs	r3, #40	@ 0x28
 8000d78:	18fb      	adds	r3, r7, r3
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	2310      	movs	r3, #16
 8000d7e:	001a      	movs	r2, r3
 8000d80:	2100      	movs	r1, #0
 8000d82:	f002 fc07 	bl	8003594 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d86:	2320      	movs	r3, #32
 8000d88:	18fb      	adds	r3, r7, r3
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	2308      	movs	r3, #8
 8000d8e:	001a      	movs	r2, r3
 8000d90:	2100      	movs	r1, #0
 8000d92:	f002 fbff 	bl	8003594 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	0018      	movs	r0, r3
 8000d9a:	231c      	movs	r3, #28
 8000d9c:	001a      	movs	r2, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	f002 fbf8 	bl	8003594 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000da6:	4a30      	ldr	r2, [pc, #192]	@ (8000e68 <MX_TIM3_Init+0xf8>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20-1;
 8000daa:	4b2e      	ldr	r3, [pc, #184]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000dac:	2213      	movs	r2, #19
 8000dae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3-1;
 8000db6:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b29      	ldr	r3, [pc, #164]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dc8:	4b26      	ldr	r3, [pc, #152]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000dca:	0018      	movs	r0, r3
 8000dcc:	f001 fac0 	bl	8002350 <HAL_TIM_Base_Init>
 8000dd0:	1e03      	subs	r3, r0, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000dd4:	f000 f8a6 	bl	8000f24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	2128      	movs	r1, #40	@ 0x28
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	2280      	movs	r2, #128	@ 0x80
 8000dde:	0152      	lsls	r2, r2, #5
 8000de0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de2:	187a      	adds	r2, r7, r1
 8000de4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000de6:	0011      	movs	r1, r2
 8000de8:	0018      	movs	r0, r3
 8000dea:	f001 fea1 	bl	8002b30 <HAL_TIM_ConfigClockSource>
 8000dee:	1e03      	subs	r3, r0, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000df2:	f000 f897 	bl	8000f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 faf9 	bl	80023f0 <HAL_TIM_PWM_Init>
 8000dfe:	1e03      	subs	r3, r0, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000e02:	f000 f88f 	bl	8000f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e06:	2120      	movs	r1, #32
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e14:	187a      	adds	r2, r7, r1
 8000e16:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000e18:	0011      	movs	r1, r2
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f002 fb62 	bl	80034e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e20:	1e03      	subs	r3, r0, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000e24:	f000 f87e 	bl	8000f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e28:	1d3b      	adds	r3, r7, #4
 8000e2a:	2260      	movs	r2, #96	@ 0x60
 8000e2c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e34:	1d3b      	adds	r3, r7, #4
 8000e36:	2200      	movs	r2, #0
 8000e38:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e40:	1d39      	adds	r1, r7, #4
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	0018      	movs	r0, r3
 8000e48:	f001 fdac 	bl	80029a4 <HAL_TIM_PWM_ConfigChannel>
 8000e4c:	1e03      	subs	r3, r0, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000e50:	f000 f868 	bl	8000f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e54:	4b03      	ldr	r3, [pc, #12]	@ (8000e64 <MX_TIM3_Init+0xf4>)
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 f8de 	bl	8001018 <HAL_TIM_MspPostInit>

}
 8000e5c:	46c0      	nop			@ (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b00e      	add	sp, #56	@ 0x38
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000030 	.word	0x20000030
 8000e68:	40000400 	.word	0x40000400

08000e6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <MX_DMA_Init+0x38>)
 8000e74:	695a      	ldr	r2, [r3, #20]
 8000e76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <MX_DMA_Init+0x38>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	615a      	str	r2, [r3, #20]
 8000e7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <MX_DMA_Init+0x38>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	200b      	movs	r0, #11
 8000e90:	f000 fa8a 	bl	80013a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000e94:	200b      	movs	r0, #11
 8000e96:	f000 fa9c 	bl	80013d2 <HAL_NVIC_EnableIRQ>

}
 8000e9a:	46c0      	nop			@ (mov r8, r8)
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			@ (mov r8, r8)
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b590      	push	{r4, r7, lr}
 8000eaa:	b089      	sub	sp, #36	@ 0x24
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	240c      	movs	r4, #12
 8000eb0:	193b      	adds	r3, r7, r4
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2314      	movs	r3, #20
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	f002 fb6b 	bl	8003594 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <MX_GPIO_Init+0x78>)
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	4b17      	ldr	r3, [pc, #92]	@ (8000f20 <MX_GPIO_Init+0x78>)
 8000ec4:	2180      	movs	r1, #128	@ 0x80
 8000ec6:	03c9      	lsls	r1, r1, #15
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	615a      	str	r2, [r3, #20]
 8000ecc:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <MX_GPIO_Init+0x78>)
 8000ece:	695a      	ldr	r2, [r3, #20]
 8000ed0:	2380      	movs	r3, #128	@ 0x80
 8000ed2:	03db      	lsls	r3, r3, #15
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_GPIO_Init+0x78>)
 8000edc:	695a      	ldr	r2, [r3, #20]
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_GPIO_Init+0x78>)
 8000ee0:	2180      	movs	r1, #128	@ 0x80
 8000ee2:	0289      	lsls	r1, r1, #10
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	615a      	str	r2, [r3, #20]
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <MX_GPIO_Init+0x78>)
 8000eea:	695a      	ldr	r2, [r3, #20]
 8000eec:	2380      	movs	r3, #128	@ 0x80
 8000eee:	029b      	lsls	r3, r3, #10
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ef6:	193b      	adds	r3, r7, r4
 8000ef8:	2201      	movs	r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	2200      	movs	r2, #0
 8000f00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	2202      	movs	r2, #2
 8000f06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f08:	193a      	adds	r2, r7, r4
 8000f0a:	2390      	movs	r3, #144	@ 0x90
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	0011      	movs	r1, r2
 8000f10:	0018      	movs	r0, r3
 8000f12:	f000 fc59 	bl	80017c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f16:	46c0      	nop			@ (mov r8, r8)
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	b009      	add	sp, #36	@ 0x24
 8000f1c:	bd90      	pop	{r4, r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	40021000 	.word	0x40021000

08000f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f28:	b672      	cpsid	i
}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f2c:	46c0      	nop			@ (mov r8, r8)
 8000f2e:	e7fd      	b.n	8000f2c <Error_Handler+0x8>

08000f30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f36:	4b0f      	ldr	r3, [pc, #60]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f38:	699a      	ldr	r2, [r3, #24]
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	430a      	orrs	r2, r1
 8000f40:	619a      	str	r2, [r3, #24]
 8000f42:	4b0c      	ldr	r3, [pc, #48]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4013      	ands	r3, r2
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f4e:	4b09      	ldr	r3, [pc, #36]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f50:	69da      	ldr	r2, [r3, #28]
 8000f52:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f54:	2180      	movs	r1, #128	@ 0x80
 8000f56:	0549      	lsls	r1, r1, #21
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	61da      	str	r2, [r3, #28]
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_MspInit+0x44>)
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	2380      	movs	r3, #128	@ 0x80
 8000f62:	055b      	lsls	r3, r3, #21
 8000f64:	4013      	ands	r3, r2
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f6a:	46c0      	nop			@ (mov r8, r8)
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	b002      	add	sp, #8
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	46c0      	nop			@ (mov r8, r8)
 8000f74:	40021000 	.word	0x40021000

08000f78 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <HAL_TIM_Base_MspInit+0x90>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d139      	bne.n	8000ffe <HAL_TIM_Base_MspInit+0x86>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f8a:	4b20      	ldr	r3, [pc, #128]	@ (800100c <HAL_TIM_Base_MspInit+0x94>)
 8000f8c:	69da      	ldr	r2, [r3, #28]
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_TIM_Base_MspInit+0x94>)
 8000f90:	2102      	movs	r1, #2
 8000f92:	430a      	orrs	r2, r1
 8000f94:	61da      	str	r2, [r3, #28]
 8000f96:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <HAL_TIM_Base_MspInit+0x94>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Channel4;
 8000fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <HAL_TIM_Base_MspInit+0x9c>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa8:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000faa:	2210      	movs	r2, #16
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fae:	4b18      	ldr	r3, [pc, #96]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fb6:	2280      	movs	r2, #128	@ 0x80
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fba:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	0052      	lsls	r2, r2, #1
 8000fc0:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc2:	4b13      	ldr	r3, [pc, #76]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00d2      	lsls	r2, r2, #3
 8000fc8:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f000 fa17 	bl	800140c <HAL_DMA_Init>
 8000fde:	1e03      	subs	r3, r0, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000fe2:	f7ff ff9f 	bl	8000f24 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fea:	625a      	str	r2, [r3, #36]	@ 0x24
 8000fec:	4b08      	ldr	r3, [pc, #32]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	625a      	str	r2, [r3, #36]	@ 0x24
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000ff6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_TIM_Base_MspInit+0x98>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000ffe:	46c0      	nop			@ (mov r8, r8)
 8001000:	46bd      	mov	sp, r7
 8001002:	b004      	add	sp, #16
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	40000400 	.word	0x40000400
 800100c:	40021000 	.word	0x40021000
 8001010:	20000078 	.word	0x20000078
 8001014:	40020044 	.word	0x40020044

08001018 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001018:	b590      	push	{r4, r7, lr}
 800101a:	b089      	sub	sp, #36	@ 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	240c      	movs	r4, #12
 8001022:	193b      	adds	r3, r7, r4
 8001024:	0018      	movs	r0, r3
 8001026:	2314      	movs	r3, #20
 8001028:	001a      	movs	r2, r3
 800102a:	2100      	movs	r1, #0
 800102c:	f002 fab2 	bl	8003594 <memset>
  if(htim->Instance==TIM3)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a15      	ldr	r2, [pc, #84]	@ (800108c <HAL_TIM_MspPostInit+0x74>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d124      	bne.n	8001084 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b15      	ldr	r3, [pc, #84]	@ (8001090 <HAL_TIM_MspPostInit+0x78>)
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <HAL_TIM_MspPostInit+0x78>)
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	0289      	lsls	r1, r1, #10
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <HAL_TIM_MspPostInit+0x78>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	2380      	movs	r3, #128	@ 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001056:	0021      	movs	r1, r4
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2240      	movs	r2, #64	@ 0x40
 800105c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2202      	movs	r2, #2
 8001062:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2201      	movs	r2, #1
 8001074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	187a      	adds	r2, r7, r1
 8001078:	2390      	movs	r3, #144	@ 0x90
 800107a:	05db      	lsls	r3, r3, #23
 800107c:	0011      	movs	r1, r2
 800107e:	0018      	movs	r0, r3
 8001080:	f000 fba2 	bl	80017c8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001084:	46c0      	nop			@ (mov r8, r8)
 8001086:	46bd      	mov	sp, r7
 8001088:	b009      	add	sp, #36	@ 0x24
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	40000400 	.word	0x40000400
 8001090:	40021000 	.word	0x40021000

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f888 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <DMA1_Channel4_5_IRQHandler+0x14>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fa8f 	bl	80015f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 80010d4:	46c0      	nop			@ (mov r8, r8)
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	46c0      	nop			@ (mov r8, r8)
 80010dc:	20000078 	.word	0x20000078

080010e0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80010e4:	46c0      	nop			@ (mov r8, r8)
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f7ff fff6 	bl	80010e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopForever+0x6>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopForever+0xe>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopForever+0x12>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopForever+0x16>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800111a:	f002 fa43 	bl	80035a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800111e:	f7ff fdcb 	bl	8000cb8 <main>

08001122 <LoopForever>:

LoopForever:
    b LoopForever
 8001122:	e7fe      	b.n	8001122 <LoopForever>
  ldr   r0, =_estack
 8001124:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001128:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800112c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001130:	08003674 	.word	0x08003674
  ldr r2, =_sbss
 8001134:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001138:	200008c0 	.word	0x200008c0

0800113c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC1_IRQHandler>
	...

08001140 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001144:	4b07      	ldr	r3, [pc, #28]	@ (8001164 <HAL_Init+0x24>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_Init+0x24>)
 800114a:	2110      	movs	r1, #16
 800114c:	430a      	orrs	r2, r1
 800114e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001150:	2003      	movs	r0, #3
 8001152:	f000 f809 	bl	8001168 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001156:	f7ff feeb 	bl	8000f30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			@ (mov r8, r8)
 8001164:	40022000 	.word	0x40022000

08001168 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001170:	4b14      	ldr	r3, [pc, #80]	@ (80011c4 <HAL_InitTick+0x5c>)
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <HAL_InitTick+0x60>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	0019      	movs	r1, r3
 800117a:	23fa      	movs	r3, #250	@ 0xfa
 800117c:	0098      	lsls	r0, r3, #2
 800117e:	f7fe ffc3 	bl	8000108 <__udivsi3>
 8001182:	0003      	movs	r3, r0
 8001184:	0019      	movs	r1, r3
 8001186:	0020      	movs	r0, r4
 8001188:	f7fe ffbe 	bl	8000108 <__udivsi3>
 800118c:	0003      	movs	r3, r0
 800118e:	0018      	movs	r0, r3
 8001190:	f000 f92f 	bl	80013f2 <HAL_SYSTICK_Config>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001198:	2301      	movs	r3, #1
 800119a:	e00f      	b.n	80011bc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d80b      	bhi.n	80011ba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	2301      	movs	r3, #1
 80011a6:	425b      	negs	r3, r3
 80011a8:	2200      	movs	r2, #0
 80011aa:	0018      	movs	r0, r3
 80011ac:	f000 f8fc 	bl	80013a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_InitTick+0x64>)
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	b003      	add	sp, #12
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	20000008 	.word	0x20000008
 80011c8:	20000010 	.word	0x20000010
 80011cc:	2000000c 	.word	0x2000000c

080011d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <HAL_IncTick+0x1c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	001a      	movs	r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <HAL_IncTick+0x20>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	18d2      	adds	r2, r2, r3
 80011e0:	4b03      	ldr	r3, [pc, #12]	@ (80011f0 <HAL_IncTick+0x20>)
 80011e2:	601a      	str	r2, [r3, #0]
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	20000010 	.word	0x20000010
 80011f0:	200008bc 	.word	0x200008bc

080011f4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  return uwTick;
 80011f8:	4b02      	ldr	r3, [pc, #8]	@ (8001204 <HAL_GetTick+0x10>)
 80011fa:	681b      	ldr	r3, [r3, #0]
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	46c0      	nop			@ (mov r8, r8)
 8001204:	200008bc 	.word	0x200008bc

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001210:	f7ff fff0 	bl	80011f4 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	3301      	adds	r3, #1
 8001220:	d005      	beq.n	800122e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001222:	4b0a      	ldr	r3, [pc, #40]	@ (800124c <HAL_Delay+0x44>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	001a      	movs	r2, r3
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	189b      	adds	r3, r3, r2
 800122c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	f7ff ffe0 	bl	80011f4 <HAL_GetTick>
 8001234:	0002      	movs	r2, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	429a      	cmp	r2, r3
 800123e:	d8f7      	bhi.n	8001230 <HAL_Delay+0x28>
  {
  }
}
 8001240:	46c0      	nop			@ (mov r8, r8)
 8001242:	46c0      	nop			@ (mov r8, r8)
 8001244:	46bd      	mov	sp, r7
 8001246:	b004      	add	sp, #16
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	20000010 	.word	0x20000010

08001250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	0002      	movs	r2, r0
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b7f      	cmp	r3, #127	@ 0x7f
 8001262:	d809      	bhi.n	8001278 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001264:	1dfb      	adds	r3, r7, #7
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	001a      	movs	r2, r3
 800126a:	231f      	movs	r3, #31
 800126c:	401a      	ands	r2, r3
 800126e:	4b04      	ldr	r3, [pc, #16]	@ (8001280 <__NVIC_EnableIRQ+0x30>)
 8001270:	2101      	movs	r1, #1
 8001272:	4091      	lsls	r1, r2
 8001274:	000a      	movs	r2, r1
 8001276:	601a      	str	r2, [r3, #0]
  }
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b590      	push	{r4, r7, lr}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	0002      	movs	r2, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	1dfb      	adds	r3, r7, #7
 8001290:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b7f      	cmp	r3, #127	@ 0x7f
 8001298:	d828      	bhi.n	80012ec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800129a:	4a2f      	ldr	r2, [pc, #188]	@ (8001358 <__NVIC_SetPriority+0xd4>)
 800129c:	1dfb      	adds	r3, r7, #7
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	089b      	lsrs	r3, r3, #2
 80012a4:	33c0      	adds	r3, #192	@ 0xc0
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	589b      	ldr	r3, [r3, r2]
 80012aa:	1dfa      	adds	r2, r7, #7
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	0011      	movs	r1, r2
 80012b0:	2203      	movs	r2, #3
 80012b2:	400a      	ands	r2, r1
 80012b4:	00d2      	lsls	r2, r2, #3
 80012b6:	21ff      	movs	r1, #255	@ 0xff
 80012b8:	4091      	lsls	r1, r2
 80012ba:	000a      	movs	r2, r1
 80012bc:	43d2      	mvns	r2, r2
 80012be:	401a      	ands	r2, r3
 80012c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	019b      	lsls	r3, r3, #6
 80012c6:	22ff      	movs	r2, #255	@ 0xff
 80012c8:	401a      	ands	r2, r3
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	0018      	movs	r0, r3
 80012d0:	2303      	movs	r3, #3
 80012d2:	4003      	ands	r3, r0
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d8:	481f      	ldr	r0, [pc, #124]	@ (8001358 <__NVIC_SetPriority+0xd4>)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	430a      	orrs	r2, r1
 80012e4:	33c0      	adds	r3, #192	@ 0xc0
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012ea:	e031      	b.n	8001350 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <__NVIC_SetPriority+0xd8>)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	0019      	movs	r1, r3
 80012f4:	230f      	movs	r3, #15
 80012f6:	400b      	ands	r3, r1
 80012f8:	3b08      	subs	r3, #8
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3306      	adds	r3, #6
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	18d3      	adds	r3, r2, r3
 8001302:	3304      	adds	r3, #4
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1dfa      	adds	r2, r7, #7
 8001308:	7812      	ldrb	r2, [r2, #0]
 800130a:	0011      	movs	r1, r2
 800130c:	2203      	movs	r2, #3
 800130e:	400a      	ands	r2, r1
 8001310:	00d2      	lsls	r2, r2, #3
 8001312:	21ff      	movs	r1, #255	@ 0xff
 8001314:	4091      	lsls	r1, r2
 8001316:	000a      	movs	r2, r1
 8001318:	43d2      	mvns	r2, r2
 800131a:	401a      	ands	r2, r3
 800131c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	019b      	lsls	r3, r3, #6
 8001322:	22ff      	movs	r2, #255	@ 0xff
 8001324:	401a      	ands	r2, r3
 8001326:	1dfb      	adds	r3, r7, #7
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	0018      	movs	r0, r3
 800132c:	2303      	movs	r3, #3
 800132e:	4003      	ands	r3, r0
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001334:	4809      	ldr	r0, [pc, #36]	@ (800135c <__NVIC_SetPriority+0xd8>)
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	001c      	movs	r4, r3
 800133c:	230f      	movs	r3, #15
 800133e:	4023      	ands	r3, r4
 8001340:	3b08      	subs	r3, #8
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	430a      	orrs	r2, r1
 8001346:	3306      	adds	r3, #6
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	18c3      	adds	r3, r0, r3
 800134c:	3304      	adds	r3, #4
 800134e:	601a      	str	r2, [r3, #0]
}
 8001350:	46c0      	nop			@ (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b003      	add	sp, #12
 8001356:	bd90      	pop	{r4, r7, pc}
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	1e5a      	subs	r2, r3, #1
 800136c:	2380      	movs	r3, #128	@ 0x80
 800136e:	045b      	lsls	r3, r3, #17
 8001370:	429a      	cmp	r2, r3
 8001372:	d301      	bcc.n	8001378 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001374:	2301      	movs	r3, #1
 8001376:	e010      	b.n	800139a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <SysTick_Config+0x44>)
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	3a01      	subs	r2, #1
 800137e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001380:	2301      	movs	r3, #1
 8001382:	425b      	negs	r3, r3
 8001384:	2103      	movs	r1, #3
 8001386:	0018      	movs	r0, r3
 8001388:	f7ff ff7c 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800138c:	4b05      	ldr	r3, [pc, #20]	@ (80013a4 <SysTick_Config+0x44>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001392:	4b04      	ldr	r3, [pc, #16]	@ (80013a4 <SysTick_Config+0x44>)
 8001394:	2207      	movs	r2, #7
 8001396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001398:	2300      	movs	r3, #0
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			@ (mov r8, r8)
 80013a4:	e000e010 	.word	0xe000e010

080013a8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60b9      	str	r1, [r7, #8]
 80013b0:	607a      	str	r2, [r7, #4]
 80013b2:	210f      	movs	r1, #15
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	1c02      	adds	r2, r0, #0
 80013b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	187b      	adds	r3, r7, r1
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	b25b      	sxtb	r3, r3
 80013c2:	0011      	movs	r1, r2
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff ff5d 	bl	8001284 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b004      	add	sp, #16
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	0002      	movs	r2, r0
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013de:	1dfb      	adds	r3, r7, #7
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	0018      	movs	r0, r3
 80013e6:	f7ff ff33 	bl	8001250 <__NVIC_EnableIRQ>
}
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	0018      	movs	r0, r3
 80013fe:	f7ff ffaf 	bl	8001360 <SysTick_Config>
 8001402:	0003      	movs	r3, r0
}
 8001404:	0018      	movs	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	b002      	add	sp, #8
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e036      	b.n	8001490 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2221      	movs	r2, #33	@ 0x21
 8001426:	2102      	movs	r1, #2
 8001428:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4a18      	ldr	r2, [pc, #96]	@ (8001498 <HAL_DMA_Init+0x8c>)
 8001436:	4013      	ands	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001442:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800144e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	695b      	ldr	r3, [r3, #20]
 8001454:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	0018      	movs	r0, r3
 8001474:	f000 f98c 	bl	8001790 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2221      	movs	r2, #33	@ 0x21
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2220      	movs	r2, #32
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800148e:	2300      	movs	r3, #0
}
 8001490:	0018      	movs	r0, r3
 8001492:	46bd      	mov	sp, r7
 8001494:	b004      	add	sp, #16
 8001496:	bd80      	pop	{r7, pc}
 8001498:	ffffc00f 	.word	0xffffc00f

0800149c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
 80014a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014aa:	2317      	movs	r3, #23
 80014ac:	18fb      	adds	r3, r7, r3
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2220      	movs	r2, #32
 80014b6:	5c9b      	ldrb	r3, [r3, r2]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <HAL_DMA_Start_IT+0x24>
 80014bc:	2302      	movs	r3, #2
 80014be:	e04f      	b.n	8001560 <HAL_DMA_Start_IT+0xc4>
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	2220      	movs	r2, #32
 80014c4:	2101      	movs	r1, #1
 80014c6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2221      	movs	r2, #33	@ 0x21
 80014cc:	5c9b      	ldrb	r3, [r3, r2]
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d13a      	bne.n	800154a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2221      	movs	r2, #33	@ 0x21
 80014d8:	2102      	movs	r1, #2
 80014da:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	438a      	bics	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f000 f91c 	bl	8001736 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d008      	beq.n	8001518 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	210e      	movs	r1, #14
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e00f      	b.n	8001538 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	210a      	movs	r1, #10
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2104      	movs	r1, #4
 8001534:	438a      	bics	r2, r1
 8001536:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e007      	b.n	800155a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2220      	movs	r2, #32
 800154e:	2100      	movs	r1, #0
 8001550:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001552:	2317      	movs	r3, #23
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	2202      	movs	r2, #2
 8001558:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800155a:	2317      	movs	r3, #23
 800155c:	18fb      	adds	r3, r7, r3
 800155e:	781b      	ldrb	r3, [r3, #0]
}
 8001560:	0018      	movs	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	b006      	add	sp, #24
 8001566:	bd80      	pop	{r7, pc}

08001568 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001570:	210f      	movs	r1, #15
 8001572:	187b      	adds	r3, r7, r1
 8001574:	2200      	movs	r2, #0
 8001576:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2221      	movs	r2, #33	@ 0x21
 800157c:	5c9b      	ldrb	r3, [r3, r2]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d006      	beq.n	8001592 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2204      	movs	r2, #4
 8001588:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800158a:	187b      	adds	r3, r7, r1
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
 8001590:	e028      	b.n	80015e4 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	210e      	movs	r1, #14
 800159e:	438a      	bics	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	438a      	bics	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015ba:	2101      	movs	r1, #1
 80015bc:	4091      	lsls	r1, r2
 80015be:	000a      	movs	r2, r1
 80015c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2221      	movs	r2, #33	@ 0x21
 80015c6:	2101      	movs	r1, #1
 80015c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2220      	movs	r2, #32
 80015ce:	2100      	movs	r1, #0
 80015d0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	0010      	movs	r0, r2
 80015e2:	4798      	blx	r3
    }
  }
  return status;
 80015e4:	230f      	movs	r3, #15
 80015e6:	18fb      	adds	r3, r7, r3
 80015e8:	781b      	ldrb	r3, [r3, #0]
}
 80015ea:	0018      	movs	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	b004      	add	sp, #16
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b084      	sub	sp, #16
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	2204      	movs	r2, #4
 8001610:	409a      	lsls	r2, r3
 8001612:	0013      	movs	r3, r2
 8001614:	68fa      	ldr	r2, [r7, #12]
 8001616:	4013      	ands	r3, r2
 8001618:	d024      	beq.n	8001664 <HAL_DMA_IRQHandler+0x72>
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	2204      	movs	r2, #4
 800161e:	4013      	ands	r3, r2
 8001620:	d020      	beq.n	8001664 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2220      	movs	r2, #32
 800162a:	4013      	ands	r3, r2
 800162c:	d107      	bne.n	800163e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2104      	movs	r1, #4
 800163a:	438a      	bics	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001646:	2104      	movs	r1, #4
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001652:	2b00      	cmp	r3, #0
 8001654:	d100      	bne.n	8001658 <HAL_DMA_IRQHandler+0x66>
 8001656:	e06a      	b.n	800172e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	0010      	movs	r0, r2
 8001660:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001662:	e064      	b.n	800172e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001668:	2202      	movs	r2, #2
 800166a:	409a      	lsls	r2, r3
 800166c:	0013      	movs	r3, r2
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	4013      	ands	r3, r2
 8001672:	d02b      	beq.n	80016cc <HAL_DMA_IRQHandler+0xda>
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d027      	beq.n	80016cc <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2220      	movs	r2, #32
 8001684:	4013      	ands	r3, r2
 8001686:	d10b      	bne.n	80016a0 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	210a      	movs	r1, #10
 8001694:	438a      	bics	r2, r1
 8001696:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2221      	movs	r2, #33	@ 0x21
 800169c:	2101      	movs	r1, #1
 800169e:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a8:	2102      	movs	r1, #2
 80016aa:	4091      	lsls	r1, r2
 80016ac:	000a      	movs	r2, r1
 80016ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2220      	movs	r2, #32
 80016b4:	2100      	movs	r1, #0
 80016b6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d036      	beq.n	800172e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	0010      	movs	r0, r2
 80016c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016ca:	e030      	b.n	800172e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	2208      	movs	r2, #8
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	4013      	ands	r3, r2
 80016da:	d028      	beq.n	800172e <HAL_DMA_IRQHandler+0x13c>
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2208      	movs	r2, #8
 80016e0:	4013      	ands	r3, r2
 80016e2:	d024      	beq.n	800172e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	210e      	movs	r1, #14
 80016f0:	438a      	bics	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016fc:	2101      	movs	r1, #1
 80016fe:	4091      	lsls	r1, r2
 8001700:	000a      	movs	r2, r1
 8001702:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2221      	movs	r2, #33	@ 0x21
 800170e:	2101      	movs	r1, #1
 8001710:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2220      	movs	r2, #32
 8001716:	2100      	movs	r1, #0
 8001718:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	2b00      	cmp	r3, #0
 8001720:	d005      	beq.n	800172e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	0010      	movs	r0, r2
 800172a:	4798      	blx	r3
    }
  }
}
 800172c:	e7ff      	b.n	800172e <HAL_DMA_IRQHandler+0x13c>
 800172e:	46c0      	nop			@ (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b004      	add	sp, #16
 8001734:	bd80      	pop	{r7, pc}

08001736 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b084      	sub	sp, #16
 800173a:	af00      	add	r7, sp, #0
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800174c:	2101      	movs	r1, #1
 800174e:	4091      	lsls	r1, r2
 8001750:	000a      	movs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2b10      	cmp	r3, #16
 8001762:	d108      	bne.n	8001776 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001774:	e007      	b.n	8001786 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	687a      	ldr	r2, [r7, #4]
 8001784:	60da      	str	r2, [r3, #12]
}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b004      	add	sp, #16
 800178c:	bd80      	pop	{r7, pc}
	...

08001790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <DMA_CalcBaseAndBitshift+0x30>)
 800179e:	4694      	mov	ip, r2
 80017a0:	4463      	add	r3, ip
 80017a2:	2114      	movs	r1, #20
 80017a4:	0018      	movs	r0, r3
 80017a6:	f7fe fcaf 	bl	8000108 <__udivsi3>
 80017aa:	0003      	movs	r3, r0
 80017ac:	009a      	lsls	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a03      	ldr	r2, [pc, #12]	@ (80017c4 <DMA_CalcBaseAndBitshift+0x34>)
 80017b6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b002      	add	sp, #8
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	bffdfff8 	.word	0xbffdfff8
 80017c4:	40020000 	.word	0x40020000

080017c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017d6:	e149      	b.n	8001a6c <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2101      	movs	r1, #1
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	4091      	lsls	r1, r2
 80017e2:	000a      	movs	r2, r1
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d100      	bne.n	80017f0 <HAL_GPIO_Init+0x28>
 80017ee:	e13a      	b.n	8001a66 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	2203      	movs	r2, #3
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d005      	beq.n	8001808 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2203      	movs	r2, #3
 8001802:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001804:	2b02      	cmp	r3, #2
 8001806:	d130      	bne.n	800186a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	409a      	lsls	r2, r3
 8001816:	0013      	movs	r3, r2
 8001818:	43da      	mvns	r2, r3
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	68da      	ldr	r2, [r3, #12]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	0013      	movs	r3, r2
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4313      	orrs	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800183e:	2201      	movs	r2, #1
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	091b      	lsrs	r3, r3, #4
 8001854:	2201      	movs	r2, #1
 8001856:	401a      	ands	r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	409a      	lsls	r2, r3
 800185c:	0013      	movs	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2203      	movs	r2, #3
 8001870:	4013      	ands	r3, r2
 8001872:	2b03      	cmp	r3, #3
 8001874:	d017      	beq.n	80018a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	43da      	mvns	r2, r3
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	409a      	lsls	r2, r3
 8001898:	0013      	movs	r3, r2
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	4313      	orrs	r3, r2
 800189e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	693a      	ldr	r2, [r7, #16]
 80018a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2203      	movs	r2, #3
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d123      	bne.n	80018fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	08da      	lsrs	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3208      	adds	r2, #8
 80018ba:	0092      	lsls	r2, r2, #2
 80018bc:	58d3      	ldr	r3, [r2, r3]
 80018be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2207      	movs	r2, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	220f      	movs	r2, #15
 80018ca:	409a      	lsls	r2, r3
 80018cc:	0013      	movs	r3, r2
 80018ce:	43da      	mvns	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	4013      	ands	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	691a      	ldr	r2, [r3, #16]
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	2107      	movs	r1, #7
 80018de:	400b      	ands	r3, r1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	409a      	lsls	r2, r3
 80018e4:	0013      	movs	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	08da      	lsrs	r2, r3, #3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3208      	adds	r2, #8
 80018f4:	0092      	lsls	r2, r2, #2
 80018f6:	6939      	ldr	r1, [r7, #16]
 80018f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2203      	movs	r2, #3
 8001918:	401a      	ands	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	409a      	lsls	r2, r3
 8001920:	0013      	movs	r3, r2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	23c0      	movs	r3, #192	@ 0xc0
 8001934:	029b      	lsls	r3, r3, #10
 8001936:	4013      	ands	r3, r2
 8001938:	d100      	bne.n	800193c <HAL_GPIO_Init+0x174>
 800193a:	e094      	b.n	8001a66 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193c:	4b51      	ldr	r3, [pc, #324]	@ (8001a84 <HAL_GPIO_Init+0x2bc>)
 800193e:	699a      	ldr	r2, [r3, #24]
 8001940:	4b50      	ldr	r3, [pc, #320]	@ (8001a84 <HAL_GPIO_Init+0x2bc>)
 8001942:	2101      	movs	r1, #1
 8001944:	430a      	orrs	r2, r1
 8001946:	619a      	str	r2, [r3, #24]
 8001948:	4b4e      	ldr	r3, [pc, #312]	@ (8001a84 <HAL_GPIO_Init+0x2bc>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2201      	movs	r2, #1
 800194e:	4013      	ands	r3, r2
 8001950:	60bb      	str	r3, [r7, #8]
 8001952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001954:	4a4c      	ldr	r2, [pc, #304]	@ (8001a88 <HAL_GPIO_Init+0x2c0>)
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	589b      	ldr	r3, [r3, r2]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2203      	movs	r2, #3
 8001966:	4013      	ands	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	409a      	lsls	r2, r3
 800196e:	0013      	movs	r3, r2
 8001970:	43da      	mvns	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4013      	ands	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	2390      	movs	r3, #144	@ 0x90
 800197c:	05db      	lsls	r3, r3, #23
 800197e:	429a      	cmp	r2, r3
 8001980:	d00d      	beq.n	800199e <HAL_GPIO_Init+0x1d6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a41      	ldr	r2, [pc, #260]	@ (8001a8c <HAL_GPIO_Init+0x2c4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d007      	beq.n	800199a <HAL_GPIO_Init+0x1d2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a40      	ldr	r2, [pc, #256]	@ (8001a90 <HAL_GPIO_Init+0x2c8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d101      	bne.n	8001996 <HAL_GPIO_Init+0x1ce>
 8001992:	2302      	movs	r3, #2
 8001994:	e004      	b.n	80019a0 <HAL_GPIO_Init+0x1d8>
 8001996:	2305      	movs	r3, #5
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_Init+0x1d8>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_GPIO_Init+0x1d8>
 800199e:	2300      	movs	r3, #0
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	2103      	movs	r1, #3
 80019a4:	400a      	ands	r2, r1
 80019a6:	0092      	lsls	r2, r2, #2
 80019a8:	4093      	lsls	r3, r2
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019b0:	4935      	ldr	r1, [pc, #212]	@ (8001a88 <HAL_GPIO_Init+0x2c0>)
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	089b      	lsrs	r3, r3, #2
 80019b6:	3302      	adds	r3, #2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019be:	4b35      	ldr	r3, [pc, #212]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	2380      	movs	r3, #128	@ 0x80
 80019d4:	035b      	lsls	r3, r3, #13
 80019d6:	4013      	ands	r3, r2
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	43da      	mvns	r2, r3
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4013      	ands	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685a      	ldr	r2, [r3, #4]
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	039b      	lsls	r3, r3, #14
 8001a00:	4013      	ands	r3, r2
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a0c:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a12:	4b20      	ldr	r3, [pc, #128]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	43da      	mvns	r2, r3
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	2380      	movs	r3, #128	@ 0x80
 8001a28:	029b      	lsls	r3, r3, #10
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a36:	4b17      	ldr	r3, [pc, #92]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	43da      	mvns	r2, r3
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685a      	ldr	r2, [r3, #4]
 8001a50:	2380      	movs	r3, #128	@ 0x80
 8001a52:	025b      	lsls	r3, r3, #9
 8001a54:	4013      	ands	r3, r2
 8001a56:	d003      	beq.n	8001a60 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <HAL_GPIO_Init+0x2cc>)
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	40da      	lsrs	r2, r3
 8001a74:	1e13      	subs	r3, r2, #0
 8001a76:	d000      	beq.n	8001a7a <HAL_GPIO_Init+0x2b2>
 8001a78:	e6ae      	b.n	80017d8 <HAL_GPIO_Init+0x10>
  } 
}
 8001a7a:	46c0      	nop			@ (mov r8, r8)
 8001a7c:	46c0      	nop			@ (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b006      	add	sp, #24
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000
 8001a8c:	48000400 	.word	0x48000400
 8001a90:	48000800 	.word	0x48000800
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	000a      	movs	r2, r1
 8001aa2:	1cbb      	adds	r3, r7, #2
 8001aa4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	1cba      	adds	r2, r7, #2
 8001aac:	8812      	ldrh	r2, [r2, #0]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d004      	beq.n	8001abc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001ab2:	230f      	movs	r3, #15
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e003      	b.n	8001ac4 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
  }
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}
	...

08001ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e301      	b.n	80020ea <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_OscConfig+0x1e>
 8001af0:	e08d      	b.n	8001c0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001af2:	4bc3      	ldr	r3, [pc, #780]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	220c      	movs	r2, #12
 8001af8:	4013      	ands	r3, r2
 8001afa:	2b04      	cmp	r3, #4
 8001afc:	d00e      	beq.n	8001b1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001afe:	4bc0      	ldr	r3, [pc, #768]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	220c      	movs	r2, #12
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d116      	bne.n	8001b38 <HAL_RCC_OscConfig+0x64>
 8001b0a:	4bbd      	ldr	r3, [pc, #756]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b0c:	685a      	ldr	r2, [r3, #4]
 8001b0e:	2380      	movs	r3, #128	@ 0x80
 8001b10:	025b      	lsls	r3, r3, #9
 8001b12:	401a      	ands	r2, r3
 8001b14:	2380      	movs	r3, #128	@ 0x80
 8001b16:	025b      	lsls	r3, r3, #9
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10d      	bne.n	8001b38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	4bb8      	ldr	r3, [pc, #736]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	2380      	movs	r3, #128	@ 0x80
 8001b22:	029b      	lsls	r3, r3, #10
 8001b24:	4013      	ands	r3, r2
 8001b26:	d100      	bne.n	8001b2a <HAL_RCC_OscConfig+0x56>
 8001b28:	e070      	b.n	8001c0c <HAL_RCC_OscConfig+0x138>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d000      	beq.n	8001b34 <HAL_RCC_OscConfig+0x60>
 8001b32:	e06b      	b.n	8001c0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e2d8      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d107      	bne.n	8001b50 <HAL_RCC_OscConfig+0x7c>
 8001b40:	4baf      	ldr	r3, [pc, #700]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4bae      	ldr	r3, [pc, #696]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b46:	2180      	movs	r1, #128	@ 0x80
 8001b48:	0249      	lsls	r1, r1, #9
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e02f      	b.n	8001bb0 <HAL_RCC_OscConfig+0xdc>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10c      	bne.n	8001b72 <HAL_RCC_OscConfig+0x9e>
 8001b58:	4ba9      	ldr	r3, [pc, #676]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4ba8      	ldr	r3, [pc, #672]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b5e:	49a9      	ldr	r1, [pc, #676]	@ (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	4ba6      	ldr	r3, [pc, #664]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4ba5      	ldr	r3, [pc, #660]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b6a:	49a7      	ldr	r1, [pc, #668]	@ (8001e08 <HAL_RCC_OscConfig+0x334>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	e01e      	b.n	8001bb0 <HAL_RCC_OscConfig+0xdc>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b05      	cmp	r3, #5
 8001b78:	d10e      	bne.n	8001b98 <HAL_RCC_OscConfig+0xc4>
 8001b7a:	4ba1      	ldr	r3, [pc, #644]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	4ba0      	ldr	r3, [pc, #640]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b80:	2180      	movs	r1, #128	@ 0x80
 8001b82:	02c9      	lsls	r1, r1, #11
 8001b84:	430a      	orrs	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4b9d      	ldr	r3, [pc, #628]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4b9c      	ldr	r3, [pc, #624]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b8e:	2180      	movs	r1, #128	@ 0x80
 8001b90:	0249      	lsls	r1, r1, #9
 8001b92:	430a      	orrs	r2, r1
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	e00b      	b.n	8001bb0 <HAL_RCC_OscConfig+0xdc>
 8001b98:	4b99      	ldr	r3, [pc, #612]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	4b98      	ldr	r3, [pc, #608]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001b9e:	4999      	ldr	r1, [pc, #612]	@ (8001e04 <HAL_RCC_OscConfig+0x330>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	4b96      	ldr	r3, [pc, #600]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b95      	ldr	r3, [pc, #596]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001baa:	4997      	ldr	r1, [pc, #604]	@ (8001e08 <HAL_RCC_OscConfig+0x334>)
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d014      	beq.n	8001be2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb8:	f7ff fb1c 	bl	80011f4 <HAL_GetTick>
 8001bbc:	0003      	movs	r3, r0
 8001bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bc2:	f7ff fb17 	bl	80011f4 <HAL_GetTick>
 8001bc6:	0002      	movs	r2, r0
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b64      	cmp	r3, #100	@ 0x64
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e28a      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd4:	4b8a      	ldr	r3, [pc, #552]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2380      	movs	r3, #128	@ 0x80
 8001bda:	029b      	lsls	r3, r3, #10
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0xee>
 8001be0:	e015      	b.n	8001c0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be2:	f7ff fb07 	bl	80011f4 <HAL_GetTick>
 8001be6:	0003      	movs	r3, r0
 8001be8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff fb02 	bl	80011f4 <HAL_GetTick>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	@ 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e275      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bfe:	4b80      	ldr	r3, [pc, #512]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	029b      	lsls	r3, r3, #10
 8001c06:	4013      	ands	r3, r2
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x118>
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c0c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	4013      	ands	r3, r2
 8001c16:	d100      	bne.n	8001c1a <HAL_RCC_OscConfig+0x146>
 8001c18:	e069      	b.n	8001cee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001c1a:	4b79      	ldr	r3, [pc, #484]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	220c      	movs	r2, #12
 8001c20:	4013      	ands	r3, r2
 8001c22:	d00b      	beq.n	8001c3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001c24:	4b76      	ldr	r3, [pc, #472]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	220c      	movs	r2, #12
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d11c      	bne.n	8001c6a <HAL_RCC_OscConfig+0x196>
 8001c30:	4b73      	ldr	r3, [pc, #460]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c32:	685a      	ldr	r2, [r3, #4]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	025b      	lsls	r3, r3, #9
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d116      	bne.n	8001c6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c3c:	4b70      	ldr	r3, [pc, #448]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2202      	movs	r2, #2
 8001c42:	4013      	ands	r3, r2
 8001c44:	d005      	beq.n	8001c52 <HAL_RCC_OscConfig+0x17e>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d001      	beq.n	8001c52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e24b      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c52:	4b6b      	ldr	r3, [pc, #428]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	22f8      	movs	r2, #248	@ 0xf8
 8001c58:	4393      	bics	r3, r2
 8001c5a:	0019      	movs	r1, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	00da      	lsls	r2, r3, #3
 8001c62:	4b67      	ldr	r3, [pc, #412]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c68:	e041      	b.n	8001cee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d024      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b62      	ldr	r3, [pc, #392]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c78:	2101      	movs	r1, #1
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7e:	f7ff fab9 	bl	80011f4 <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff fab4 	bl	80011f4 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	69bb      	ldr	r3, [r7, #24]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e227      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d0f1      	beq.n	8001c88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca4:	4b56      	ldr	r3, [pc, #344]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	22f8      	movs	r2, #248	@ 0xf8
 8001caa:	4393      	bics	r3, r2
 8001cac:	0019      	movs	r1, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00da      	lsls	r2, r3, #3
 8001cb4:	4b52      	ldr	r3, [pc, #328]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e018      	b.n	8001cee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b50      	ldr	r3, [pc, #320]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	438a      	bics	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fa94 	bl	80011f4 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cd2:	f7ff fa8f 	bl	80011f4 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e202      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce4:	4b46      	ldr	r3, [pc, #280]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d1f1      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2208      	movs	r2, #8
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d036      	beq.n	8001d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d019      	beq.n	8001d34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d00:	4b3f      	ldr	r3, [pc, #252]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d04:	4b3e      	ldr	r3, [pc, #248]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fa72 	bl	80011f4 <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d16:	f7ff fa6d 	bl	80011f4 <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e1e0      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d28:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	4013      	ands	r3, r2
 8001d30:	d0f1      	beq.n	8001d16 <HAL_RCC_OscConfig+0x242>
 8001d32:	e018      	b.n	8001d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d34:	4b32      	ldr	r3, [pc, #200]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d38:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	438a      	bics	r2, r1
 8001d3e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7ff fa58 	bl	80011f4 <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d4a:	f7ff fa53 	bl	80011f4 <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1c6      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5c:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d1f1      	bne.n	8001d4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d100      	bne.n	8001d72 <HAL_RCC_OscConfig+0x29e>
 8001d70:	e0b4      	b.n	8001edc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	201f      	movs	r0, #31
 8001d74:	183b      	adds	r3, r7, r0
 8001d76:	2200      	movs	r2, #0
 8001d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	69da      	ldr	r2, [r3, #28]
 8001d7e:	2380      	movs	r3, #128	@ 0x80
 8001d80:	055b      	lsls	r3, r3, #21
 8001d82:	4013      	ands	r3, r2
 8001d84:	d110      	bne.n	8001da8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d86:	4b1e      	ldr	r3, [pc, #120]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d88:	69da      	ldr	r2, [r3, #28]
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d8c:	2180      	movs	r1, #128	@ 0x80
 8001d8e:	0549      	lsls	r1, r1, #21
 8001d90:	430a      	orrs	r2, r1
 8001d92:	61da      	str	r2, [r3, #28]
 8001d94:	4b1a      	ldr	r3, [pc, #104]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001d96:	69da      	ldr	r2, [r3, #28]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	055b      	lsls	r3, r3, #21
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001da2:	183b      	adds	r3, r7, r0
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da8:	4b18      	ldr	r3, [pc, #96]	@ (8001e0c <HAL_RCC_OscConfig+0x338>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4013      	ands	r3, r2
 8001db2:	d11a      	bne.n	8001dea <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001db4:	4b15      	ldr	r3, [pc, #84]	@ (8001e0c <HAL_RCC_OscConfig+0x338>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	4b14      	ldr	r3, [pc, #80]	@ (8001e0c <HAL_RCC_OscConfig+0x338>)
 8001dba:	2180      	movs	r1, #128	@ 0x80
 8001dbc:	0049      	lsls	r1, r1, #1
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc2:	f7ff fa17 	bl	80011f4 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dcc:	f7ff fa12 	bl	80011f4 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	@ 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e185      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_OscConfig+0x338>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d10e      	bne.n	8001e10 <HAL_RCC_OscConfig+0x33c>
 8001df2:	4b03      	ldr	r3, [pc, #12]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	4b02      	ldr	r3, [pc, #8]	@ (8001e00 <HAL_RCC_OscConfig+0x32c>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	621a      	str	r2, [r3, #32]
 8001dfe:	e035      	b.n	8001e6c <HAL_RCC_OscConfig+0x398>
 8001e00:	40021000 	.word	0x40021000
 8001e04:	fffeffff 	.word	0xfffeffff
 8001e08:	fffbffff 	.word	0xfffbffff
 8001e0c:	40007000 	.word	0x40007000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10c      	bne.n	8001e32 <HAL_RCC_OscConfig+0x35e>
 8001e18:	4bb6      	ldr	r3, [pc, #728]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e1a:	6a1a      	ldr	r2, [r3, #32]
 8001e1c:	4bb5      	ldr	r3, [pc, #724]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	621a      	str	r2, [r3, #32]
 8001e24:	4bb3      	ldr	r3, [pc, #716]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e26:	6a1a      	ldr	r2, [r3, #32]
 8001e28:	4bb2      	ldr	r3, [pc, #712]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e2a:	2104      	movs	r1, #4
 8001e2c:	438a      	bics	r2, r1
 8001e2e:	621a      	str	r2, [r3, #32]
 8001e30:	e01c      	b.n	8001e6c <HAL_RCC_OscConfig+0x398>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b05      	cmp	r3, #5
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x380>
 8001e3a:	4bae      	ldr	r3, [pc, #696]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e3c:	6a1a      	ldr	r2, [r3, #32]
 8001e3e:	4bad      	ldr	r3, [pc, #692]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e40:	2104      	movs	r1, #4
 8001e42:	430a      	orrs	r2, r1
 8001e44:	621a      	str	r2, [r3, #32]
 8001e46:	4bab      	ldr	r3, [pc, #684]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e48:	6a1a      	ldr	r2, [r3, #32]
 8001e4a:	4baa      	ldr	r3, [pc, #680]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	621a      	str	r2, [r3, #32]
 8001e52:	e00b      	b.n	8001e6c <HAL_RCC_OscConfig+0x398>
 8001e54:	4ba7      	ldr	r3, [pc, #668]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e56:	6a1a      	ldr	r2, [r3, #32]
 8001e58:	4ba6      	ldr	r3, [pc, #664]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	438a      	bics	r2, r1
 8001e5e:	621a      	str	r2, [r3, #32]
 8001e60:	4ba4      	ldr	r3, [pc, #656]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e62:	6a1a      	ldr	r2, [r3, #32]
 8001e64:	4ba3      	ldr	r3, [pc, #652]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e66:	2104      	movs	r1, #4
 8001e68:	438a      	bics	r2, r1
 8001e6a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d014      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e74:	f7ff f9be 	bl	80011f4 <HAL_GetTick>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7c:	e009      	b.n	8001e92 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7e:	f7ff f9b9 	bl	80011f4 <HAL_GetTick>
 8001e82:	0002      	movs	r2, r0
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	4a9b      	ldr	r2, [pc, #620]	@ (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e12b      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e92:	4b98      	ldr	r3, [pc, #608]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001e94:	6a1b      	ldr	r3, [r3, #32]
 8001e96:	2202      	movs	r2, #2
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d0f0      	beq.n	8001e7e <HAL_RCC_OscConfig+0x3aa>
 8001e9c:	e013      	b.n	8001ec6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f9a9 	bl	80011f4 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea6:	e009      	b.n	8001ebc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f9a4 	bl	80011f4 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	4a91      	ldr	r2, [pc, #580]	@ (80020f8 <HAL_RCC_OscConfig+0x624>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e116      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	4b8d      	ldr	r3, [pc, #564]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec6:	231f      	movs	r3, #31
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b88      	ldr	r3, [pc, #544]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001ed2:	69da      	ldr	r2, [r3, #28]
 8001ed4:	4b87      	ldr	r3, [pc, #540]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001ed6:	4989      	ldr	r1, [pc, #548]	@ (80020fc <HAL_RCC_OscConfig+0x628>)
 8001ed8:	400a      	ands	r2, r1
 8001eda:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d063      	beq.n	8001fae <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d12a      	bne.n	8001f44 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001eee:	4b81      	ldr	r3, [pc, #516]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001ef0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ef2:	4b80      	ldr	r3, [pc, #512]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001ef4:	2104      	movs	r1, #4
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001efa:	4b7e      	ldr	r3, [pc, #504]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001efe:	4b7d      	ldr	r3, [pc, #500]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f06:	f7ff f975 	bl	80011f4 <HAL_GetTick>
 8001f0a:	0003      	movs	r3, r0
 8001f0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f10:	f7ff f970 	bl	80011f4 <HAL_GetTick>
 8001f14:	0002      	movs	r2, r0
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e0e3      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001f22:	4b74      	ldr	r3, [pc, #464]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f26:	2202      	movs	r2, #2
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f1      	beq.n	8001f10 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f2c:	4b71      	ldr	r3, [pc, #452]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f30:	22f8      	movs	r2, #248	@ 0xf8
 8001f32:	4393      	bics	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	699b      	ldr	r3, [r3, #24]
 8001f3a:	00da      	lsls	r2, r3, #3
 8001f3c:	4b6d      	ldr	r3, [pc, #436]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f42:	e034      	b.n	8001fae <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	3305      	adds	r3, #5
 8001f4a:	d111      	bne.n	8001f70 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001f4c:	4b69      	ldr	r3, [pc, #420]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f50:	4b68      	ldr	r3, [pc, #416]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f52:	2104      	movs	r1, #4
 8001f54:	438a      	bics	r2, r1
 8001f56:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001f58:	4b66      	ldr	r3, [pc, #408]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f5c:	22f8      	movs	r2, #248	@ 0xf8
 8001f5e:	4393      	bics	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	00da      	lsls	r2, r3, #3
 8001f68:	4b62      	ldr	r3, [pc, #392]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f6e:	e01e      	b.n	8001fae <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001f70:	4b60      	ldr	r3, [pc, #384]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f74:	4b5f      	ldr	r3, [pc, #380]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f76:	2104      	movs	r1, #4
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001f7c:	4b5d      	ldr	r3, [pc, #372]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f80:	4b5c      	ldr	r3, [pc, #368]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001f82:	2101      	movs	r1, #1
 8001f84:	438a      	bics	r2, r1
 8001f86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7ff f934 	bl	80011f4 <HAL_GetTick>
 8001f8c:	0003      	movs	r3, r0
 8001f8e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001f92:	f7ff f92f 	bl	80011f4 <HAL_GetTick>
 8001f96:	0002      	movs	r2, r0
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0a2      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001fa4:	4b53      	ldr	r3, [pc, #332]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa8:	2202      	movs	r2, #2
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1f1      	bne.n	8001f92 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d100      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x4e4>
 8001fb6:	e097      	b.n	80020e8 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	220c      	movs	r2, #12
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b08      	cmp	r3, #8
 8001fc2:	d100      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x4f2>
 8001fc4:	e06b      	b.n	800209e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d14c      	bne.n	8002068 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fce:	4b49      	ldr	r3, [pc, #292]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	4b48      	ldr	r3, [pc, #288]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001fd4:	494a      	ldr	r1, [pc, #296]	@ (8002100 <HAL_RCC_OscConfig+0x62c>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff f90b 	bl	80011f4 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f906 	bl	80011f4 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	69bb      	ldr	r3, [r7, #24]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e079      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff6:	4b3f      	ldr	r3, [pc, #252]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	@ 0x80
 8001ffc:	049b      	lsls	r3, r3, #18
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002002:	4b3c      	ldr	r3, [pc, #240]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	220f      	movs	r2, #15
 8002008:	4393      	bics	r3, r2
 800200a:	0019      	movs	r1, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002010:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8002012:	430a      	orrs	r2, r1
 8002014:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002016:	4b37      	ldr	r3, [pc, #220]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	4a3a      	ldr	r2, [pc, #232]	@ (8002104 <HAL_RCC_OscConfig+0x630>)
 800201c:	4013      	ands	r3, r2
 800201e:	0019      	movs	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002028:	431a      	orrs	r2, r3
 800202a:	4b32      	ldr	r3, [pc, #200]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 800202c:	430a      	orrs	r2, r1
 800202e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b30      	ldr	r3, [pc, #192]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b2f      	ldr	r3, [pc, #188]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8002036:	2180      	movs	r1, #128	@ 0x80
 8002038:	0449      	lsls	r1, r1, #17
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203e:	f7ff f8d9 	bl	80011f4 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f8d4 	bl	80011f4 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e047      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800205a:	4b26      	ldr	r3, [pc, #152]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	2380      	movs	r3, #128	@ 0x80
 8002060:	049b      	lsls	r3, r3, #18
 8002062:	4013      	ands	r3, r2
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0x574>
 8002066:	e03f      	b.n	80020e8 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002068:	4b22      	ldr	r3, [pc, #136]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	4b21      	ldr	r3, [pc, #132]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 800206e:	4924      	ldr	r1, [pc, #144]	@ (8002100 <HAL_RCC_OscConfig+0x62c>)
 8002070:	400a      	ands	r2, r1
 8002072:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff f8be 	bl	80011f4 <HAL_GetTick>
 8002078:	0003      	movs	r3, r0
 800207a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207e:	f7ff f8b9 	bl	80011f4 <HAL_GetTick>
 8002082:	0002      	movs	r2, r0
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e02c      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002090:	4b18      	ldr	r3, [pc, #96]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	049b      	lsls	r3, r3, #18
 8002098:	4013      	ands	r3, r2
 800209a:	d1f0      	bne.n	800207e <HAL_RCC_OscConfig+0x5aa>
 800209c:	e024      	b.n	80020e8 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e01f      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80020aa:	4b12      	ldr	r3, [pc, #72]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80020b0:	4b10      	ldr	r3, [pc, #64]	@ (80020f4 <HAL_RCC_OscConfig+0x620>)
 80020b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020b6:	697a      	ldr	r2, [r7, #20]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	025b      	lsls	r3, r3, #9
 80020bc:	401a      	ands	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d10e      	bne.n	80020e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	220f      	movs	r2, #15
 80020ca:	401a      	ands	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d107      	bne.n	80020e4 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	23f0      	movs	r3, #240	@ 0xf0
 80020d8:	039b      	lsls	r3, r3, #14
 80020da:	401a      	ands	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b008      	add	sp, #32
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	40021000 	.word	0x40021000
 80020f8:	00001388 	.word	0x00001388
 80020fc:	efffffff 	.word	0xefffffff
 8002100:	feffffff 	.word	0xfeffffff
 8002104:	ffc2ffff 	.word	0xffc2ffff

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0b3      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b5b      	ldr	r3, [pc, #364]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d911      	bls.n	800214e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b58      	ldr	r3, [pc, #352]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	4393      	bics	r3, r2
 8002132:	0019      	movs	r1, r3
 8002134:	4b55      	ldr	r3, [pc, #340]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800213c:	4b53      	ldr	r3, [pc, #332]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2201      	movs	r2, #1
 8002142:	4013      	ands	r3, r2
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d001      	beq.n	800214e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e09a      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d015      	beq.n	8002184 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2204      	movs	r2, #4
 800215e:	4013      	ands	r3, r2
 8002160:	d006      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002162:	4b4b      	ldr	r3, [pc, #300]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	4b4a      	ldr	r3, [pc, #296]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002168:	21e0      	movs	r1, #224	@ 0xe0
 800216a:	00c9      	lsls	r1, r1, #3
 800216c:	430a      	orrs	r2, r1
 800216e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002170:	4b47      	ldr	r3, [pc, #284]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	22f0      	movs	r2, #240	@ 0xf0
 8002176:	4393      	bics	r3, r2
 8002178:	0019      	movs	r1, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	4b44      	ldr	r3, [pc, #272]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002180:	430a      	orrs	r2, r1
 8002182:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	4013      	ands	r3, r2
 800218c:	d040      	beq.n	8002210 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d107      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002196:	4b3e      	ldr	r3, [pc, #248]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	@ 0x80
 800219c:	029b      	lsls	r3, r3, #10
 800219e:	4013      	ands	r3, r2
 80021a0:	d114      	bne.n	80021cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e06e      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ae:	4b38      	ldr	r3, [pc, #224]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	@ 0x80
 80021b4:	049b      	lsls	r3, r3, #18
 80021b6:	4013      	ands	r3, r2
 80021b8:	d108      	bne.n	80021cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e062      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021be:	4b34      	ldr	r3, [pc, #208]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	2202      	movs	r2, #2
 80021c4:	4013      	ands	r3, r2
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e05b      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021cc:	4b30      	ldr	r3, [pc, #192]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2203      	movs	r2, #3
 80021d2:	4393      	bics	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4b2d      	ldr	r3, [pc, #180]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021e0:	f7ff f808 	bl	80011f4 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e8:	e009      	b.n	80021fe <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ea:	f7ff f803 	bl	80011f4 <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	4a27      	ldr	r2, [pc, #156]	@ (8002294 <HAL_RCC_ClockConfig+0x18c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e042      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	4b24      	ldr	r3, [pc, #144]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	220c      	movs	r2, #12
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	429a      	cmp	r2, r3
 800220e:	d1ec      	bne.n	80021ea <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002210:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d211      	bcs.n	8002242 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2201      	movs	r2, #1
 8002224:	4393      	bics	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	4b18      	ldr	r3, [pc, #96]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002230:	4b16      	ldr	r3, [pc, #88]	@ (800228c <HAL_RCC_ClockConfig+0x184>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e020      	b.n	8002284 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2204      	movs	r2, #4
 8002248:	4013      	ands	r3, r2
 800224a:	d009      	beq.n	8002260 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a11      	ldr	r2, [pc, #68]	@ (8002298 <HAL_RCC_ClockConfig+0x190>)
 8002252:	4013      	ands	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002260:	f000 f820 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 8002264:	0001      	movs	r1, r0
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_RCC_ClockConfig+0x188>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	091b      	lsrs	r3, r3, #4
 800226c:	220f      	movs	r2, #15
 800226e:	4013      	ands	r3, r2
 8002270:	4a0a      	ldr	r2, [pc, #40]	@ (800229c <HAL_RCC_ClockConfig+0x194>)
 8002272:	5cd3      	ldrb	r3, [r2, r3]
 8002274:	000a      	movs	r2, r1
 8002276:	40da      	lsrs	r2, r3
 8002278:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <HAL_RCC_ClockConfig+0x198>)
 800227a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800227c:	2003      	movs	r0, #3
 800227e:	f7fe ff73 	bl	8001168 <HAL_InitTick>
  
  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	0018      	movs	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	b004      	add	sp, #16
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40022000 	.word	0x40022000
 8002290:	40021000 	.word	0x40021000
 8002294:	00001388 	.word	0x00001388
 8002298:	fffff8ff 	.word	0xfffff8ff
 800229c:	0800363c 	.word	0x0800363c
 80022a0:	20000008 	.word	0x20000008

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80022be:	4b20      	ldr	r3, [pc, #128]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	220c      	movs	r2, #12
 80022c8:	4013      	ands	r3, r2
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x36>
 80022d2:	e02c      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022d6:	613b      	str	r3, [r7, #16]
      break;
 80022d8:	e02c      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	220f      	movs	r2, #15
 80022e0:	4013      	ands	r3, r2
 80022e2:	4a19      	ldr	r2, [pc, #100]	@ (8002348 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80022e8:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ec:	220f      	movs	r2, #15
 80022ee:	4013      	ands	r3, r2
 80022f0:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_RCC_GetSysClockFreq+0xa8>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	2380      	movs	r3, #128	@ 0x80
 80022fa:	025b      	lsls	r3, r3, #9
 80022fc:	4013      	ands	r3, r2
 80022fe:	d009      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	4810      	ldr	r0, [pc, #64]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002304:	f7fd ff00 	bl	8000108 <__udivsi3>
 8002308:	0003      	movs	r3, r0
 800230a:	001a      	movs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4353      	muls	r3, r2
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e009      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	000a      	movs	r2, r1
 8002318:	0152      	lsls	r2, r2, #5
 800231a:	1a52      	subs	r2, r2, r1
 800231c:	0193      	lsls	r3, r2, #6
 800231e:	1a9b      	subs	r3, r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	185b      	adds	r3, r3, r1
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	613b      	str	r3, [r7, #16]
      break;
 800232c:	e002      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800232e:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002330:	613b      	str	r3, [r7, #16]
      break;
 8002332:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002334:	693b      	ldr	r3, [r7, #16]
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b006      	add	sp, #24
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			@ (mov r8, r8)
 8002340:	40021000 	.word	0x40021000
 8002344:	007a1200 	.word	0x007a1200
 8002348:	0800364c 	.word	0x0800364c
 800234c:	0800365c 	.word	0x0800365c

08002350 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e042      	b.n	80023e8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	223d      	movs	r2, #61	@ 0x3d
 8002366:	5c9b      	ldrb	r3, [r3, r2]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	223c      	movs	r2, #60	@ 0x3c
 8002372:	2100      	movs	r1, #0
 8002374:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f7fe fdfd 	bl	8000f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	223d      	movs	r2, #61	@ 0x3d
 8002382:	2102      	movs	r1, #2
 8002384:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	0019      	movs	r1, r3
 8002390:	0010      	movs	r0, r2
 8002392:	f000 fd85 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2246      	movs	r2, #70	@ 0x46
 800239a:	2101      	movs	r1, #1
 800239c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	223e      	movs	r2, #62	@ 0x3e
 80023a2:	2101      	movs	r1, #1
 80023a4:	5499      	strb	r1, [r3, r2]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	223f      	movs	r2, #63	@ 0x3f
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2240      	movs	r2, #64	@ 0x40
 80023b2:	2101      	movs	r1, #1
 80023b4:	5499      	strb	r1, [r3, r2]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2241      	movs	r2, #65	@ 0x41
 80023ba:	2101      	movs	r1, #1
 80023bc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2242      	movs	r2, #66	@ 0x42
 80023c2:	2101      	movs	r1, #1
 80023c4:	5499      	strb	r1, [r3, r2]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2243      	movs	r2, #67	@ 0x43
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2244      	movs	r2, #68	@ 0x44
 80023d2:	2101      	movs	r1, #1
 80023d4:	5499      	strb	r1, [r3, r2]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2245      	movs	r2, #69	@ 0x45
 80023da:	2101      	movs	r1, #1
 80023dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	223d      	movs	r2, #61	@ 0x3d
 80023e2:	2101      	movs	r1, #1
 80023e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e6:	2300      	movs	r3, #0
}
 80023e8:	0018      	movs	r0, r3
 80023ea:	46bd      	mov	sp, r7
 80023ec:	b002      	add	sp, #8
 80023ee:	bd80      	pop	{r7, pc}

080023f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e042      	b.n	8002488 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	223d      	movs	r2, #61	@ 0x3d
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b00      	cmp	r3, #0
 800240c:	d107      	bne.n	800241e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	223c      	movs	r2, #60	@ 0x3c
 8002412:	2100      	movs	r1, #0
 8002414:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	0018      	movs	r0, r3
 800241a:	f000 f839 	bl	8002490 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	223d      	movs	r2, #61	@ 0x3d
 8002422:	2102      	movs	r1, #2
 8002424:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3304      	adds	r3, #4
 800242e:	0019      	movs	r1, r3
 8002430:	0010      	movs	r0, r2
 8002432:	f000 fd35 	bl	8002ea0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2246      	movs	r2, #70	@ 0x46
 800243a:	2101      	movs	r1, #1
 800243c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	223e      	movs	r2, #62	@ 0x3e
 8002442:	2101      	movs	r1, #1
 8002444:	5499      	strb	r1, [r3, r2]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	223f      	movs	r2, #63	@ 0x3f
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2240      	movs	r2, #64	@ 0x40
 8002452:	2101      	movs	r1, #1
 8002454:	5499      	strb	r1, [r3, r2]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2241      	movs	r2, #65	@ 0x41
 800245a:	2101      	movs	r1, #1
 800245c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2242      	movs	r2, #66	@ 0x42
 8002462:	2101      	movs	r1, #1
 8002464:	5499      	strb	r1, [r3, r2]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2243      	movs	r2, #67	@ 0x43
 800246a:	2101      	movs	r1, #1
 800246c:	5499      	strb	r1, [r3, r2]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2244      	movs	r2, #68	@ 0x44
 8002472:	2101      	movs	r1, #1
 8002474:	5499      	strb	r1, [r3, r2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2245      	movs	r2, #69	@ 0x45
 800247a:	2101      	movs	r1, #1
 800247c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	223d      	movs	r2, #61	@ 0x3d
 8002482:	2101      	movs	r1, #1
 8002484:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b002      	add	sp, #8
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002498:	46c0      	nop			@ (mov r8, r8)
 800249a:	46bd      	mov	sp, r7
 800249c:	b002      	add	sp, #8
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
 80024ac:	001a      	movs	r2, r3
 80024ae:	1cbb      	adds	r3, r7, #2
 80024b0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024b2:	2317      	movs	r3, #23
 80024b4:	18fb      	adds	r3, r7, r3
 80024b6:	2200      	movs	r2, #0
 80024b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d108      	bne.n	80024d2 <HAL_TIM_PWM_Start_DMA+0x32>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	223e      	movs	r2, #62	@ 0x3e
 80024c4:	5c9b      	ldrb	r3, [r3, r2]
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	3b02      	subs	r3, #2
 80024ca:	425a      	negs	r2, r3
 80024cc:	4153      	adcs	r3, r2
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	e01f      	b.n	8002512 <HAL_TIM_PWM_Start_DMA+0x72>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d108      	bne.n	80024ea <HAL_TIM_PWM_Start_DMA+0x4a>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	223f      	movs	r2, #63	@ 0x3f
 80024dc:	5c9b      	ldrb	r3, [r3, r2]
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3b02      	subs	r3, #2
 80024e2:	425a      	negs	r2, r3
 80024e4:	4153      	adcs	r3, r2
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	e013      	b.n	8002512 <HAL_TIM_PWM_Start_DMA+0x72>
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d108      	bne.n	8002502 <HAL_TIM_PWM_Start_DMA+0x62>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2240      	movs	r2, #64	@ 0x40
 80024f4:	5c9b      	ldrb	r3, [r3, r2]
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	3b02      	subs	r3, #2
 80024fa:	425a      	negs	r2, r3
 80024fc:	4153      	adcs	r3, r2
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	e007      	b.n	8002512 <HAL_TIM_PWM_Start_DMA+0x72>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2241      	movs	r2, #65	@ 0x41
 8002506:	5c9b      	ldrb	r3, [r3, r2]
 8002508:	b2db      	uxtb	r3, r3
 800250a:	3b02      	subs	r3, #2
 800250c:	425a      	negs	r2, r3
 800250e:	4153      	adcs	r3, r2
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002516:	2302      	movs	r3, #2
 8002518:	e15a      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d108      	bne.n	8002532 <HAL_TIM_PWM_Start_DMA+0x92>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	223e      	movs	r2, #62	@ 0x3e
 8002524:	5c9b      	ldrb	r3, [r3, r2]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3b01      	subs	r3, #1
 800252a:	425a      	negs	r2, r3
 800252c:	4153      	adcs	r3, r2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	e01f      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d108      	bne.n	800254a <HAL_TIM_PWM_Start_DMA+0xaa>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	223f      	movs	r2, #63	@ 0x3f
 800253c:	5c9b      	ldrb	r3, [r3, r2]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	425a      	negs	r2, r3
 8002544:	4153      	adcs	r3, r2
 8002546:	b2db      	uxtb	r3, r3
 8002548:	e013      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0xd2>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d108      	bne.n	8002562 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2240      	movs	r2, #64	@ 0x40
 8002554:	5c9b      	ldrb	r3, [r3, r2]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	425a      	negs	r2, r3
 800255c:	4153      	adcs	r3, r2
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e007      	b.n	8002572 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2241      	movs	r2, #65	@ 0x41
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	425a      	negs	r2, r3
 800256e:	4153      	adcs	r3, r2
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d025      	beq.n	80025c2 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) || (Length == 0U))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <HAL_TIM_PWM_Start_DMA+0xe4>
 800257c:	1cbb      	adds	r3, r7, #2
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e123      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <HAL_TIM_PWM_Start_DMA+0xf8>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	223e      	movs	r2, #62	@ 0x3e
 8002592:	2102      	movs	r1, #2
 8002594:	5499      	strb	r1, [r3, r2]
 8002596:	e016      	b.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x126>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b04      	cmp	r3, #4
 800259c:	d104      	bne.n	80025a8 <HAL_TIM_PWM_Start_DMA+0x108>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	223f      	movs	r2, #63	@ 0x3f
 80025a2:	2102      	movs	r1, #2
 80025a4:	5499      	strb	r1, [r3, r2]
 80025a6:	e00e      	b.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x126>
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d104      	bne.n	80025b8 <HAL_TIM_PWM_Start_DMA+0x118>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2240      	movs	r2, #64	@ 0x40
 80025b2:	2102      	movs	r1, #2
 80025b4:	5499      	strb	r1, [r3, r2]
 80025b6:	e006      	b.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x126>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2241      	movs	r2, #65	@ 0x41
 80025bc:	2102      	movs	r1, #2
 80025be:	5499      	strb	r1, [r3, r2]
 80025c0:	e001      	b.n	80025c6 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e104      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
  }

  switch (Channel)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2b0c      	cmp	r3, #12
 80025ca:	d100      	bne.n	80025ce <HAL_TIM_PWM_Start_DMA+0x12e>
 80025cc:	e080      	b.n	80026d0 <HAL_TIM_PWM_Start_DMA+0x230>
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	d900      	bls.n	80025d6 <HAL_TIM_PWM_Start_DMA+0x136>
 80025d4:	e0a1      	b.n	800271a <HAL_TIM_PWM_Start_DMA+0x27a>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d054      	beq.n	8002686 <HAL_TIM_PWM_Start_DMA+0x1e6>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d900      	bls.n	80025e4 <HAL_TIM_PWM_Start_DMA+0x144>
 80025e2:	e09a      	b.n	800271a <HAL_TIM_PWM_Start_DMA+0x27a>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_PWM_Start_DMA+0x152>
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d025      	beq.n	800263c <HAL_TIM_PWM_Start_DMA+0x19c>
 80025f0:	e093      	b.n	800271a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f6:	4a78      	ldr	r2, [pc, #480]	@ (80027d8 <HAL_TIM_PWM_Start_DMA+0x338>)
 80025f8:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	4a77      	ldr	r2, [pc, #476]	@ (80027dc <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002600:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002606:	4a76      	ldr	r2, [pc, #472]	@ (80027e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002608:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	3334      	adds	r3, #52	@ 0x34
 8002616:	001a      	movs	r2, r3
 8002618:	1cbb      	adds	r3, r7, #2
 800261a:	881b      	ldrh	r3, [r3, #0]
 800261c:	f7fe ff3e 	bl	800149c <HAL_DMA_Start_IT>
 8002620:	1e03      	subs	r3, r0, #0
 8002622:	d001      	beq.n	8002628 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e0d3      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68da      	ldr	r2, [r3, #12]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2180      	movs	r1, #128	@ 0x80
 8002634:	0089      	lsls	r1, r1, #2
 8002636:	430a      	orrs	r2, r1
 8002638:	60da      	str	r2, [r3, #12]
      break;
 800263a:	e073      	b.n	8002724 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	4a65      	ldr	r2, [pc, #404]	@ (80027d8 <HAL_TIM_PWM_Start_DMA+0x338>)
 8002642:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	4a64      	ldr	r2, [pc, #400]	@ (80027dc <HAL_TIM_PWM_Start_DMA+0x33c>)
 800264a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002650:	4a63      	ldr	r2, [pc, #396]	@ (80027e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 8002652:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8002658:	6879      	ldr	r1, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	3338      	adds	r3, #56	@ 0x38
 8002660:	001a      	movs	r2, r3
 8002662:	1cbb      	adds	r3, r7, #2
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	f7fe ff19 	bl	800149c <HAL_DMA_Start_IT>
 800266a:	1e03      	subs	r3, r0, #0
 800266c:	d001      	beq.n	8002672 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e0ae      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2180      	movs	r1, #128	@ 0x80
 800267e:	00c9      	lsls	r1, r1, #3
 8002680:	430a      	orrs	r2, r1
 8002682:	60da      	str	r2, [r3, #12]
      break;
 8002684:	e04e      	b.n	8002724 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268a:	4a53      	ldr	r2, [pc, #332]	@ (80027d8 <HAL_TIM_PWM_Start_DMA+0x338>)
 800268c:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	4a52      	ldr	r2, [pc, #328]	@ (80027dc <HAL_TIM_PWM_Start_DMA+0x33c>)
 8002694:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269a:	4a51      	ldr	r2, [pc, #324]	@ (80027e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 800269c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	333c      	adds	r3, #60	@ 0x3c
 80026aa:	001a      	movs	r2, r3
 80026ac:	1cbb      	adds	r3, r7, #2
 80026ae:	881b      	ldrh	r3, [r3, #0]
 80026b0:	f7fe fef4 	bl	800149c <HAL_DMA_Start_IT>
 80026b4:	1e03      	subs	r3, r0, #0
 80026b6:	d001      	beq.n	80026bc <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e089      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2180      	movs	r1, #128	@ 0x80
 80026c8:	0109      	lsls	r1, r1, #4
 80026ca:	430a      	orrs	r2, r1
 80026cc:	60da      	str	r2, [r3, #12]
      break;
 80026ce:	e029      	b.n	8002724 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d4:	4a40      	ldr	r2, [pc, #256]	@ (80027d8 <HAL_TIM_PWM_Start_DMA+0x338>)
 80026d6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	4a3f      	ldr	r2, [pc, #252]	@ (80027dc <HAL_TIM_PWM_Start_DMA+0x33c>)
 80026de:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e4:	4a3e      	ldr	r2, [pc, #248]	@ (80027e0 <HAL_TIM_PWM_Start_DMA+0x340>)
 80026e6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3340      	adds	r3, #64	@ 0x40
 80026f4:	001a      	movs	r2, r3
 80026f6:	1cbb      	adds	r3, r7, #2
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	f7fe fecf 	bl	800149c <HAL_DMA_Start_IT>
 80026fe:	1e03      	subs	r3, r0, #0
 8002700:	d001      	beq.n	8002706 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e064      	b.n	80027d0 <HAL_TIM_PWM_Start_DMA+0x330>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2180      	movs	r1, #128	@ 0x80
 8002712:	0149      	lsls	r1, r1, #5
 8002714:	430a      	orrs	r2, r1
 8002716:	60da      	str	r2, [r3, #12]
      break;
 8002718:	e004      	b.n	8002724 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 800271a:	2317      	movs	r3, #23
 800271c:	18fb      	adds	r3, r7, r3
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
      break;
 8002722:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002724:	2317      	movs	r3, #23
 8002726:	18fb      	adds	r3, r7, r3
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d14d      	bne.n	80027ca <HAL_TIM_PWM_Start_DMA+0x32a>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68b9      	ldr	r1, [r7, #8]
 8002734:	2201      	movs	r2, #1
 8002736:	0018      	movs	r0, r3
 8002738:	f000 feb0 	bl	800349c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a28      	ldr	r2, [pc, #160]	@ (80027e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIM_PWM_Start_DMA+0x2ba>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a27      	ldr	r2, [pc, #156]	@ (80027e8 <HAL_TIM_PWM_Start_DMA+0x348>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_TIM_PWM_Start_DMA+0x2ba>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a25      	ldr	r2, [pc, #148]	@ (80027ec <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_TIM_PWM_Start_DMA+0x2be>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <HAL_TIM_PWM_Start_DMA+0x2c0>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_TIM_PWM_Start_DMA+0x2d6>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2180      	movs	r1, #128	@ 0x80
 8002770:	0209      	lsls	r1, r1, #8
 8002772:	430a      	orrs	r2, r1
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a1a      	ldr	r2, [pc, #104]	@ (80027e4 <HAL_TIM_PWM_Start_DMA+0x344>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00a      	beq.n	8002796 <HAL_TIM_PWM_Start_DMA+0x2f6>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	@ 0x80
 8002786:	05db      	lsls	r3, r3, #23
 8002788:	429a      	cmp	r2, r3
 800278a:	d004      	beq.n	8002796 <HAL_TIM_PWM_Start_DMA+0x2f6>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d111      	bne.n	80027ba <HAL_TIM_PWM_Start_DMA+0x31a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2207      	movs	r2, #7
 800279e:	4013      	ands	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	2b06      	cmp	r3, #6
 80027a6:	d010      	beq.n	80027ca <HAL_TIM_PWM_Start_DMA+0x32a>
      {
        __HAL_TIM_ENABLE(htim);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2101      	movs	r1, #1
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027b8:	e007      	b.n	80027ca <HAL_TIM_PWM_Start_DMA+0x32a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80027ca:	2317      	movs	r3, #23
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	781b      	ldrb	r3, [r3, #0]
}
 80027d0:	0018      	movs	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b006      	add	sp, #24
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	08002d8d 	.word	0x08002d8d
 80027dc:	08002e37 	.word	0x08002e37
 80027e0:	08002cf9 	.word	0x08002cf9
 80027e4:	40012c00 	.word	0x40012c00
 80027e8:	40014400 	.word	0x40014400
 80027ec:	40014800 	.word	0x40014800
 80027f0:	40000400 	.word	0x40000400

080027f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027fe:	230f      	movs	r3, #15
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b0c      	cmp	r3, #12
 800280a:	d039      	beq.n	8002880 <HAL_TIM_PWM_Stop_DMA+0x8c>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	2b0c      	cmp	r3, #12
 8002810:	d844      	bhi.n	800289c <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	2b08      	cmp	r3, #8
 8002816:	d025      	beq.n	8002864 <HAL_TIM_PWM_Stop_DMA+0x70>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	2b08      	cmp	r3, #8
 800281c:	d83e      	bhi.n	800289c <HAL_TIM_PWM_Stop_DMA+0xa8>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d003      	beq.n	800282c <HAL_TIM_PWM_Stop_DMA+0x38>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00e      	beq.n	8002848 <HAL_TIM_PWM_Stop_DMA+0x54>
 800282a:	e037      	b.n	800289c <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4951      	ldr	r1, [pc, #324]	@ (800297c <HAL_TIM_PWM_Stop_DMA+0x188>)
 8002838:	400a      	ands	r2, r1
 800283a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	0018      	movs	r0, r3
 8002842:	f7fe fe91 	bl	8001568 <HAL_DMA_Abort_IT>
      break;
 8002846:	e02e      	b.n	80028a6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68da      	ldr	r2, [r3, #12]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	494b      	ldr	r1, [pc, #300]	@ (8002980 <HAL_TIM_PWM_Stop_DMA+0x18c>)
 8002854:	400a      	ands	r2, r1
 8002856:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800285c:	0018      	movs	r0, r3
 800285e:	f7fe fe83 	bl	8001568 <HAL_DMA_Abort_IT>
      break;
 8002862:	e020      	b.n	80028a6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4945      	ldr	r1, [pc, #276]	@ (8002984 <HAL_TIM_PWM_Stop_DMA+0x190>)
 8002870:	400a      	ands	r2, r1
 8002872:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002878:	0018      	movs	r0, r3
 800287a:	f7fe fe75 	bl	8001568 <HAL_DMA_Abort_IT>
      break;
 800287e:	e012      	b.n	80028a6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68da      	ldr	r2, [r3, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	493f      	ldr	r1, [pc, #252]	@ (8002988 <HAL_TIM_PWM_Stop_DMA+0x194>)
 800288c:	400a      	ands	r2, r1
 800288e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002894:	0018      	movs	r0, r3
 8002896:	f7fe fe67 	bl	8001568 <HAL_DMA_Abort_IT>
      break;
 800289a:	e004      	b.n	80028a6 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 800289c:	230f      	movs	r3, #15
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2201      	movs	r2, #1
 80028a2:	701a      	strb	r2, [r3, #0]
      break;
 80028a4:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80028a6:	230f      	movs	r3, #15
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d15e      	bne.n	800296e <HAL_TIM_PWM_Stop_DMA+0x17a>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6839      	ldr	r1, [r7, #0]
 80028b6:	2200      	movs	r2, #0
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fdef 	bl	800349c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a32      	ldr	r2, [pc, #200]	@ (800298c <HAL_TIM_PWM_Stop_DMA+0x198>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d009      	beq.n	80028dc <HAL_TIM_PWM_Stop_DMA+0xe8>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a30      	ldr	r2, [pc, #192]	@ (8002990 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d004      	beq.n	80028dc <HAL_TIM_PWM_Stop_DMA+0xe8>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a2f      	ldr	r2, [pc, #188]	@ (8002994 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d101      	bne.n	80028e0 <HAL_TIM_PWM_Stop_DMA+0xec>
 80028dc:	2301      	movs	r3, #1
 80028de:	e000      	b.n	80028e2 <HAL_TIM_PWM_Stop_DMA+0xee>
 80028e0:	2300      	movs	r3, #0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d013      	beq.n	800290e <HAL_TIM_PWM_Stop_DMA+0x11a>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002998 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	d10d      	bne.n	800290e <HAL_TIM_PWM_Stop_DMA+0x11a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	4a28      	ldr	r2, [pc, #160]	@ (800299c <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	d107      	bne.n	800290e <HAL_TIM_PWM_Stop_DMA+0x11a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4925      	ldr	r1, [pc, #148]	@ (80029a0 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 800290a:	400a      	ands	r2, r1
 800290c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1b      	ldr	r3, [r3, #32]
 8002914:	4a20      	ldr	r2, [pc, #128]	@ (8002998 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8002916:	4013      	ands	r3, r2
 8002918:	d10d      	bne.n	8002936 <HAL_TIM_PWM_Stop_DMA+0x142>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	4a1e      	ldr	r2, [pc, #120]	@ (800299c <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8002922:	4013      	ands	r3, r2
 8002924:	d107      	bne.n	8002936 <HAL_TIM_PWM_Stop_DMA+0x142>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2101      	movs	r1, #1
 8002932:	438a      	bics	r2, r1
 8002934:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d104      	bne.n	8002946 <HAL_TIM_PWM_Stop_DMA+0x152>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	223e      	movs	r2, #62	@ 0x3e
 8002940:	2101      	movs	r1, #1
 8002942:	5499      	strb	r1, [r3, r2]
 8002944:	e013      	b.n	800296e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d104      	bne.n	8002956 <HAL_TIM_PWM_Stop_DMA+0x162>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	223f      	movs	r2, #63	@ 0x3f
 8002950:	2101      	movs	r1, #1
 8002952:	5499      	strb	r1, [r3, r2]
 8002954:	e00b      	b.n	800296e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b08      	cmp	r3, #8
 800295a:	d104      	bne.n	8002966 <HAL_TIM_PWM_Stop_DMA+0x172>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2240      	movs	r2, #64	@ 0x40
 8002960:	2101      	movs	r1, #1
 8002962:	5499      	strb	r1, [r3, r2]
 8002964:	e003      	b.n	800296e <HAL_TIM_PWM_Stop_DMA+0x17a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2241      	movs	r2, #65	@ 0x41
 800296a:	2101      	movs	r1, #1
 800296c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800296e:	230f      	movs	r3, #15
 8002970:	18fb      	adds	r3, r7, r3
 8002972:	781b      	ldrb	r3, [r3, #0]
}
 8002974:	0018      	movs	r0, r3
 8002976:	46bd      	mov	sp, r7
 8002978:	b004      	add	sp, #16
 800297a:	bd80      	pop	{r7, pc}
 800297c:	fffffdff 	.word	0xfffffdff
 8002980:	fffffbff 	.word	0xfffffbff
 8002984:	fffff7ff 	.word	0xfffff7ff
 8002988:	ffffefff 	.word	0xffffefff
 800298c:	40012c00 	.word	0x40012c00
 8002990:	40014400 	.word	0x40014400
 8002994:	40014800 	.word	0x40014800
 8002998:	00001111 	.word	0x00001111
 800299c:	00000444 	.word	0x00000444
 80029a0:	ffff7fff 	.word	0xffff7fff

080029a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b0:	2317      	movs	r3, #23
 80029b2:	18fb      	adds	r3, r7, r3
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	223c      	movs	r2, #60	@ 0x3c
 80029bc:	5c9b      	ldrb	r3, [r3, r2]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d101      	bne.n	80029c6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e0ad      	b.n	8002b22 <HAL_TIM_PWM_ConfigChannel+0x17e>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	223c      	movs	r2, #60	@ 0x3c
 80029ca:	2101      	movs	r1, #1
 80029cc:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d100      	bne.n	80029d6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80029d4:	e076      	b.n	8002ac4 <HAL_TIM_PWM_ConfigChannel+0x120>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0c      	cmp	r3, #12
 80029da:	d900      	bls.n	80029de <HAL_TIM_PWM_ConfigChannel+0x3a>
 80029dc:	e095      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x166>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d04e      	beq.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0xde>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d900      	bls.n	80029ec <HAL_TIM_PWM_ConfigChannel+0x48>
 80029ea:	e08e      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x166>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_TIM_PWM_ConfigChannel+0x56>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d021      	beq.n	8002a3c <HAL_TIM_PWM_ConfigChannel+0x98>
 80029f8:	e087      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	0011      	movs	r1, r2
 8002a02:	0018      	movs	r0, r3
 8002a04:	f000 fad0 	bl	8002fa8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699a      	ldr	r2, [r3, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2108      	movs	r1, #8
 8002a14:	430a      	orrs	r2, r1
 8002a16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2104      	movs	r1, #4
 8002a24:	438a      	bics	r2, r1
 8002a26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6999      	ldr	r1, [r3, #24]
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	619a      	str	r2, [r3, #24]
      break;
 8002a3a:	e06b      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	0011      	movs	r1, r2
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 fb2d 	bl	80030a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	699a      	ldr	r2, [r3, #24]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2180      	movs	r1, #128	@ 0x80
 8002a56:	0109      	lsls	r1, r1, #4
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4931      	ldr	r1, [pc, #196]	@ (8002b2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6999      	ldr	r1, [r3, #24]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	021a      	lsls	r2, r3, #8
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	619a      	str	r2, [r3, #24]
      break;
 8002a80:	e048      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	0011      	movs	r1, r2
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 fb88 	bl	80031a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2108      	movs	r1, #8
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2104      	movs	r1, #4
 8002aac:	438a      	bics	r2, r1
 8002aae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69d9      	ldr	r1, [r3, #28]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	61da      	str	r2, [r3, #28]
      break;
 8002ac2:	e027      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68ba      	ldr	r2, [r7, #8]
 8002aca:	0011      	movs	r1, r2
 8002acc:	0018      	movs	r0, r3
 8002ace:	f000 fbe7 	bl	80032a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69da      	ldr	r2, [r3, #28]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2180      	movs	r1, #128	@ 0x80
 8002ade:	0109      	lsls	r1, r1, #4
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	69da      	ldr	r2, [r3, #28]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	490f      	ldr	r1, [pc, #60]	@ (8002b2c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002af0:	400a      	ands	r2, r1
 8002af2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	69d9      	ldr	r1, [r3, #28]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	021a      	lsls	r2, r3, #8
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	61da      	str	r2, [r3, #28]
      break;
 8002b08:	e004      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002b0a:	2317      	movs	r3, #23
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
      break;
 8002b12:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	223c      	movs	r2, #60	@ 0x3c
 8002b18:	2100      	movs	r1, #0
 8002b1a:	5499      	strb	r1, [r3, r2]

  return status;
 8002b1c:	2317      	movs	r3, #23
 8002b1e:	18fb      	adds	r3, r7, r3
 8002b20:	781b      	ldrb	r3, [r3, #0]
}
 8002b22:	0018      	movs	r0, r3
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b006      	add	sp, #24
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	46c0      	nop			@ (mov r8, r8)
 8002b2c:	fffffbff 	.word	0xfffffbff

08002b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	230f      	movs	r3, #15
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	223c      	movs	r2, #60	@ 0x3c
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_TIM_ConfigClockSource+0x20>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e0bc      	b.n	8002cca <HAL_TIM_ConfigClockSource+0x19a>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223c      	movs	r2, #60	@ 0x3c
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	223d      	movs	r2, #61	@ 0x3d
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2277      	movs	r2, #119	@ 0x77
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4a58      	ldr	r2, [pc, #352]	@ (8002cd4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68ba      	ldr	r2, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2280      	movs	r2, #128	@ 0x80
 8002b86:	0192      	lsls	r2, r2, #6
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_TIM_ConfigClockSource+0xde>
 8002b8c:	2280      	movs	r2, #128	@ 0x80
 8002b8e:	0192      	lsls	r2, r2, #6
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d900      	bls.n	8002b96 <HAL_TIM_ConfigClockSource+0x66>
 8002b94:	e088      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002b96:	2280      	movs	r2, #128	@ 0x80
 8002b98:	0152      	lsls	r2, r2, #5
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d100      	bne.n	8002ba0 <HAL_TIM_ConfigClockSource+0x70>
 8002b9e:	e088      	b.n	8002cb2 <HAL_TIM_ConfigClockSource+0x182>
 8002ba0:	2280      	movs	r2, #128	@ 0x80
 8002ba2:	0152      	lsls	r2, r2, #5
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d900      	bls.n	8002baa <HAL_TIM_ConfigClockSource+0x7a>
 8002ba8:	e07e      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002baa:	2b70      	cmp	r3, #112	@ 0x70
 8002bac:	d018      	beq.n	8002be0 <HAL_TIM_ConfigClockSource+0xb0>
 8002bae:	d900      	bls.n	8002bb2 <HAL_TIM_ConfigClockSource+0x82>
 8002bb0:	e07a      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bb2:	2b60      	cmp	r3, #96	@ 0x60
 8002bb4:	d04f      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x126>
 8002bb6:	d900      	bls.n	8002bba <HAL_TIM_ConfigClockSource+0x8a>
 8002bb8:	e076      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bba:	2b50      	cmp	r3, #80	@ 0x50
 8002bbc:	d03b      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x106>
 8002bbe:	d900      	bls.n	8002bc2 <HAL_TIM_ConfigClockSource+0x92>
 8002bc0:	e072      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bc2:	2b40      	cmp	r3, #64	@ 0x40
 8002bc4:	d057      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x146>
 8002bc6:	d900      	bls.n	8002bca <HAL_TIM_ConfigClockSource+0x9a>
 8002bc8:	e06e      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bca:	2b30      	cmp	r3, #48	@ 0x30
 8002bcc:	d063      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bce:	d86b      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bd0:	2b20      	cmp	r3, #32
 8002bd2:	d060      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bd4:	d868      	bhi.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d05d      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d05b      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x166>
 8002bde:	e063      	b.n	8002ca8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bf0:	f000 fc34 	bl	800345c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2277      	movs	r2, #119	@ 0x77
 8002c00:	4313      	orrs	r3, r2
 8002c02:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	609a      	str	r2, [r3, #8]
      break;
 8002c0c:	e052      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c1e:	f000 fc1d 	bl	800345c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2180      	movs	r1, #128	@ 0x80
 8002c2e:	01c9      	lsls	r1, r1, #7
 8002c30:	430a      	orrs	r2, r1
 8002c32:	609a      	str	r2, [r3, #8]
      break;
 8002c34:	e03e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c42:	001a      	movs	r2, r3
 8002c44:	f000 fb90 	bl	8003368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2150      	movs	r1, #80	@ 0x50
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f000 fbea 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e02e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c62:	001a      	movs	r2, r3
 8002c64:	f000 fbae 	bl	80033c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2160      	movs	r1, #96	@ 0x60
 8002c6e:	0018      	movs	r0, r3
 8002c70:	f000 fbda 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e01e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	001a      	movs	r2, r3
 8002c84:	f000 fb70 	bl	8003368 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2140      	movs	r1, #64	@ 0x40
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 fbca 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e00e      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	0019      	movs	r1, r3
 8002ca0:	0010      	movs	r0, r2
 8002ca2:	f000 fbc1 	bl	8003428 <TIM_ITRx_SetConfig>
      break;
 8002ca6:	e005      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ca8:	230f      	movs	r3, #15
 8002caa:	18fb      	adds	r3, r7, r3
 8002cac:	2201      	movs	r2, #1
 8002cae:	701a      	strb	r2, [r3, #0]
      break;
 8002cb0:	e000      	b.n	8002cb4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002cb2:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	223d      	movs	r2, #61	@ 0x3d
 8002cb8:	2101      	movs	r1, #1
 8002cba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223c      	movs	r2, #60	@ 0x3c
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  return status;
 8002cc4:	230f      	movs	r3, #15
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	781b      	ldrb	r3, [r3, #0]
}
 8002cca:	0018      	movs	r0, r3
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	b004      	add	sp, #16
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	46c0      	nop			@ (mov r8, r8)
 8002cd4:	ffff00ff 	.word	0xffff00ff

08002cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	223e      	movs	r2, #62	@ 0x3e
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]
 8002d1e:	e02a      	b.n	8002d76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d107      	bne.n	8002d3a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	223f      	movs	r2, #63	@ 0x3f
 8002d34:	2101      	movs	r1, #1
 8002d36:	5499      	strb	r1, [r3, r2]
 8002d38:	e01d      	b.n	8002d76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d107      	bne.n	8002d54 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2204      	movs	r2, #4
 8002d48:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2240      	movs	r2, #64	@ 0x40
 8002d4e:	2101      	movs	r1, #1
 8002d50:	5499      	strb	r1, [r3, r2]
 8002d52:	e010      	b.n	8002d76 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d107      	bne.n	8002d6e <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2208      	movs	r2, #8
 8002d62:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2241      	movs	r2, #65	@ 0x41
 8002d68:	2101      	movs	r1, #1
 8002d6a:	5499      	strb	r1, [r3, r2]
 8002d6c:	e003      	b.n	8002d76 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	223d      	movs	r2, #61	@ 0x3d
 8002d72:	2101      	movs	r1, #1
 8002d74:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f7ff ffb5 	bl	8002ce8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	771a      	strb	r2, [r3, #28]
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b004      	add	sp, #16
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d98:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d10b      	bne.n	8002dbc <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2201      	movs	r2, #1
 8002da8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d136      	bne.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	223e      	movs	r2, #62	@ 0x3e
 8002db6:	2101      	movs	r1, #1
 8002db8:	5499      	strb	r1, [r3, r2]
 8002dba:	e031      	b.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d10b      	bne.n	8002dde <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d125      	bne.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	223f      	movs	r2, #63	@ 0x3f
 8002dd8:	2101      	movs	r1, #1
 8002dda:	5499      	strb	r1, [r3, r2]
 8002ddc:	e020      	b.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d10b      	bne.n	8002e00 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2204      	movs	r2, #4
 8002dec:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d114      	bne.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2240      	movs	r2, #64	@ 0x40
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]
 8002dfe:	e00f      	b.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d10a      	bne.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2241      	movs	r2, #65	@ 0x41
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f7fd fae6 	bl	80003f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	771a      	strb	r2, [r3, #28]
}
 8002e2e:	46c0      	nop			@ (mov r8, r8)
 8002e30:	46bd      	mov	sp, r7
 8002e32:	b004      	add	sp, #16
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d103      	bne.n	8002e56 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	771a      	strb	r2, [r3, #28]
 8002e54:	e019      	b.n	8002e8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d103      	bne.n	8002e68 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2202      	movs	r2, #2
 8002e64:	771a      	strb	r2, [r3, #28]
 8002e66:	e010      	b.n	8002e8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d103      	bne.n	8002e7a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2204      	movs	r2, #4
 8002e76:	771a      	strb	r2, [r3, #28]
 8002e78:	e007      	b.n	8002e8a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d102      	bne.n	8002e8a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2208      	movs	r2, #8
 8002e88:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff ff23 	bl	8002cd8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	771a      	strb	r2, [r3, #28]
}
 8002e98:	46c0      	nop			@ (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a37      	ldr	r2, [pc, #220]	@ (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d008      	beq.n	8002eca <TIM_Base_SetConfig+0x2a>
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	05db      	lsls	r3, r3, #23
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d003      	beq.n	8002eca <TIM_Base_SetConfig+0x2a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a33      	ldr	r2, [pc, #204]	@ (8002f94 <TIM_Base_SetConfig+0xf4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d108      	bne.n	8002edc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2270      	movs	r2, #112	@ 0x70
 8002ece:	4393      	bics	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	68fa      	ldr	r2, [r7, #12]
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d014      	beq.n	8002f0e <TIM_Base_SetConfig+0x6e>
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	2380      	movs	r3, #128	@ 0x80
 8002ee8:	05db      	lsls	r3, r3, #23
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d00f      	beq.n	8002f0e <TIM_Base_SetConfig+0x6e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	@ (8002f94 <TIM_Base_SetConfig+0xf4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00b      	beq.n	8002f0e <TIM_Base_SetConfig+0x6e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a27      	ldr	r2, [pc, #156]	@ (8002f98 <TIM_Base_SetConfig+0xf8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d007      	beq.n	8002f0e <TIM_Base_SetConfig+0x6e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a26      	ldr	r2, [pc, #152]	@ (8002f9c <TIM_Base_SetConfig+0xfc>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d003      	beq.n	8002f0e <TIM_Base_SetConfig+0x6e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a25      	ldr	r2, [pc, #148]	@ (8002fa0 <TIM_Base_SetConfig+0x100>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d108      	bne.n	8002f20 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a24      	ldr	r2, [pc, #144]	@ (8002fa4 <TIM_Base_SetConfig+0x104>)
 8002f12:	4013      	ands	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	68fa      	ldr	r2, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2280      	movs	r2, #128	@ 0x80
 8002f24:	4393      	bics	r3, r2
 8002f26:	001a      	movs	r2, r3
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68fa      	ldr	r2, [r7, #12]
 8002f34:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	689a      	ldr	r2, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <TIM_Base_SetConfig+0xf0>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d007      	beq.n	8002f5e <TIM_Base_SetConfig+0xbe>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <TIM_Base_SetConfig+0xfc>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d003      	beq.n	8002f5e <TIM_Base_SetConfig+0xbe>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a11      	ldr	r2, [pc, #68]	@ (8002fa0 <TIM_Base_SetConfig+0x100>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d103      	bne.n	8002f66 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2201      	movs	r2, #1
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	4393      	bics	r3, r2
 8002f80:	001a      	movs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]
  }
}
 8002f86:	46c0      	nop			@ (mov r8, r8)
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	b004      	add	sp, #16
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			@ (mov r8, r8)
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40000400 	.word	0x40000400
 8002f98:	40002000 	.word	0x40002000
 8002f9c:	40014400 	.word	0x40014400
 8002fa0:	40014800 	.word	0x40014800
 8002fa4:	fffffcff 	.word	0xfffffcff

08002fa8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b086      	sub	sp, #24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4393      	bics	r3, r2
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2270      	movs	r2, #112	@ 0x70
 8002fd6:	4393      	bics	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	4393      	bics	r3, r2
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2202      	movs	r2, #2
 8002ff0:	4393      	bics	r3, r2
 8002ff2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	697a      	ldr	r2, [r7, #20]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a23      	ldr	r2, [pc, #140]	@ (8003090 <TIM_OC1_SetConfig+0xe8>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d007      	beq.n	8003016 <TIM_OC1_SetConfig+0x6e>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a22      	ldr	r2, [pc, #136]	@ (8003094 <TIM_OC1_SetConfig+0xec>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d003      	beq.n	8003016 <TIM_OC1_SetConfig+0x6e>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a21      	ldr	r2, [pc, #132]	@ (8003098 <TIM_OC1_SetConfig+0xf0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d10c      	bne.n	8003030 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2208      	movs	r2, #8
 800301a:	4393      	bics	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	4313      	orrs	r3, r2
 8003026:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	2204      	movs	r2, #4
 800302c:	4393      	bics	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a17      	ldr	r2, [pc, #92]	@ (8003090 <TIM_OC1_SetConfig+0xe8>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <TIM_OC1_SetConfig+0xa0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <TIM_OC1_SetConfig+0xec>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_OC1_SetConfig+0xa0>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a15      	ldr	r2, [pc, #84]	@ (8003098 <TIM_OC1_SetConfig+0xf0>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d111      	bne.n	800306c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4a14      	ldr	r2, [pc, #80]	@ (800309c <TIM_OC1_SetConfig+0xf4>)
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4a13      	ldr	r2, [pc, #76]	@ (80030a0 <TIM_OC1_SetConfig+0xf8>)
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	621a      	str	r2, [r3, #32]
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b006      	add	sp, #24
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40014400 	.word	0x40014400
 8003098:	40014800 	.word	0x40014800
 800309c:	fffffeff 	.word	0xfffffeff
 80030a0:	fffffdff 	.word	0xfffffdff

080030a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a1b      	ldr	r3, [r3, #32]
 80030b8:	2210      	movs	r2, #16
 80030ba:	4393      	bics	r3, r2
 80030bc:	001a      	movs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003184 <TIM_OC2_SetConfig+0xe0>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4a2b      	ldr	r2, [pc, #172]	@ (8003188 <TIM_OC2_SetConfig+0xe4>)
 80030da:	4013      	ands	r3, r2
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2220      	movs	r2, #32
 80030ee:	4393      	bics	r3, r2
 80030f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a22      	ldr	r2, [pc, #136]	@ (800318c <TIM_OC2_SetConfig+0xe8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d10d      	bne.n	8003122 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	2280      	movs	r2, #128	@ 0x80
 800310a:	4393      	bics	r3, r2
 800310c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	68db      	ldr	r3, [r3, #12]
 8003112:	011b      	lsls	r3, r3, #4
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	2240      	movs	r2, #64	@ 0x40
 800311e:	4393      	bics	r3, r2
 8003120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a19      	ldr	r2, [pc, #100]	@ (800318c <TIM_OC2_SetConfig+0xe8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d007      	beq.n	800313a <TIM_OC2_SetConfig+0x96>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a18      	ldr	r2, [pc, #96]	@ (8003190 <TIM_OC2_SetConfig+0xec>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d003      	beq.n	800313a <TIM_OC2_SetConfig+0x96>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a17      	ldr	r2, [pc, #92]	@ (8003194 <TIM_OC2_SetConfig+0xf0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d113      	bne.n	8003162 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4a16      	ldr	r2, [pc, #88]	@ (8003198 <TIM_OC2_SetConfig+0xf4>)
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4a15      	ldr	r2, [pc, #84]	@ (800319c <TIM_OC2_SetConfig+0xf8>)
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685a      	ldr	r2, [r3, #4]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	621a      	str	r2, [r3, #32]
}
 800317c:	46c0      	nop			@ (mov r8, r8)
 800317e:	46bd      	mov	sp, r7
 8003180:	b006      	add	sp, #24
 8003182:	bd80      	pop	{r7, pc}
 8003184:	ffff8fff 	.word	0xffff8fff
 8003188:	fffffcff 	.word	0xfffffcff
 800318c:	40012c00 	.word	0x40012c00
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800
 8003198:	fffffbff 	.word	0xfffffbff
 800319c:	fffff7ff 	.word	0xfffff7ff

080031a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b086      	sub	sp, #24
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	4a31      	ldr	r2, [pc, #196]	@ (800327c <TIM_OC3_SetConfig+0xdc>)
 80031b6:	401a      	ands	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2270      	movs	r2, #112	@ 0x70
 80031cc:	4393      	bics	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2203      	movs	r2, #3
 80031d4:	4393      	bics	r3, r2
 80031d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4a26      	ldr	r2, [pc, #152]	@ (8003280 <TIM_OC3_SetConfig+0xe0>)
 80031e6:	4013      	ands	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	021b      	lsls	r3, r3, #8
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a22      	ldr	r2, [pc, #136]	@ (8003284 <TIM_OC3_SetConfig+0xe4>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d10d      	bne.n	800321a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	4a21      	ldr	r2, [pc, #132]	@ (8003288 <TIM_OC3_SetConfig+0xe8>)
 8003202:	4013      	ands	r3, r2
 8003204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	4313      	orrs	r3, r2
 8003210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4a1d      	ldr	r2, [pc, #116]	@ (800328c <TIM_OC3_SetConfig+0xec>)
 8003216:	4013      	ands	r3, r2
 8003218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a19      	ldr	r2, [pc, #100]	@ (8003284 <TIM_OC3_SetConfig+0xe4>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d007      	beq.n	8003232 <TIM_OC3_SetConfig+0x92>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a1a      	ldr	r2, [pc, #104]	@ (8003290 <TIM_OC3_SetConfig+0xf0>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d003      	beq.n	8003232 <TIM_OC3_SetConfig+0x92>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a19      	ldr	r2, [pc, #100]	@ (8003294 <TIM_OC3_SetConfig+0xf4>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d113      	bne.n	800325a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4a18      	ldr	r2, [pc, #96]	@ (8003298 <TIM_OC3_SetConfig+0xf8>)
 8003236:	4013      	ands	r3, r2
 8003238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4a17      	ldr	r2, [pc, #92]	@ (800329c <TIM_OC3_SetConfig+0xfc>)
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	4313      	orrs	r3, r2
 800324c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	621a      	str	r2, [r3, #32]
}
 8003274:	46c0      	nop			@ (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b006      	add	sp, #24
 800327a:	bd80      	pop	{r7, pc}
 800327c:	fffffeff 	.word	0xfffffeff
 8003280:	fffffdff 	.word	0xfffffdff
 8003284:	40012c00 	.word	0x40012c00
 8003288:	fffff7ff 	.word	0xfffff7ff
 800328c:	fffffbff 	.word	0xfffffbff
 8003290:	40014400 	.word	0x40014400
 8003294:	40014800 	.word	0x40014800
 8003298:	ffffefff 	.word	0xffffefff
 800329c:	ffffdfff 	.word	0xffffdfff

080032a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4a24      	ldr	r2, [pc, #144]	@ (8003348 <TIM_OC4_SetConfig+0xa8>)
 80032b6:	401a      	ands	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a20      	ldr	r2, [pc, #128]	@ (800334c <TIM_OC4_SetConfig+0xac>)
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003350 <TIM_OC4_SetConfig+0xb0>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	021b      	lsls	r3, r3, #8
 80032de:	68fa      	ldr	r2, [r7, #12]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003354 <TIM_OC4_SetConfig+0xb4>)
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	031b      	lsls	r3, r3, #12
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <TIM_OC4_SetConfig+0xb8>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <TIM_OC4_SetConfig+0x70>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <TIM_OC4_SetConfig+0xbc>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d003      	beq.n	8003310 <TIM_OC4_SetConfig+0x70>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a15      	ldr	r2, [pc, #84]	@ (8003360 <TIM_OC4_SetConfig+0xc0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d109      	bne.n	8003324 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	4a14      	ldr	r2, [pc, #80]	@ (8003364 <TIM_OC4_SetConfig+0xc4>)
 8003314:	4013      	ands	r3, r2
 8003316:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	695b      	ldr	r3, [r3, #20]
 800331c:	019b      	lsls	r3, r3, #6
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	693a      	ldr	r2, [r7, #16]
 800333c:	621a      	str	r2, [r3, #32]
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46bd      	mov	sp, r7
 8003342:	b006      	add	sp, #24
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			@ (mov r8, r8)
 8003348:	ffffefff 	.word	0xffffefff
 800334c:	ffff8fff 	.word	0xffff8fff
 8003350:	fffffcff 	.word	0xfffffcff
 8003354:	ffffdfff 	.word	0xffffdfff
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40014400 	.word	0x40014400
 8003360:	40014800 	.word	0x40014800
 8003364:	ffffbfff 	.word	0xffffbfff

08003368 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	2201      	movs	r2, #1
 8003380:	4393      	bics	r3, r2
 8003382:	001a      	movs	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	22f0      	movs	r2, #240	@ 0xf0
 8003392:	4393      	bics	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	4313      	orrs	r3, r2
 800339e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	220a      	movs	r2, #10
 80033a4:	4393      	bics	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	621a      	str	r2, [r3, #32]
}
 80033bc:	46c0      	nop			@ (mov r8, r8)
 80033be:	46bd      	mov	sp, r7
 80033c0:	b006      	add	sp, #24
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	2210      	movs	r2, #16
 80033dc:	4393      	bics	r3, r2
 80033de:	001a      	movs	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003424 <TIM_TI2_ConfigInputStage+0x60>)
 80033ee:	4013      	ands	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	031b      	lsls	r3, r3, #12
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	22a0      	movs	r2, #160	@ 0xa0
 8003400:	4393      	bics	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	697a      	ldr	r2, [r7, #20]
 800340a:	4313      	orrs	r3, r2
 800340c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	621a      	str	r2, [r3, #32]
}
 800341a:	46c0      	nop			@ (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b006      	add	sp, #24
 8003420:	bd80      	pop	{r7, pc}
 8003422:	46c0      	nop			@ (mov r8, r8)
 8003424:	ffff0fff 	.word	0xffff0fff

08003428 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2270      	movs	r2, #112	@ 0x70
 800343c:	4393      	bics	r3, r2
 800343e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	2207      	movs	r2, #7
 8003448:	4313      	orrs	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
}
 8003452:	46c0      	nop			@ (mov r8, r8)
 8003454:	46bd      	mov	sp, r7
 8003456:	b004      	add	sp, #16
 8003458:	bd80      	pop	{r7, pc}
	...

0800345c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	4a09      	ldr	r2, [pc, #36]	@ (8003498 <TIM_ETR_SetConfig+0x3c>)
 8003474:	4013      	ands	r3, r2
 8003476:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	021a      	lsls	r2, r3, #8
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	431a      	orrs	r2, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	609a      	str	r2, [r3, #8]
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b006      	add	sp, #24
 8003496:	bd80      	pop	{r7, pc}
 8003498:	ffff00ff 	.word	0xffff00ff

0800349c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b086      	sub	sp, #24
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	221f      	movs	r2, #31
 80034ac:	4013      	ands	r3, r2
 80034ae:	2201      	movs	r2, #1
 80034b0:	409a      	lsls	r2, r3
 80034b2:	0013      	movs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	43d2      	mvns	r2, r2
 80034be:	401a      	ands	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6a1a      	ldr	r2, [r3, #32]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	211f      	movs	r1, #31
 80034cc:	400b      	ands	r3, r1
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4099      	lsls	r1, r3
 80034d2:	000b      	movs	r3, r1
 80034d4:	431a      	orrs	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	b006      	add	sp, #24
 80034e0:	bd80      	pop	{r7, pc}
	...

080034e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	223c      	movs	r2, #60	@ 0x3c
 80034f2:	5c9b      	ldrb	r3, [r3, r2]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034f8:	2302      	movs	r3, #2
 80034fa:	e042      	b.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	223c      	movs	r2, #60	@ 0x3c
 8003500:	2101      	movs	r1, #1
 8003502:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	223d      	movs	r2, #61	@ 0x3d
 8003508:	2102      	movs	r1, #2
 800350a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2270      	movs	r2, #112	@ 0x70
 8003520:	4393      	bics	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a14      	ldr	r2, [pc, #80]	@ (800358c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00a      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	2380      	movs	r3, #128	@ 0x80
 8003546:	05db      	lsls	r3, r3, #23
 8003548:	429a      	cmp	r2, r3
 800354a:	d004      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a0f      	ldr	r2, [pc, #60]	@ (8003590 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10c      	bne.n	8003570 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2280      	movs	r2, #128	@ 0x80
 800355a:	4393      	bics	r3, r2
 800355c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	4313      	orrs	r3, r2
 8003566:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	223d      	movs	r2, #61	@ 0x3d
 8003574:	2101      	movs	r1, #1
 8003576:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223c      	movs	r2, #60	@ 0x3c
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	40012c00 	.word	0x40012c00
 8003590:	40000400 	.word	0x40000400

08003594 <memset>:
 8003594:	0003      	movs	r3, r0
 8003596:	1882      	adds	r2, r0, r2
 8003598:	4293      	cmp	r3, r2
 800359a:	d100      	bne.n	800359e <memset+0xa>
 800359c:	4770      	bx	lr
 800359e:	7019      	strb	r1, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	e7f9      	b.n	8003598 <memset+0x4>

080035a4 <__libc_init_array>:
 80035a4:	b570      	push	{r4, r5, r6, lr}
 80035a6:	2600      	movs	r6, #0
 80035a8:	4c0c      	ldr	r4, [pc, #48]	@ (80035dc <__libc_init_array+0x38>)
 80035aa:	4d0d      	ldr	r5, [pc, #52]	@ (80035e0 <__libc_init_array+0x3c>)
 80035ac:	1b64      	subs	r4, r4, r5
 80035ae:	10a4      	asrs	r4, r4, #2
 80035b0:	42a6      	cmp	r6, r4
 80035b2:	d109      	bne.n	80035c8 <__libc_init_array+0x24>
 80035b4:	2600      	movs	r6, #0
 80035b6:	f000 f819 	bl	80035ec <_init>
 80035ba:	4c0a      	ldr	r4, [pc, #40]	@ (80035e4 <__libc_init_array+0x40>)
 80035bc:	4d0a      	ldr	r5, [pc, #40]	@ (80035e8 <__libc_init_array+0x44>)
 80035be:	1b64      	subs	r4, r4, r5
 80035c0:	10a4      	asrs	r4, r4, #2
 80035c2:	42a6      	cmp	r6, r4
 80035c4:	d105      	bne.n	80035d2 <__libc_init_array+0x2e>
 80035c6:	bd70      	pop	{r4, r5, r6, pc}
 80035c8:	00b3      	lsls	r3, r6, #2
 80035ca:	58eb      	ldr	r3, [r5, r3]
 80035cc:	4798      	blx	r3
 80035ce:	3601      	adds	r6, #1
 80035d0:	e7ee      	b.n	80035b0 <__libc_init_array+0xc>
 80035d2:	00b3      	lsls	r3, r6, #2
 80035d4:	58eb      	ldr	r3, [r5, r3]
 80035d6:	4798      	blx	r3
 80035d8:	3601      	adds	r6, #1
 80035da:	e7f2      	b.n	80035c2 <__libc_init_array+0x1e>
 80035dc:	0800366c 	.word	0x0800366c
 80035e0:	0800366c 	.word	0x0800366c
 80035e4:	08003670 	.word	0x08003670
 80035e8:	0800366c 	.word	0x0800366c

080035ec <_init>:
 80035ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035f2:	bc08      	pop	{r3}
 80035f4:	469e      	mov	lr, r3
 80035f6:	4770      	bx	lr

080035f8 <_fini>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr
